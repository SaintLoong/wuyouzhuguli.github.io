<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MrBird</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mrbird.cc/"/>
  <updated>2020-01-21T10:30:56.818Z</updated>
  <id>http://mrbird.cc/</id>
  
  <author>
    <name>MrBird</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud 微服务权限系统搭建教程</title>
    <link href="http://mrbird.cc/book.html"/>
    <id>http://mrbird.cc/book.html</id>
    <published>2222-10-24T06:20:57.000Z</published>
    <updated>2020-01-21T10:30:56.818Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:41 GMT+0800 (GMT+08:00) --><p>📖《<a href="https://www.kancloud.cn/mrbird/spring-cloud" target="_blank" rel="noopener"> Spring Cloud 微服务权限系统搭建教程 </a>》一本基于Spring Cloud Hoxton.RELEASE&amp;Spring Cloud Oauth2&amp;Spring Cloud Alibaba的微服务权限系统搭建教程书籍，手把手教你从零到K8S集群部署。</p><a id="more"></a><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263686" target="_blank" rel="noopener">第一章 基础框架搭建</a><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263687" target="_blank" rel="noopener">1.1 架构预览</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263688" target="_blank" rel="noopener">1.2 搭建微服务注册中心</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263689" target="_blank" rel="noopener">1.3 搭建认证服务器</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263690" target="_blank" rel="noopener">1.4 搭建微服务网关</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263691" target="_blank" rel="noopener">1.5 搭建微服务提供者（资源服务器）</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263692" target="_blank" rel="noopener">1.6 本章小结</a></li></ul></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263693" target="_blank" rel="noopener">第二章 架构完善</a><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263694" target="_blank" rel="noopener">2.1 参数配置化</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263695" target="_blank" rel="noopener">2.2 异常处理</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263696" target="_blank" rel="noopener">2.3 Feign的使用</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263697" target="_blank" rel="noopener">2.4 微服务防护</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263698" target="_blank" rel="noopener">2.5 跨域处理</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263699" target="_blank" rel="noopener">2.6 本章小结</a></li></ul></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263700" target="_blank" rel="noopener">第三章 完善登录流程</a><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263701" target="_blank" rel="noopener">3.1 表结构设计</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263702" target="_blank" rel="noopener">3.2 完善登录</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263703" target="_blank" rel="noopener">3.3 整合图形验证码</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263704" target="_blank" rel="noopener">3.4 Sentinel验证码限流</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263705" target="_blank" rel="noopener">3.5 本章小结</a></li></ul></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263706" target="_blank" rel="noopener">第四章 整合Swagger</a><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263707" target="_blank" rel="noopener">4.1 完善febs-server-system</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263708" target="_blank" rel="noopener">4.2 接入Swagger</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263709" target="_blank" rel="noopener">4.3 Swagger OAuth2认证</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263710" target="_blank" rel="noopener">4.4 本章小结</a></li></ul></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263711" target="_blank" rel="noopener">第五章 整合第三方服务</a><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263712" target="_blank" rel="noopener">5.1 整合Spring Boot Admin</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263713" target="_blank" rel="noopener">5.2 Sleuth Zipkin链路追踪</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263714" target="_blank" rel="noopener">5.3 logback日志打印</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263715" target="_blank" rel="noopener">5.4 ELK日志收集</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263716" target="_blank" rel="noopener">5.5 本章小结</a></li></ul></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263717" target="_blank" rel="noopener">第六章 前端系统介绍</a><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263718" target="_blank" rel="noopener">6.1 封装Axios</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263719" target="_blank" rel="noopener">6.2 Vue导航守卫</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263720" target="_blank" rel="noopener">6.3 动态路由构建</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263721" target="_blank" rel="noopener">6.4 处理用户登录</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263722" target="_blank" rel="noopener">6.5 处理令牌刷新</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263723" target="_blank" rel="noopener">6.6 自定义Vue权限指令</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263724" target="_blank" rel="noopener">6.7 本章小结</a></li></ul></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263725" target="_blank" rel="noopener">第七章 微服务部署</a><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263726" target="_blank" rel="noopener">7.1 微服务Dokcer化</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263727" target="_blank" rel="noopener">7.2 使用Docker Compose部署</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263728" target="_blank" rel="noopener">7.3 本章小结</a></li></ul></li><li><p><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263729" target="_blank" rel="noopener">第八章 微服务进阶</a></p><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1277531" target="_blank" rel="noopener">8.1 令牌存储策略</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1263731" target="_blank" rel="noopener">8.2 使用Cloud Gateway搭建网关</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1271133" target="_blank" rel="noopener">8.3 使用Alibaba Nacos注册中心</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1289434" target="_blank" rel="noopener">8.4 使用Alibaba Nacos存储配置</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1333138" target="_blank" rel="noopener">8.5 接入Prometheus + Grafana</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1337996" target="_blank" rel="noopener">8.6 整合skywalking分布式追踪</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1411735" target="_blank" rel="noopener">8.7 升级到Hoxton.RELEASE</a></li></ul></li><li><p><a href="https://www.kancloud.cn/mrbird/spring-cloud/1426914" target="_blank" rel="noopener">第九章 K8S集群部署</a></p><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1426916" target="_blank" rel="noopener">9.1 集群环境准备</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1426917" target="_blank" rel="noopener">9.2 安装第三方服务</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1426918" target="_blank" rel="noopener">9.3 Kubeadm搭建K8S 1.16.2集群</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1426919" target="_blank" rel="noopener">9.4 NFS服务器搭建</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1426920" target="_blank" rel="noopener">9.5 搭建Docker镜像仓库Harbor</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1426921" target="_blank" rel="noopener">9.6 K8S构建高可用Nacos</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1426922" target="_blank" rel="noopener">9.7 K8S构建FEBS Cloud服务集群</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1426923" target="_blank" rel="noopener">9.8 部署前端测试</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1426924" target="_blank" rel="noopener">9.9 K8S实践总结</a></li></ul></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1456142" target="_blank" rel="noopener">第十章 分布式事务研究</a><ul><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1456143" target="_blank" rel="noopener">10.1 分布式架构事务挑战</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1456144" target="_blank" rel="noopener">10.2 分布式事务解决方案</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1456145" target="_blank" rel="noopener">10.3 基于消息中间件RocketMQ方案（一）</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1456146" target="_blank" rel="noopener">10.4 基于消息中间件RocketMQ方案（二）</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1456147" target="_blank" rel="noopener">10.5 基于TX-LCN方案</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1456148" target="_blank" rel="noopener">10.6 基于阿里Seata方案</a></li><li><a href="https://www.kancloud.cn/mrbird/spring-cloud/1456149" target="_blank" rel="noopener">10.7 本章总结</a></li></ul></li></ul><script>$(function(){$("#comment-div").remove(),$(".post-copyright").remove(),$("#reward-div").remove(),$(".post-footer").remove()})</script><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:41 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;📖《&lt;a href=&quot;https://www.kancloud.cn/mrbird/spring-cloud&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; Spring Cloud 微服务权限系统搭建教程 &lt;/a&gt;》一本基于Spring Cloud Hoxton.RELEASE&amp;amp;Spring Cloud Oauth2&amp;amp;Spring Cloud Alibaba的微服务权限系统搭建教程书籍，手把手教你从零到K8S集群部署。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式学习</title>
    <link href="http://mrbird.cc/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://mrbird.cc/Java设计模式.html</id>
    <published>2020-04-01T02:07:45.000Z</published>
    <updated>2020-05-11T09:25:22.266Z</updated>
    
    <content type="html"><![CDATA[<!-- <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> -->
<div id="hbe-security">
  <div class="hbe-input-container">
  	<input type="password" style="display: none;"/>
  	<input type="text" autocomplete="off" style="display: none;"/>
  <input type="password" class="hbe-form-control" id="pass" placeholder="密码：" autocomplete="new-password"/>
    <label for="pass">密码：</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">密码错误 😭</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      简单记录Java中23种设计模式的应用，方便后期查看。
    
    </summary>
    
    
      <category term="Java" scheme="http://mrbird.cc/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Kafka API使用</title>
    <link href="http://mrbird.cc/Kafka-API%E4%BD%BF%E7%94%A8.html"/>
    <id>http://mrbird.cc/Kafka-API使用.html</id>
    <published>2020-03-29T14:08:32.000Z</published>
    <updated>2020-04-02T08:13:18.478Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>本节演示如何通过Java代码创建Kafka生产者、消费者和拦截器，依赖使用<a href="https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients/2.4.1" target="_blank" rel="noopener">Kafka-clients</a>。因为我安装的Kafka版本为2.4.1，所以依赖的版本也用2.4.1，避免兼容问题。新增一个maven项目，引入：</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生产者API"><a href="#生产者API" class="headerlink" title="生产者API"></a>生产者API</h2><p>Kafka 的 Producer 发送消息采用的是异步发送的方式。在消息发送的过程中，涉及到了两个线程——main 线程和 Sender 线程，以及一个线程共享变量——RecordAccumulator。main 线程将消息发送给 RecordAccumulator，Sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka broker。</p><h3 id="简单发送数据"><a href="#简单发送数据" class="headerlink" title="简单发送数据"></a>简单发送数据</h3><p>创建<code>ProducerDemo</code>类，编写一个简单的生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 生产者配置</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 指定kafka地址</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        <span class="comment">// 指定ack等级</span></span><br><span class="line">        properties.put(ProducerConfig.ACKS_CONFIG, <span class="string">"all"</span>);</span><br><span class="line">        <span class="comment">// 指定重试次数，即生产者发送数据后没有收到ack应答时的重试次数</span></span><br><span class="line">        properties.put(ProducerConfig.RETRIES_CONFIG, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 指定批次大小 16k = 16 * 1024</span></span><br><span class="line">        properties.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="number">16384</span>);</span><br><span class="line">        <span class="comment">// 指定等待时间，单位毫秒</span></span><br><span class="line">        properties.put(ProducerConfig.LINGER_MS_CONFIG, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 指定RecordAccumulator缓冲区大小 32m = 32 * 1024 * 1024</span></span><br><span class="line">        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="number">33554432</span>);</span><br><span class="line">        <span class="comment">// 指定k-v序列化规则</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        <span class="comment">// 2. 创建生产者</span></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">// 3. 准备数据</span></span><br><span class="line">        ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"test"</span>, <span class="string">"mesage"</span>);</span><br><span class="line">        <span class="comment">// 4. 发送数据（不带回调）</span></span><br><span class="line">        producer.send(record);</span><br><span class="line">        <span class="comment">// 5. 关闭连接</span></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>无论是创建生产者还是消费者，我们都要指定配置。生产者配置可以使用常量类<code>ProducerConfig</code>指定，里面包含了生产者所有可用配置，并且包含对应的解释：</p><p><img src="img/QQ20200402-103628@2x.png" alt="QQ20200402-103628@2x"></p><p>上面代码创建了一个kv都是String类型的生产者。配置了Kafka的地址，ack等级为all（在<a href="/Kafka生产者.html">Kafka生产者</a>一节中介绍过了，不赘述），重试次数为3。并且指定了生产者发送数据的批次为16k，等待时间为1ms。也就是说，要么发送的数据量达到了16k，要么等待时间超过了1ms才会真正地把数据发往Kafka。</p><p>此外，我们还指定RecordAccumulator缓冲区大小，kv序列化规则采用<code>StringSerializer</code>。</p><p>Kafka消息使用<code>KafkaProducer</code>对象表示，他有6个重载构造器，这在<a href="/Kafka生产者.html">Kafka生产者</a>介绍过了，这里我们指定了主题为test，消息内容为message。</p><p>运行这段代码之前，我们先启动zk和kafka：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 启动zk</span><br><span class="line">sh bin/zookeeper-server-start.sh config/zookeeper.properties</span><br><span class="line"># 启动kafka broker</span><br><span class="line">sh bin/kafka-server-start.sh config/server.properties</span><br><span class="line"># 启动kafka消费者</span><br><span class="line">sh bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test</span><br></pre></td></tr></table></figure><p></p><p>然后运行上面的程序，观察消费者输出：</p><p><img src="img/QQ20200402-110459@2x.png" alt="QQ20200402-110459@2x"></p><h3 id="带回调函数"><a href="#带回调函数" class="headerlink" title="带回调函数"></a>带回调函数</h3><p><code>KafkaProducer</code>的<code>send</code>方法可以制定回调函数。回调函数会在 producer 收到 ack 时调用，为异步调用，该方法有两个参数，分别是RecordMetadata 和 Exception，如果 Exception 为 null，说明消息发送成功，如果Exception 不为 null，说明消息发送失败。</p><p>改造上面的send方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 3. 准备数据</span></span><br><span class="line">ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"test"</span>, <span class="string">"callback-test"</span>);</span><br><span class="line"><span class="comment">// 4. 发送数据（带回调）</span></span><br><span class="line">producer.send(record, (metadata, exception) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 回调函数，该方法会在 Producer 收到 ack 时调用，为异步调用</span></span><br><span class="line">        String result = String.format(<span class="string">"消息发送成功，主题Topic: %s,分区Partition: %s,偏移量Offset: %s"</span>,</span><br><span class="line">                metadata.topic(), metadata.partition(), metadata.offset());</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"消息发送失败"</span>);</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>运行该方法，控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">消息发送成功，主题Topic: test,分区Partition: 0,偏移量Offset: 4</span><br></pre></td></tr></table></figure><p></p><p>消费者：</p><p><img src="img/QQ20200402-111752@2x.png" alt="QQ20200402-111752@2x"></p><h3 id="同步发送"><a href="#同步发送" class="headerlink" title="同步发送"></a>同步发送</h3><p>如前面所说，Kafka 的 Producer 发送消息采用的是异步发送的方式，<code>KafkaProducer</code>的<code>send</code>方法返回<code>Future</code>对象，所以我们可以手动调用<code>Future</code>对象的<code>get</code>方法实现同步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 准备数据</span></span><br><span class="line">ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"test"</span>, <span class="string">"test-sync"</span>);</span><br><span class="line"><span class="comment">// 4. 发送数据（带回调）</span></span><br><span class="line">Future&lt;RecordMetadata&gt; future = producer.send(record, (metadata, exception) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 回调函数，该方法会在 Producer 收到 ack 时调用，为异步调用</span></span><br><span class="line">        String result = String.format(<span class="string">"消息发送成功，主题Topic: %s,分区Partition: %s,偏移量Offset: %s"</span>,</span><br><span class="line">                metadata.topic(), metadata.partition(), metadata.offset());</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"消息发送失败"</span>);</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">future.get();</span><br></pre></td></tr></table></figure><p></p><h3 id="自定义分区器"><a href="#自定义分区器" class="headerlink" title="自定义分区器"></a>自定义分区器</h3><p>自定义分区器只需要要实现<code>Partitioner</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>partition</code>方法中，我们可以根据主题topic，key值，序列化后的key值，value值，序列化后的value值，Kafka集群cluster信息，来个性化分区规则。</p><p>要使用自定义分区器，可通过配置类指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定自定义分区器</span></span><br><span class="line">properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, MyPartitioner.class);</span><br></pre></td></tr></table></figure><p></p><h2 id="消费者API"><a href="#消费者API" class="headerlink" title="消费者API"></a>消费者API</h2><p>Consumer 消费数据时的可靠性是很容易保证的，因为数据在 Kafka 中是持久化的，故不用担心数据丢失问题。</p><p>由于 consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故障前的位置的继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢复后继续消费。所以 offset 的维护是 Consumer 消费数据是必须考虑的问题。</p><h3 id="自动提交offset"><a href="#自动提交offset" class="headerlink" title="自动提交offset"></a>自动提交offset</h3><p>创建一个消费者，自动提交offset，演示消息消费：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 消费者配置</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        <span class="comment">// 自动提交offset</span></span><br><span class="line">        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 提交offset的时间，单位ms，即1秒钟提交一次</span></span><br><span class="line">        properties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="string">"1000"</span>);</span><br><span class="line">        <span class="comment">// 指定k-v反序列化规则</span></span><br><span class="line">        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        <span class="comment">// 指定消费者组</span></span><br><span class="line">        properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">"my-group"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建消费者</span></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">// 订阅主题</span></span><br><span class="line">        consumer.subscribe(Collections.singletonList(<span class="string">"test"</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 拉取数据，指定轮询时间为1秒</span></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; consumerRecords = consumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;</span><br><span class="line">                System.out.println(consumerRecord.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动消费者，然后再使用生产者发送<code>mrbird</code>消息到test主题，消费者控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConsumerRecord(topic = test, partition = 0, leaderEpoch = 0, offset = 6, CreateTime = 1585811850841, serialized key size = -1, serialized value size = 6, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = mrbird)</span><br></pre></td></tr></table></figure><p></p><h3 id="手动提交offset"><a href="#手动提交offset" class="headerlink" title="手动提交offset"></a>手动提交offset</h3><p>虽然自动提交 offset 十分便利，但由于其是基于时间提交的，开发人员难以把握 offset 提交的时机。因此 Kafka 还提供了手动提交 offset 的 API。</p><p>手动提交 offset 的方法有两种：分别是 <strong>commitSync</strong>（同步提交）和 <strong>commitAsync</strong>（异步提交）。两者的相同点是，都会将本次 poll 的一批数据最高的偏移量提交；不同点是，commitSync 阻塞当前线程，一直到提交成功，并且会自动失败重试（由不可控因素导致，也会出现提交失败）；而 commitAsync 则没有失败重试机制，故有可能提交失败。</p><p>由于同步提交 offset 有失败重试机制，故更加可靠，以下为同步提交 offset 的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 消费者配置</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        <span class="comment">// 关闭自动提交offset</span></span><br><span class="line">        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 指定k-v反序列化规则</span></span><br><span class="line">        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        <span class="comment">// 指定消费者组</span></span><br><span class="line">        properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">"my-group"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建消费者</span></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">// 订阅主题</span></span><br><span class="line">        consumer.subscribe(Collections.singletonList(<span class="string">"test"</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 拉取数据，指定轮询时间为1秒</span></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; consumerRecords = consumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;</span><br><span class="line">                System.out.println(consumerRecord.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 同步提交</span></span><br><span class="line">            consumer.commitSync();</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>commitSync()</code>也可以指定超时时间。</p><p>虽然同步提交 offset 更可靠一些，但是由于其会阻塞当前线程，直到提交成功。因此吞吐量会收到很大的影响。更多的情况下，会选用异步提交 offset 的方式。</p><p>以下为异步提交 offset 的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 消费者配置</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        <span class="comment">// 关闭自动提交offset</span></span><br><span class="line">        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 提交offset的时间，单位ms，即1秒钟提交一次</span></span><br><span class="line">        properties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="string">"1000"</span>);</span><br><span class="line">        <span class="comment">// 指定k-v反序列化规则</span></span><br><span class="line">        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        <span class="comment">// 指定消费者组</span></span><br><span class="line">        properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">"my-group"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建消费者</span></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">// 订阅主题</span></span><br><span class="line">        consumer.subscribe(Collections.singletonList(<span class="string">"test"</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 拉取数据，指定轮询时间为1秒</span></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; consumerRecords = consumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;</span><br><span class="line">                System.out.println(consumerRecord.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 异步提交</span></span><br><span class="line">            consumer.commitAsync();</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>commitAsync()</code>可以指定回调：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">consumer.commitAsync((offsets, exception) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"提交offset: "</span> + offsets + <span class="string">"成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"提交失败"</span>);</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><div class="note danger">无论是同步提交还是异步提交 offset，都有可能会造成数据的漏消费或者重复消费。先提交 offset 后消费，有可能造成数据的漏消费；而先消费后提交 offset，有可能会造成数据的重复消费。</div><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>Producer 拦截器(interceptor)是在 Kafka 0.10 版本被引入的，interceptor 使得用户在消息发送前以及 producer 回调逻辑前有机会对消息做一些定制化需求，比如修改消息等。同时，producer 允许用户指定多个 interceptor按顺序形成一个拦截器链(interceptor chain)。Intercetpor 的实现接口是 <code>org.apache.kafka.clients.producer.ProducerInterceptor</code>，其定义的方法包括：</p><p><img src="img/QQ20200402-154559@2x.png" alt="QQ20200402-154559@2x"></p><ul><li>configure(configs)：获取配置信息和初始化数据时调用；</li><li><p>onSend(ProducerRecord)：在消息被序列化以及计算分区前调用该方法。用户可以在该方法中对消息做任何操作，但最好不要修改消息所属的 topic 和分区，否则会影响目标分区的计算；</p></li><li><p>onAcknowledgement(RecordMetadata, Exception)：在返回ack时，或者发送失败时调用该方法。</p></li><li>close：关闭 interceptor，主要用于执行一些资源清理工作。</li></ul><p>下面举个自定义拦截器的例子：定义一个拦截器链，包含两个拦截器<code>MessageFormatInterceptor</code>和<code>CountInterceptor</code>，分别用于消息加工和统计消息发送成功和失败的笔数。</p><p>定义<code>MessageFormatInterceptor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageFormatInterceptor</span> <span class="keyword">implements</span> <span class="title">ProducerInterceptor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerRecord&lt;String, String&gt; <span class="title">onSend</span><span class="params">(ProducerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProducerRecord&lt;&gt;(record.topic(), record.partition(), record.timestamp(), record.key(),</span><br><span class="line">                System.currentTimeMillis() + <span class="string">" - "</span> + record.value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAcknowledgement</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>定义<code>CountInterceptor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountInterceptor</span> <span class="keyword">implements</span> <span class="title">ProducerInterceptor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errorCounter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> successCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerRecord&lt;String, String&gt; <span class="title">onSend</span><span class="params">(ProducerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> record;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAcknowledgement</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">            successCounter++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errorCounter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"成功笔数: "</span> + successCounter);</span><br><span class="line">        System.out.println(<span class="string">"失败笔数: "</span> + errorCounter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其实这两个功能完全可以由一个过滤器来完成，这里仅仅是为了演示过滤器链。</p><p>在生产者配置中指定这个过滤器链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 生产者配置</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 指定kafka地址</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        <span class="comment">// 指定ack等级</span></span><br><span class="line">        properties.put(ProducerConfig.ACKS_CONFIG, <span class="string">"all"</span>);</span><br><span class="line">        <span class="comment">// 指定重试次数，即生产者发送数据后没有收到ack应答时的重试次数</span></span><br><span class="line">        properties.put(ProducerConfig.RETRIES_CONFIG, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 指定批次大小 16k = 16 * 1024</span></span><br><span class="line">        properties.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="number">16384</span>);</span><br><span class="line">        <span class="comment">// 指定等待时间，单位毫秒</span></span><br><span class="line">        properties.put(ProducerConfig.LINGER_MS_CONFIG, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 指定RecordAccumulator缓冲区大小 32m = 32 * 1024 * 1024</span></span><br><span class="line">        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="number">33554432</span>);</span><br><span class="line">        <span class="comment">// 指定k-v序列化规则</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        <span class="comment">// 指定过滤器链</span></span><br><span class="line">        properties.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, Arrays.asList(<span class="string">"cc.mrbird.kafka.MessageFormatInterceptor"</span>, <span class="string">"cc.mrbird.kafka.CountInterceptor"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建生产者</span></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">// 3. 准备数据</span></span><br><span class="line">        ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"test"</span>, <span class="string">"kafka"</span>);</span><br><span class="line">        <span class="comment">// 4. 发送数据</span></span><br><span class="line">        producer.send(record);</span><br><span class="line">        <span class="comment">// 5. 关闭连接</span></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">成功笔数: 1</span><br><span class="line">失败笔数: 0</span><br></pre></td></tr></table></figure><p></p><p>消费者：</p><p><img src="img/QQ20200402-160619@2x.png" alt="QQ20200402-160619@2x"></p><blockquote><p>「尚硅谷大数据技术之 Kafka」 学习笔记</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本节演示如何通过Java代码创建Kafka生产者、消费者和拦截器，依赖使用&lt;a href=&quot;https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients/2.4.1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kafka-clients&lt;/a&gt;。因为我安装的Kafka版本为2.4.1，所以依赖的版本也用2.4.1，避免兼容问题。新增一个maven项目，引入：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="http://mrbird.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka消费者</title>
    <link href="http://mrbird.cc/Kafka%E6%B6%88%E8%B4%B9%E8%80%85.html"/>
    <id>http://mrbird.cc/Kafka消费者.html</id>
    <published>2020-03-28T14:07:33.000Z</published>
    <updated>2020-04-01T09:09:54.508Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>Kafka消费者采用pull拉模式从broker中消费数据。与之相对的push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由 broker 决定的。它的目标是尽可能以最快速度传递消息，但是这样很容易造成 consumer 来不及处理消息。而 pull 模式则可以根据 consumer 的消费能力以适当的速率消费消息。pull 模式不足之处是，如果 kafka 没有数据，消费者可能会陷入循环中，一直返回空数据。针对这一点，Kafka 的消费者在消费数据时会传入一个时长参数 timeout，如果当前没有数据可供消费，consumer 会等待一段时间之后再返回，这段时长即为 timeout。</p><a id="more"></a><h2 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h2><p>消费者组（consumer group）与消费者之间密切相关。在Kafka中，多个消费者可以共同构成一个消费者组，而一个消费者只能从厲于一个消费者组，消费者组最为重要的一个功能是实现广播与单播的功能。一个消费者组可以确保其所订阅的Topic的每个分区只能被从属于该消费者组中的唯一一个消费者所消费；如果不同的消费者组订阅了同一个Topic，那么这些消费者组之间是彼此独立的，不会受到相互的干扰。</p><div class="note info">因此，如果我们希望一条消思可以被多个消费者所消费，那么可以将这些消费者放到不同的消费者组中，这实际上就是广播的效果；如果希望一条消息只能被一个消费者所消费，那么可以将这些消费者放到同一个消费者组中，这实际上就是单播的效果。</div><h2 id="分区分配策略"><a href="#分区分配策略" class="headerlink" title="分区分配策略"></a>分区分配策略</h2><p>一个 consumer group 中有多个 consumer，一个 topic 有多个 partition，所以必然会涉及到 partition 的分配问题，即确定那个 partition 由哪个 consumer 来消费。</p><p>Kafka 有两种分配策略，一是 RoundRobin，一是 Range。</p><h3 id="RoundRobin"><a href="#RoundRobin" class="headerlink" title="RoundRobin"></a>RoundRobin</h3><p>RoundRobin即轮询的意思，比如现在有一个三个消费者ConsumerA、ConsumerB和ConsumerC组成的消费者组，同时消费TopicA主题消息，TopicA分为7个分区，如果采用RoundRobin分配策略，过程如下所示：</p><p><img src="img/QQ20200401-145222@2x.png" alt="QQ20200401-145222@2x"></p><p>这种轮询的方式应该很好理解。但如果消费者组消费多个主题的多个分区，会发生什么情况呢？比如现在有一个两个消费者ConsumerA和ConsumerB组成的消费者组，同时消费TopicA和TopicB主题消息，如果采用RoundRobin分配策略，过程如下所示：</p><p><img src="img/QQ20200401-150317@2x.png" alt="QQ20200401-150317@2x"></p><blockquote><p>注：TAP0表示TopicA Partition0分区数据，以此类推。</p></blockquote><p>这种情况下，采用RoundRobin算法分配，多个主题会被当做一个整体来看，这个整体包含了各自的Partition，比如在<a href="https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients/2.4.1" target="_blank" rel="noopener">Kafka-clients</a>依赖中，与之对应的对象为<code>TopicPartition</code>。接着将这些<code>TopicPartition</code>根据其哈希值进行排序，排序后采用轮询的方式分配给消费者。</p><p>但这会带来一个问题：假如上图中的消费者组中，ConsumerA只订阅了TopicA主题，ConsumerB只订阅了TopicB主题，采用RoundRobin轮询算法后，可能会出现ConsumerA消费了TopicB主题分区里的消息，ConsumerB消费了TopicA主题分区里的消息。</p><div class="note info">综上所述，RoundRobin算法只适用于消费者组中消费者订阅的主题相同的情况。同时会发现，采用RoundRobin算法，消费者组里的消费者之间消费的消息个数最多相差1个。</div><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p>Kafka默认采用Range分配策略，Range顾名思义就是按范围划分的意思。</p><p>比如现在有一个三个消费者ConsumerA、ConsumerB和ConsumerC组成的消费者组，同时消费TopicA主题消息，TopicA分为7个分区，如果采用Range分配策略，过程如下所示：</p><p><img src="img/QQ20200401-152904@2x.png" alt="QQ20200401-152904@2x"></p><p>假如现在有一个两个消费者ConsumerA和ConsumerB组成的消费者组，同时消费TopicA和TopicB主题消息，如果采用Range分配策略，过程如下所示：</p><p><img src="img/QQ20200401-153300@2x.png" alt="QQ20200401-153300@2x"></p><p>Range算法并不会把多个主题分区当成一个整体。</p><div class="note info">从上面的例子我们可以总结出Range算法的一个弊端：那就是同一个消费者组内的消费者消费的消息数量相差可能较大。</div><h2 id="offset维护"><a href="#offset维护" class="headerlink" title="offset维护"></a>offset维护</h2><p>offset由消息的主题Topic+分区Partition和消费者组名称唯一确定。</p><p>由于 consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故 障前的位置的继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢 复后继续消费。</p><p>Kafka 0.9 版本之前，consumer 默认将 offset 保存在 Zookeeper 中，从 0.9 版本开始， consumer 默认将 offset 保存在 Kafka 一个内置的 topic 中，该 topic 为__consumer_offsets。</p><blockquote><p>「尚硅谷大数据技术之 Kafka」 学习笔记</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Kafka消费者采用pull拉模式从broker中消费数据。与之相对的push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由 broker 决定的。它的目标是尽可能以最快速度传递消息，但是这样很容易造成 consumer 来不及处理消息。而 pull 模式则可以根据 consumer 的消费能力以适当的速率消费消息。pull 模式不足之处是，如果 kafka 没有数据，消费者可能会陷入循环中，一直返回空数据。针对这一点，Kafka 的消费者在消费数据时会传入一个时长参数 timeout，如果当前没有数据可供消费，consumer 会等待一段时间之后再返回，这段时长即为 timeout。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="http://mrbird.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka生产者</title>
    <link href="http://mrbird.cc/Kafka%E7%94%9F%E4%BA%A7%E8%80%85.html"/>
    <id>http://mrbird.cc/Kafka生产者.html</id>
    <published>2020-03-26T14:07:25.000Z</published>
    <updated>2020-04-01T11:40:08.244Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>Kafka生产者用于生产消息。通过前面的内容我们知道，Kafka的topic可以有多个分区，那么生产者如何将这些数据可靠地发送到这些分区？生产者发送数据的不同的分区的依据是什么？针对这两个疑问，这节简单记录下。</p><a id="more"></a><h2 id="为何要分区"><a href="#为何要分区" class="headerlink" title="为何要分区"></a>为何要分区</h2><ol><li><p>方便在集群中扩展，每个分区Partition可以通过调整以适应它所在的机器，而一个 topic又可以有多个Partition组成，因此整个集群就可以适应任意大小的数据了；</p></li><li><p>可以提高并发，因为Kafka可以以Partition为单位进行读写。</p></li></ol><h2 id="生产者发送数据到不同分区的依据"><a href="#生产者发送数据到不同分区的依据" class="headerlink" title="生产者发送数据到不同分区的依据"></a>生产者发送数据到不同分区的依据</h2><p>以<a href="https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients/2.4.1" target="_blank" rel="noopener">Kafka-clients</a>依赖为例，生产者生产的消息通过<code>ProducerRecord</code>对象表示，其重载了6个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span> <span class="params">(String topic, Integer partition, Long timestamp, K key, V value, Iterable&lt;Header&gt; headers)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span> <span class="params">(String topic, Integer partition, Long timestamp, K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span> <span class="params">(String topic, Integer partition, K key, V value, Iterable&lt;Header&gt; headers)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span> <span class="params">(String topic, Integer partition, K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span> <span class="params">(String topic, K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span> <span class="params">(String topic, V value)</span></span></span><br></pre></td></tr></table></figure><ol><li><p>指明 partition 的情况下，直接将指明的值直接作为 partiton 值；</p></li><li><p>没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值。所以，如果希望某组消息在Kafka集群全局有序，可以通过指定相同的消息key来实现；</p></li><li><p>既没有 partition 值又没有 key 值的情况下，第一次调用时随机生成一个整数（后 面每次调用在这个整数上自增），将这个值与 topic 可用的 partition 总数取余得到 partition 值，也就是常说的 round-robin 算法。</p></li></ol><h2 id="数据可靠性的保证"><a href="#数据可靠性的保证" class="headerlink" title="数据可靠性的保证"></a>数据可靠性的保证</h2><p>数据可靠性指的是： producer 发送的数据，能可靠的发送到指定的 topic。</p><h3 id="ack"><a href="#ack" class="headerlink" title="ack"></a>ack</h3><p>topic 的每个 partition 收到 producer 发送的数据后，都需要向 producer 发送 <strong><span style="color:red">ack</span></strong>（<strong>acknowledgement</strong> 确认收到），如果 producer 收到 ack，就会进行下一轮的发送，否则重新发送数据。</p><p>副本同步策略主要有如下两种：</p><table><tr><th>策略</th><th>优点</th><th>缺点</th></tr><tr><td>半数以上完成同步，就发送 ack</td><td>延迟低</td><td>选举新的 leader 时，容忍 n 台节点的故障，需要 2n+1 个副本</td></tr><tr><td>全部完成同步，才发送ack</td><td>选举新的 leader 时，容忍 n 台节点的故障，需要 n+1 个副本</td><td>延迟高</td></tr></table><p>Kafka 选择了第二种方案，原因如下：</p><ol><li>同样为了容忍 n 台节点的故障，第一种方案需要 2n+1 个副本，而第二种方案只需要 n+1 个副本，而 Kafka 的每个分区都有大量的数据，第一种方案会造成大量数据的冗余。</li><li>虽然第二种方案的网络延迟会比较高，但网络延迟对 Kafka 的影响较小。</li></ol><p>对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失， 所以没必要等所有 follower 全部接收成功，于是 Kafka 为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡， 选择以下的acks 参数配置：</p><ul><li><p>0：producer 不等待 broker 的 ack，这一操作提供了一个最低的延迟，broker 一接收到还 没有写入磁盘就已经返回，当 broker 故障时有可能<span style="color:red">丢失数据</span>；</p></li><li><p>1：producer 等待 broker 的 ack，partition 的 leader 落盘成功后返回 ack，如果在 follower 同步成功之前 leader 故障，那么将会<span style="color:red">丢失数据</span>；</p></li><li><p>-1（all）：producer 等待 broker 的 ack，partition 的 leader 和 follower 全部落盘成功后才 返回 ack。但是如果在 follower 同步完成后，broker 发送 ack 之前，leader 发生故障，那么会造成<span style="color:red">数据重复</span>。</p></li></ul><h3 id="ISR"><a href="#ISR" class="headerlink" title="ISR"></a>ISR</h3><p>由于Kafka副本同步策略选择的是表格中的第二种，即等待所有follower副本同步完成，才发送ack，那么就会带来如下问题，设想下：leader 收到数据，所有 follower 都开始同步数据， 但有一个 follower，因为某种故障，迟迟不能与 leader 进行同步，那 leader 就要一直等下去， 直到它完成同步，才能发送 ack。这个问题怎么解决呢？</p><p>Leader 维护了一个动态的 <strong>in-sync replica set</strong> (<span style="color:red">ISR</span>)，意为和 leader 保持同步的 follower 集 合。当 ISR 中的 follower 完成数据的同步之后，leader 就会给 follower 发送 ack。如果 follower 长时间未向 leader 同步数据 ， 则该 follower 将被踢出ISR ， 该时间阈值由<code>replica.lag.time.max.ms</code>参数设定。Leader 发生故障之后，就会从 ISR 中选举新的 leader。</p><h3 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h3><p>由于我们并不能保证Kafka集群中每时每刻follower的长度都和leader一致（即数据同步是有时延的），那么当leader挂掉选举某个follower为新的leader的时候（原先挂掉的leader恢复了成为了follower），可能会出现leader的数据比follower还少的情况。为了解决这种数据量不一致带来的混乱情况，Kafka提出了以下概念：</p><p><img src="img/QQ20200401-093957@2x.png" alt="QQ20200401-093957@2x"></p><ul><li>LEO（Log End Offset）：指的是每个副本最后一个offset；</li><li>HW（High Wather）：指的是消费者能见到的最大的 offset，ISR 队列中最小的 LEO。</li></ul><div class="note danger">消费者和leader通信时，只能消费HW之前的数据，HW之后的数据对消费者不可见。</div><p>针对这个规则：</p><ul><li><p><strong>当follower发生故障时</strong>：follower 发生故障后会被临时踢出 ISR，待该 follower 恢复后，follower 会读取本地磁盘记录的上次的 HW，并将 log 文件高于 HW 的部分截取掉，从 HW 开始向 leader 进行同步。等该 follower 的 LEO 大于等于该 Partition 的 HW，即 follower 追上 leader 之后，就可以重新加入 ISR 了。</p></li><li><p><strong>当leader发生故障时</strong>：leader 发生故障之后，会从 ISR 中选出一个新的 leader，之后，为保证多个副本之间的数据一致性，其余的 follower 会先将各自的 log 文件高于 HW 的部分截掉，然后从新的 leader 同步数据。</p></li></ul><div class="note danger">所以数据一致性并不能保证数据不丢失或者不重复，这是由ack控制的。HW规则只能保证副本之间的数据一致性！</div><h3 id="Exactly-Once"><a href="#Exactly-Once" class="headerlink" title="Exactly Once"></a>Exactly Once</h3><p>将服务器的 ACK 级别设置为-1，可以保证 Producer 到 Server 之间不会丢失数据，即 <strong>At Least Once</strong> 语义。相对的，将服务器 ACK 级别设置为 0，可以保证生产者每条消息只会被 发送一次，即 <strong>At Most Once</strong> 语义。</p><p>At Least Once 可以保证数据不丢失，但是不能保证数据不重复；相对的，At Least Once 可以保证数据不重复，但是不能保证数据不丢失。但是，对于一些非常重要的信息，比如说 交易数据，下游数据消费者要求数据既不重复也不丢失，即 <strong>Exactly Once</strong> 语义。在 0.11 版 本以前的 Kafka，对此是无能为力的，只能保证数据不丢失，再在下游消费者对数据做全局 去重。对于多个下游应用的情况，每个都需要单独做全局去重，这就对性能造成了很大影响。 0.11 版本的 Kafka，引入了一项重大特性：<strong>幂等性</strong>。所谓的幂等性就是指 Producer 不论 向 Server 发送多少次重复数据，Server 端都只会持久化一条。幂等性结合 At Least Once 语 义，就构成了 Kafka 的 Exactly Once 语义。即：</p><div style="text-align:center;font-weight:600;margin:1rem auto">At Least Once + 幂等性 = Exactly Once</div><p>要启用幂等性，只需要将 Producer 的参数中 <code>enable.idompotence</code> 设置为 true 即可。Kafka 的幂等性实现其实就是将原来下游需要做的去重放在了数据上游。开启幂等性的 Producer 在 初始化的时候会被分配一个 <strong>PID</strong>，发往同一 Partition 的消息会附带 Sequence Number。而 Broker 端会对&lt;PID, Partition, SeqNumber&gt;做缓存，当具有相同主键的消息提交时，Broker 只 会持久化一条。</p><div class="note danger">但是 Producer重启后，其 PID 就会变化，同时不同的 Partition 也具有不同主键，所以幂等性无法保证跨 分区跨会话的 Exactly Once。</div><h2 id="生产者事务"><a href="#生产者事务" class="headerlink" title="生产者事务"></a>生产者事务</h2><p>Kafka 从 0.11 版本开始引入了事务支持。事务可以保证 Kafka 在 Exactly Once 语义的基础上，生产和消费可以跨分区和会话，要么全部成功，要么全部失败。</p><p>为了实现跨分区跨会话的事务，需要引入一个全局唯一的 Transaction ID，并将 Producer获得的PID 和Transaction ID 绑定。这样当Producer 重启后就可以通过正在进行的 Transaction ID 获得原来的 PID。</p><p>为了管理 Transaction，Kafka 引入了一个新的组件 Transaction Coordinator。Producer 就是通过和 Transaction Coordinator 交互获得 Transaction ID 对应的任务状态。Transaction Coordinator 还负责将事务所有写入 Kafka 的一个内部 Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。</p><blockquote><p>「尚硅谷大数据技术之 Kafka」 学习笔记</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Kafka生产者用于生产消息。通过前面的内容我们知道，Kafka的topic可以有多个分区，那么生产者如何将这些数据可靠地发送到这些分区？生产者发送数据的不同的分区的依据是什么？针对这两个疑问，这节简单记录下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="http://mrbird.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka存储机制</title>
    <link href="http://mrbird.cc/Kafka%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6.html"/>
    <id>http://mrbird.cc/Kafka存储机制.html</id>
    <published>2020-03-25T14:07:16.000Z</published>
    <updated>2020-03-31T08:03:54.301Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>Kafka中消息是以topic进行分类的，生产者生产消息，消费者消费消息，都是面向topic。topic是逻辑上的概念，而partition是物理上的概念，每个partition对应于一个log文件，该log文件中存储的就是producer生产的数据。Producer生产的数据会被不断追加到该log文件末端，且每条数据都有自己的offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个offset，以便出错恢复时，从上次的位置继续消费。<a id="more"></a></p><h2 id="topic构成"><a href="#topic构成" class="headerlink" title="topic构成"></a>topic构成</h2><p>在Kafka中，一个topic可以分为多个partition，一个partition分为多个segment，每个segment对应两个文件：.index和.log文件：</p><p><img src="img/QQ20200330-183300@2x.png" alt="QQ20200330-183300@2x"></p><h2 id="消息存储原理"><a href="#消息存储原理" class="headerlink" title="消息存储原理"></a>消息存储原理</h2><p>由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采取了<strong>分片</strong>和<strong>索引</strong>机制，将每个partition分为多个segment。如前面所说，每个segment对应.index文件和.log文件。这些文件位于一个以特定规则命名的文件夹下，该文件夹的命名 规则为：topic 名称 + 分区序号。</p><p>例如，我们在上一节创建了一个名称为test的topic，该topic只有一个分区，所以在Kafka日会志目录下会有个名为test-0的文件夹：</p><p><img src="img/QQ20200330-183839@2x.png" alt="QQ20200330-183839@2x"></p><p>这些文件的含义如下：</p><table><thead><tr><th>类别</th><th>作用</th></tr></thead><tbody><tr><td>.index</td><td>偏移量索引文件，存储数据对应的偏移量</td></tr><tr><td>.timestamp</td><td>时间戳索引文件</td></tr><tr><td>.log</td><td>日志文件，存储生产者生产的数据</td></tr><tr><td>.snaphot</td><td>快照文件</td></tr><tr></tr><tr><td>Leader-epoch-checkpoint</td><td>保存了每一任leader开始写入消息时的offset，会定时更新。 follower被选为leader时会根据这个确定哪些消息可用</td></tr></tbody></table><p>index和log文件以当前segment的第一条消息的偏移量offset命名。偏移量offset是一个64位的长整形数，固定是20位数字，长度未达到，用0进行填补，索引文件和日志文件都由该作为文件名命名规则。所以从上图可以看出，我们的偏移量是从0开始的，.index和.log文件名称都为00000000000000000000。</p><p>上节中，我们通过生产者发送了hello和world两个数据，所以我们可以查看下.log文件下是否有这两条数据：</p><p><img src="img/QQ20200331-151427@2x.png" alt="QQ20200331-151427@2x"></p><p>内容存在一些”乱码“，因为数据是经过序列化压缩的。</p><p>那么数据文件.log大小有限制吗，能保存多久时间？这些我们都可以通过Kafka目录下conf/server.properties配置文件修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># log文件存储时间，单位为小时，这里设置为1周</span><br><span class="line">log.retention.hours=168</span><br><span class="line"></span><br><span class="line"># log文件大小的最大值，这里为1g，超过这个值，则会创建新的segment（也就是新的.index和.log文件）</span><br><span class="line">log.segment.bytes=1073741824</span><br></pre></td></tr></table></figure><p></p><p>比如，当生产者生产数据量较多，一个segment存储不下触发分片时，在日志topic目录下你会看到类似如下所示的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000.index</span><br><span class="line">00000000000000000000.log</span><br><span class="line">00000000000000170410.index</span><br><span class="line">00000000000000170410.log</span><br><span class="line">00000000000000239430.index</span><br><span class="line">00000000000000239430.log</span><br></pre></td></tr></table></figure><p></p><p>下图展示了Kafka查找数据的过程：</p><p><img src="img/QQ20200331-155820@2x.png" alt="QQ20200331-155820@2x"></p><p>比如现在要查找偏移量offset为3的消息，根据.index文件命名我们可以知道，offset为3的索引应该从0000000000000000000<span style="color:red">0</span>.index里查找。根据上图所示，其对应的索引地址为756~911，所以Kafka将读取0000000000000000000<span style="color:red">0</span>.log 756~911区间的数据。</p><blockquote><p>「尚硅谷大数据技术之 Kafka」 学习笔记</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Kafka中消息是以topic进行分类的，生产者生产消息，消费者消费消息，都是面向topic。topic是逻辑上的概念，而partition是物理上的概念，每个partition对应于一个log文件，该log文件中存储的就是producer生产的数据。Producer生产的数据会被不断追加到该log文件末端，且每条数据都有自己的offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个offset，以便出错恢复时，从上次的位置继续消费。
    
    </summary>
    
    
      <category term="Kafka" scheme="http://mrbird.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka入门</title>
    <link href="http://mrbird.cc/Kafka%E5%85%A5%E9%97%A8.html"/>
    <id>http://mrbird.cc/Kafka入门.html</id>
    <published>2020-03-24T12:07:52.000Z</published>
    <updated>2020-04-01T11:45:55.460Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p><a href="http://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>是一个分布式的基于发布/订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。</p><a id="more"></a><h2 id="消息队列模式"><a href="#消息队列模式" class="headerlink" title="消息队列模式"></a>消息队列模式</h2><ol><li>点对点模式（一对一，消费者主动拉取数据，消息收到后消息清除）。</li></ol><p>消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息。 消息被消费以后，queue 中不再有存储，所以消息消费者不可能消费到已经被消费的消息。 Queue 支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p><img src="img/QQ20200324-202328@2x.png" alt="QQ20200324-202328@2x"></p><ol start="2"><li>发布/订阅模式（一对多，消费者消费数据之后不会清除消息）。</li></ol><p>消息生产者（发布）将消息发布到 topic 中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到 topic 的消息会被所有订阅者消费。</p><p><img src="img/QQ20200324-203201@2x.png" alt="QQ20200324-203103@2x"></p><p>Kafka属于第2种模式。</p><h2 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h2><p><img src="img/QQ20200324-210522@2x.png" alt="QQ20200324-210522@2x"></p><ol><li>Producer ：消息生产者，就是向 kafka broker 发消息的客户端；</li><li>Consumer ：消息消费者，向 kafka broker 取消息的客户端；</li><li>Consumer Group （CG）：消费者组，由多个 consumer 组成。<span style="color:red">消费者组内每个消费者负责消费不同分区的数据，一个分区只能由消费者组中的一个消费者消费；消费者组之间互不影响。</span>所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者；</li><li>Broker ：一台 kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个 broker可以容纳多个topic；</li><li>Topic ：可以理解为一个队列，生产者和消费者面向的都是一个 topic；</li><li>Partition：为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列；</li><li>Replica：副本，为保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 kafka 仍然能够继续工作，kafka提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。</li><li>leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是 leader。</li><li>follower：每个分区多个副本中的“从”，实时从 leader 中同步数据，保持和 leader 数据的同步。leader 发生故障时，某个 follower 会成为新的follower。</li></ol><p>对于每一个topic， Kafka集群都会维持一个分区日志，如下所示：</p><p><img src="img/QQ20200331-150027@2x.png" alt="QQ20200331-150027@2x"></p><p>每个分区都是有序且顺序不可变的记录集，并且不断地追加到结构化的commit log文件。分区中的每一个记录都会分配一个id号来表示顺序，我们称之为offset，offset用来唯一的标识分区中每一条记录。</p><p>Kafka每个分区的数据是严格有序的，但多分区之间不能确保有序。</p><h2 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h2><p>演示在unix环境下安装与启动Kafka。Kafka下载地址：<a href="http://kafka.apache.org/downloads，选择二进制文件下载（Binary" target="_blank" rel="noopener">http://kafka.apache.org/downloads，选择二进制文件下载（Binary</a> downloads），然后解压即可。</p><p>Kafka的配置文件位于config目录下，因为Kafka集成了Zookeeper，所以config目录下除了有Kafka的配置文件server.properties外，还可以看到一个Zookeeper配置文件zookeeper.properties。</p><p>在启动Kafka和Zookeeper之前，我们先在Kafka解压目录下创建如下两个日志目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /Users/mrbird/software/kafka_2.4.1/logs/kafka-logs mkdir /Users/mrbird/software/kafka_2.4.1/logs/zk-logs</span><br></pre></td></tr></table></figure><p>分别用于存放Kafka和Zookeeper日志。</p><p>修改config/zookeeper.properties：</p><p><img src="img/QQ20200324-213631@2x.png" alt="QQ20200324-213631@2x"></p><p>修改config/server.properties</p><p><img src="img/QQ20200324-213803@2x.png" alt="QQ20200324-213803@2x"> <img src="img/QQ20200324-213840@2x.png" alt="QQ20200324-213840@2x"></p><p>server.properties更多可用配置及含义如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#broker 的全局唯一编号，不能重复</span></span><br><span class="line"><span class="string">broker.id=0</span></span><br><span class="line"><span class="comment">#删除 topic 功能使能</span></span><br><span class="line"><span class="string">delete.topic.enable=true</span></span><br><span class="line"><span class="comment">#处理网络请求的线程数量</span></span><br><span class="line"><span class="string">num.network.threads=3</span></span><br><span class="line"><span class="comment">#用来处理磁盘 IO 的现成数量</span></span><br><span class="line"><span class="string">num.io.threads=8</span></span><br><span class="line"><span class="comment">#发送套接字的缓冲区大小</span></span><br><span class="line"><span class="string">socket.send.buffer.bytes=102400</span></span><br><span class="line"><span class="comment">#接收套接字的缓冲区大小</span></span><br><span class="line"><span class="string">socket.receive.buffer.bytes=102400</span></span><br><span class="line"><span class="comment">#请求套接字的缓冲区大小</span></span><br><span class="line"><span class="string">socket.request.max.bytes=104857600</span></span><br><span class="line"><span class="comment">#topic 在当前 broker 上的分区个数</span></span><br><span class="line"><span class="string">num.partitions=1</span></span><br><span class="line"><span class="comment">#用来恢复和清理 data 下数据的线程数量</span></span><br><span class="line"><span class="string">num.recovery.threads.per.data.dir=1</span></span><br><span class="line"><span class="comment">#segment 文件保留的最长时间，超时将被删除</span></span><br><span class="line"><span class="string">log.retention.hours=168</span></span><br></pre></td></tr></table></figure><p></p><p>修改好后，我们便可以启动Kafka了。</p><p><strong>1.启动Zookeeper</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/zookeeper-server-start.sh config/zookeeper.properties</span><br></pre></td></tr></table></figure><p></p><p>如果要在后台启动Zookeeper，则可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br></pre></td></tr></table></figure><p></p><p><strong>2.启动Kafka</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure><p></p><p><strong>3.创建topic</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kafka-topics.sh --zookeeper localhost:2181 --create --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><ul><li>–create 创建</li><li>–topic 指定 topic 名</li><li>–replication-factor 定义副本数</li><li>–partitions 定义分区数</li></ul><p>上面创建了一个名称为test的topic，副本数和分区数都是1。</p><p><strong>4.启动生产者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><p>9092为生产者的默认端口号，指定topic为刚刚创建的test。</p><p><strong>5.启动消费者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class="built_in">test</span> --from-beginning</span><br></pre></td></tr></table></figure><p></p><p>–from-beginning：会把主题中以往所有的数据都读取出来。</p><p>启动好生产者和消费者后我们在生产者里生产几条数据:</p><p><img src="img/QQ20200324-220247@2x.png" alt="QQ20200324-220247@2x"></p><p>消费者成功接收到数据：</p><p><img src="img/QQ20200324-220314@2x.png" alt="QQ20200324-220314@2x"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看当前服务器中的所有 topic：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kafka-topics.sh --zookeeper localhsot:2181 --list</span><br></pre></td></tr></table></figure><p></p><p>删除 topic：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kafka-topics.sh --zookeeper localhost:2181 --delete --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><p>需要 server.properties 中设置<code>delete.topic.enable=true</code>否则只是标记删除。</p><p>查看某个 Topic 的详情：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><p>修改分区数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kafka-topics.sh --zookeeper localhost:2181 --alter --topic <span class="built_in">test</span> --partitions 2</span><br></pre></td></tr></table></figure><p></p><h2 id="ZK的作用"><a href="#ZK的作用" class="headerlink" title="ZK的作用"></a>ZK的作用</h2><p>Kafka 集群中有一个 broker 会被选举为 Controller，负责管理集群 broker 的上下线，所有 topic 的分区副本分配和 leader 选举等工作。Controller 的管理工作都是依赖于 Zookeeper 的。</p><blockquote><p>「尚硅谷大数据技术之 Kafka」 学习笔记</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;a href=&quot;http://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kafka&lt;/a&gt;是一个分布式的基于发布/订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="http://mrbird.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba Sentinel @SentinelResource</title>
    <link href="http://mrbird.cc/Spring-Cloud-Alibaba-Sentinel-SentinelResource.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Alibaba-Sentinel-SentinelResource.html</id>
    <published>2020-03-19T08:16:07.000Z</published>
    <updated>2020-03-20T08:50:13.262Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>Sentinel提供了<a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81" target="_blank" rel="noopener">@SentinelResource</a>注解用于定义资源，并提供可选的异常回退和Block回退。异常回退指的是<code>@SentinelResource</code>注解标注的方法发生Java异常时的回退处理；Block回退指的是当<code>@SentinelResource</code>资源访问不符合Sentinel控制台定义的规则时的回退（默认返回Blocked by Sentinel (flow limiting)）。这节简单记录下该注解的用法。</p><a id="more"></a><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>使用IDEA创建一个maven项目，artifactId为spring-cloud-alibaba-sentinelresource，然后在其下面创建两个Module（Spring Boot项目），artifactId分别为consumer和provider，充当服务消费端和服务提供端，项目结构如下图所示：</p><p><img src="img/QQ20200320-145134.png" alt="QQ20200320-145134"></p><p>spring-cloud-alibaba-sentinelresource的pom内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinelresource<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com-alibaba-cloud.version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">com-alibaba-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com-alibaba-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>引入了spring-boot-starter-web和spring-cloud-alibaba-nacos-discovery Nacos服务注册发现依赖。</p><p>provider的pom的内容如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinelresource<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>服务提供者<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>consumer的pom内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinelresource<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>服务消费者<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>因为要演示在消费端使用<code>@SentinelResource</code>注解，所以我们引入了spring-cloud-starter-alibaba-sentinel依赖。</p><p>provider的配置文件application.yml内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">provider</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      server-addr:</span> <span class="attr">localhost:8848</span></span><br></pre></td></tr></table></figure><p></p><p>配置了端口号，服务名和nacos地址。</p><p>consumer的配置文件application.yml内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9091</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">consumer</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      server-addr:</span> <span class="attr">localhost:8848</span></span><br><span class="line"><span class="attr">    sentinel:</span></span><br><span class="line"><span class="attr">      transport:</span></span><br><span class="line"><span class="attr">        dashboard:</span> <span class="attr">localhost:8080</span></span><br><span class="line"><span class="attr">        port:</span> <span class="number">8719</span></span><br></pre></td></tr></table></figure><p></p><p>配置了端口号，服务名，nacos地址和sentinel控制台地址等。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>我们在provider下添加一个REST资源。在provider的cc.mrbird.provider目录下新建controller包，然后在该包下新建<code>GoodsController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"goods"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"buy/&#123;name&#125;/&#123;count&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy</span><span class="params">(@PathVariable String name, @PathVariable Integer count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"购买%d份%s"</span>, count, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着在consumer端通过Ribbon消费这个资源。在consumer的启动类<code>ConsumerApplication</code>里注册<code>RestTemplate</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在consumer的cc.mrbird.consumer下新建controller包，然后在该包下新建<code>BuyController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"buy/&#123;name&#125;/&#123;count&#125;"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"buy"</span>, fallback = <span class="string">"buyFallback"</span>, blockHandler = <span class="string">"buyBlock"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy</span><span class="params">(@PathVariable String name, @PathVariable Integer count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"购买数量过多"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"miband"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"已售罄"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        params.put(<span class="string">"name"</span>, name);</span><br><span class="line">        params.put(<span class="string">"count"</span>, count);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForEntity(<span class="string">"http://provider/goods/buy/&#123;name&#125;/&#123;count&#125;"</span>, String.class, params).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常回退</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyFallback</span><span class="params">(@PathVariable String name, @PathVariable Integer count, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"【进入fallback方法】购买%d份%s失败，%s"</span>, count, name, throwable.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sentinel回退</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyBlock</span><span class="params">(@PathVariable String name, @PathVariable Integer count, BlockException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"【进入blockHandler方法】购买%d份%s失败，当前购买人数过多，请稍后再试"</span>, count, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在<code>buy</code>方法中，我们通过Ribbon的<code>RestTemplate</code>访问provider的<code>/goods/buy</code>接口。当count参数大于20或者name参数的值为miband的时候，方法将抛出异常。<code>buy</code>方法上使用<code>@SentinelResource</code>注解标注，标识为一个sentinel资源，资源名称为buy，并且配置了fallback方法和blockHandler方法。</p><p>如前面所说，当<code>buy</code>方法本身抛出异常时，会进入fallback指定的回退方法中；当<code>buy</code>方法调用不符合sentinel控制台规定的规则（如流控规则，降级规则等）时，会进入blockHander指定的block方法中。为了确保成功地进入回退方法（成功反射），它们必须满足以下规则：</p><ul><li>函数访问范围需要是<code>public</code>；</li><li>Fallback函数，函数签名与原函数一致或末尾加一个<code>Throwable</code>类型的参数；</li><li>Block异常处理函数，参数最后多一个<code>BlockException</code>，其余与原函数一致。</li></ul><p>启动provider、consumer、nacos和sentinel控制台，浏览器访问：<a href="http://localhost:9091/buy/ipad/2" target="_blank" rel="noopener">http://localhost:9091/buy/ipad/2</a>：</p><p><img src="img/QQ20200320-151518.png" alt="QQ20200320-151518"></p><p>我们在sentinel控制台中添加如下流控规则：</p><p><img src="img/QQ20200320-151651@2x.png" alt="QQ20200320-151651@2x.png"></p><p>QPS阈值为2。</p><p>然后快速访问<a href="http://localhost:9091/buy/ipad/2" target="_blank" rel="noopener">http://localhost:9091/buy/ipad/2</a>：</p><p><img src="img/QQ20200320-152106@2x.png" alt="QQ20200320-152106@2x"></p><p>可以看到，当方法访问不符合sentinel控制台规则时，进入的是blockHandler指定的回退方法。</p><p>如果访问：<a href="http://localhost:9091/buy/ipad/21" target="_blank" rel="noopener">http://localhost:9091/buy/ipad/21</a></p><p><img src="img/QQ20200320-152155@2x.png" alt="QQ20200320-152155@2x"> 或者：<a href="http://localhost:9091/buy/miband/2" target="_blank" rel="noopener">http://localhost:9091/buy/miband/2</a></p><p><img src="img/QQ20200320-152224@2x.png" alt="QQ20200320-152224@2x"></p><p>方法自身抛出异常引发回退，进入的是fallback指定的回退方法。</p><h2 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h2><p>在当前类中编写回退方法会使得代码变得冗余耦合度高，我们可以将回退方法抽取出来到一个指定类中。</p><p>在cc.mrbird.consumer包下新建reveal包，然后在该包下新建<code>BuyBlockHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyBlockHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sentinel回退</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buyBlock</span><span class="params">(@PathVariable String name, @PathVariable Integer count, BlockException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"【进入blockHandler方法】购买%d份%s失败，当前购买人数过多，请稍后再试"</span>, count, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以看到我们只是将<code>buyBlock</code>方法挪到了<code>BuyBlockHandler</code>中，不过这里的方法必须是<code>static</code>的。</p><p>接着新建<code>BuyFallBack</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyFallBack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常回退</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buyFallback</span><span class="params">(@PathVariable String name, @PathVariable Integer count, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"【进入fallback方法】购买%d份%s失败，%s"</span>, count, name, throwable.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样<code>BuyController</code>的代码就可以精简为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"buy/&#123;name&#125;/&#123;count&#125;"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"buy"</span>,</span><br><span class="line">            fallback = <span class="string">"buyFallback"</span>,</span><br><span class="line">            fallbackClass = BuyFallBack.class,</span><br><span class="line">            blockHandler = <span class="string">"buyBlock"</span>,</span><br><span class="line">            blockHandlerClass = BuyBlockHandler.class</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy</span><span class="params">(@PathVariable String name, @PathVariable Integer count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"购买数量过多"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"miband"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"已售罄"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        params.put(<span class="string">"name"</span>, name);</span><br><span class="line">        params.put(<span class="string">"count"</span>, count);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForEntity(<span class="string">"http://provider/goods/buy/&#123;name&#125;/&#123;count&#125;"</span>, String.class, params).getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>fallbackClass</code>和<code>blockHandlerClass</code>指定回退方法所在的类。</p><p>此外我们也可以当遇到某个类型的异常时，不进行回退。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"buy/&#123;name&#125;/&#123;count&#125;"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"buy"</span>,</span><br><span class="line">            fallback = <span class="string">"buyFallback"</span>,</span><br><span class="line">            fallbackClass = BuyFallBack.class,</span><br><span class="line">            blockHandler = <span class="string">"buyBlock"</span>,</span><br><span class="line">            blockHandlerClass = BuyBlockHandler.class,</span><br><span class="line">            exceptionsToIgnore = NullPointerException.class</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy</span><span class="params">(@PathVariable String name, @PathVariable Integer count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"购买数量过多"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"miband"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"已售罄"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        params.put(<span class="string">"name"</span>, name);</span><br><span class="line">        params.put(<span class="string">"count"</span>, count);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForEntity(<span class="string">"http://provider/goods/buy/&#123;name&#125;/&#123;count&#125;"</span>, String.class, params).getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>exceptionsToIgnore</code>指定，当遇到空指针异常时，不回退。</p><p>重启consumer，浏览器访问：<a href="http://localhost:9091/buy/miband/2" target="_blank" rel="noopener">http://localhost:9091/buy/miband/2</a>：</p><p><img src="img/QQ20200320-153530@2x.png" alt="QQ20200320-153530@2x"></p><p>可以看到，此次并没有进行回退，而是直接返回error page。</p><blockquote><p>本节源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/78.spring-cloud-alibaba-sentinelresource" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/78.spring-cloud-alibaba-sentinelresource</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Sentinel提供了&lt;a href=&quot;https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@SentinelResource&lt;/a&gt;注解用于定义资源，并提供可选的异常回退和Block回退。异常回退指的是&lt;code&gt;@SentinelResource&lt;/code&gt;注解标注的方法发生Java异常时的回退处理；Block回退指的是当&lt;code&gt;@SentinelResource&lt;/code&gt;资源访问不符合Sentinel控制台定义的规则时的回退（默认返回Blocked by Sentinel (flow limiting)）。这节简单记录下该注解的用法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Spring Cloud Alibaba" scheme="http://mrbird.cc/tags/Spring-Cloud-Alibaba/"/>
    
      <category term="Sentinel" scheme="http://mrbird.cc/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba Sentinel控制台详解</title>
    <link href="http://mrbird.cc/Sentinel%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://mrbird.cc/Sentinel控制台详解.html</id>
    <published>2020-03-18T08:15:38.000Z</published>
    <updated>2020-03-20T08:49:57.585Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">Sentinel</a>提供一个轻量级的开源控制台，它提供机器发现以及健康情况管理、监控（单机和集群），规则管理和推送的功能。本节将详细记录何如通过Sentinel控制台控制Sentinel客户端的各种行为。Sentinel控制台的功能主要包括：流量控制、降级控制、热点配置、系统规则和授权规则等。</p><a id="more"></a><h2 id="安装控制台"><a href="#安装控制台" class="headerlink" title="安装控制台"></a>安装控制台</h2><p>Sentinel控制台下载地址：<a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a>，本节我们下载sentinel-dashboard-1.7.1.jar版本，下载好后使用<code>java -jar sentinel-dashboard-1.7.1.jar</code>命令启动即可，默认的端口号为8080：</p><p><img src="img/QQ20200319-092904@2x.png" alt="QQ20200319-092904@2x"></p><p>账号密码都是sentinel。</p><p>更多可用的启动参数配置：</p><ul><li><code>Dsentinel.dashboard.auth.username=sentinel</code>用于指定控制台的登录用户名为 sentinel；</li><li><code>Dsentinel.dashboard.auth.password=123456</code>用于指定控制台的登录密码为 123456，如果省略这两个参数，默认用户和密码均为 sentinel；</li><li><p><code>Dserver.servlet.session.timeout=7200</code>用于指定 Spring Boot 服务端 session 的过期时间，如 7200 表示 7200 秒；60m 表示 60 分钟，默认为 30 分钟；</p></li><li><p><code>-Dcsp.sentinel.dashboard.server=consoleIp:port</code>指定控制台地址和端口。</p></li></ul><h2 id="搭建客户端"><a href="#搭建客户端" class="headerlink" title="搭建客户端"></a>搭建客户端</h2><p>新建一个Spring Boot项目，artifactId为spring-cloud-alibaba-sentinel-dashboard-guide，项目结构如下所示：</p><p><img src="img/QQ20200319-094028@2x.png" alt="QQ20200319-094028@2x"></p><p>项目pom内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-dashboard-guide<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-alibaba-sentinel-dashboard-guide<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com-alibaba-cloud.version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">com-alibaba-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com-alibaba-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>引入了spring-cloud-starter-alibaba-sentinel和spring-boot-starter-web依赖。</p><p>接着在cc.mrbird.sentinel目录下新建controller包，然后在该包下新建<code>TestController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后在项目配置文件application.yml中添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">my-project</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    sentinel:</span></span><br><span class="line"><span class="attr">      transport:</span></span><br><span class="line"><span class="attr">        dashboard:</span> <span class="attr">localhost:8080</span></span><br><span class="line"><span class="attr">        port:</span> <span class="number">8719</span></span><br></pre></td></tr></table></figure><p></p><ul><li><p><code>spring.cloud.sentinel.transport.dashboard</code>，指定了sentinel控制台的ip和端口地址；</p></li><li><p><code>spring.cloud.sentinel.transport.port</code>，sentinel客户端和控制台通信的端口，默认为8719，如果这个端口已经被占用，那么sentinel会自动从8719开始依次+1扫描，直到找到未被占用的端口。</p></li></ul><p>启动项目，使用浏览器多次访问：<a href="http://localhost:8081/test1" target="_blank" rel="noopener">http://localhost:8081/test1</a>，然后登录sentinel控制台：</p><p><img src="img/QQ20200319-100041@2x.png" alt="QQ20200319-100041@2x"></p><p>在簇点链路中可以看到刚刚那笔请求，我们可以对它进行流控、降级、授权、热点等配置（控制台是懒加载的，如果没有任何请求，那么控制台也不会有任何内容）。</p><h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><p>在簇点链路列表中，点击<code>/test1</code>后面的流控按钮：</p><p><img src="img/QQ20200319-100633@2x.png" alt="QQ20200319-100633@2x"></p><ul><li>资源名：标识资源的唯一名称，默认为请求路径，也可以在客户端中使用<code>SentinelResource</code>配置；</li><li>针对来源：Sentinel可以针对服务调用者进行限流，填写微服务名称即<code>spring.application.name</code>，默认为default，不区分来源；</li><li><p>阈值类型、单机阈值：</p><ul><li>QPS（Queries-per-second，每秒钟的请求数量）：当调用该api的QPS达到阈值的时候，进行限流；</li><li>线程数：当调用该api的线程数达到阈值的时候，进行限流。</li></ul></li><li><p>是否集群：默认不集群；</p></li><li><p>流控模式：</p><ul><li>直接：当api调用达到限流条件的时，直接限流；</li><li>关联：当关联的资源请求达到阈值的时候，限流自己；</li><li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，则进行限流）。</li></ul></li><li><p>流控效果：</p><ul><li>快速失败：直接失败；</li><li>Warm Up：根据codeFactor（冷加载因子，默认值为3）的值，从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值；</li><li>排队等待：匀速排队，让请求匀速通过，阈值类型必须设置为QPS，否则无效。</li></ul></li></ul><h3 id="QPS直接失败"><a href="#QPS直接失败" class="headerlink" title="QPS直接失败"></a>QPS直接失败</h3><p>演示下QPS直接失败设置及效果。点击簇点链路列表中<code>/test1</code>请求后面的流控按钮：</p><p><img src="img/QQ20200319-103726@2x.png" alt="QQ20200319-103726@2x"></p><p>上面设置的效果是，1秒钟内请求/test1资源的次数达到2次以上的时候，进行限流。</p><p>点击新增按钮后，列表会跳转到”流控规则”菜单下，所以我们也可以在这里设置流控规则，不过一般还是习惯直接在簇点链路列表中直接选中资源添加流控规则。新增后，我们访问<a href="http://localhost:8081/test1" target="_blank" rel="noopener">http://localhost:8081/test1</a>，看看效果：</p><p><img src="img/2020-03-19 10.47.02.gif" alt="2020-03-19 10.47.02.gif"></p><p>当手速快点的时候（1秒超过2次），页面返回Blocked by Sentinel (flow limiting)。</p><h3 id="线程数直接失败"><a href="#线程数直接失败" class="headerlink" title="线程数直接失败"></a>线程数直接失败</h3><p>改造下<code>TestController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>让方法休眠1秒，更容易出现效果。重启项目，然后在sentinel控制台中添加如下流控规则：</p><p><img src="img/QQ20200319-105234@2x.png" alt="QQ20200319-105234@2x"></p><p>多次访问<a href="http://localhost:8081/test1" target="_blank" rel="noopener">http://localhost:8081/test1</a>，效果：</p><p><img src="img/2020-03-19 10.57.46.gif" alt="2020-03-19 10.57.46.gif"></p><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>改造<code>TestController</code>，添加一个新的api接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，浏览器中访问下这两个请求，然后在sentinel控制台簇点链路列表中，点击test1后的流控按钮：</p><p><img src="img/QQ20200319-110332@2x.png" alt="QQ20200319-110332@2x"></p><p>上述流控规则表示：当1秒内访问/test2的次数大于2的时候，限流/test1。</p><p>我们使用postman来密集访问/test2，然后我们手动浏览器请求/test1，看看效果。postman设置如下规则：</p><p><img src="img/QQ20200319-111530@2x.png" alt="QQ20200319-111530@2x"></p><p>然后点击Run按钮，我们回到浏览器，访问：<a href="http://localhost:8081/test1" target="_blank" rel="noopener">http://localhost:8081/test1</a>：</p><p><img src="img/2020-03-19 11.17.11.gif" alt="2020-03-19 11.17.11.gif"></p><p>可以看到/test1已经被限流了。</p><h3 id="链路"><a href="#链路" class="headerlink" title="链路"></a>链路</h3><p>在演示链路限流之前，我们先改造改造sentinel客户端代码。在项目的cc.mrbird.sentinel目录下新建service包，然后在该包下新建<code>HelloService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SentinelResource</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>@SentinelResource(&quot;hello&quot;)</code>将该方法标识为一个sentinel资源，名称为hello。</p><p>接着在<code>TestController</code>中使用该资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test1 "</span> + helloService.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test2 "</span> + helloService.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，在浏览器中多次访问这两个api，然后查看sentinel控制台簇点链路：</p><p><img src="img/c.png" alt="QQ20200319-151619@2x"></p><p>然后点击hello资源后面的流控按钮：</p><p><img src="img/QQ20200319-151704@2x.png" alt="QQ20200319-151704@2x"></p><p>上述配置的意思是，当通过/test1访问hello的时候，QPS大于1则进行限流；言外之意就是/test2访问hello请求并不受影响。</p><p>但是实际测试并没有生效😡，具体可以参考issue：<a href="https://github.com/alibaba/Sentinel/issues/1213" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/issues/1213</a>。</p><h3 id="预热Warm-Up"><a href="#预热Warm-Up" class="headerlink" title="预热Warm Up"></a>预热Warm Up</h3><p>流控效果除了直接失败外，我们也可以选择预热Warm Up。</p><div class="note info">Warm Up（RuleConstant.CONTROL_BEHAVIOR_WARM_UP）方式，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。</div><p>sentinel客户端的默认冷加载因子coldFactor为3，即请求QPS从 threshold / 3 开始，经预热时长逐渐升至设定的QPS阈值。</p><p>比如：</p><p><img src="img/QQ20200319-152842@2x.png" alt="QQ20200319-152842@2x"></p><p>上面的配置意思是：对于/test1资源，一开始的QPS阈值为3（10/3），经过10秒后，QPS阈值达到10，过程类似于下图：</p><p><img src="img/QQ20200319-153013@2x.png" alt="QQ20200319-153013@2x"></p><p>效果我就不演示了，大概效果就是使用浏览器访问<a href="http://localhost:8081/test1" target="_blank" rel="noopener">http://localhost:8081/test1</a>，以最快的手速点刷新，一开始会常看到Blocked by Sentinel (flow limiting)的提示，10秒后几乎不再出现（因为你的手速很难达到1秒10下）。</p><h3 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h3><p>排队等待方式不会拒绝请求，而是严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过。</p><p>修改<code>TestController</code>的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"test1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，浏览器访问<a href="localhost:8081/test1" target="_blank" rel="noopener">localhost:8081/test1</a>，然后点击sentinel控制台簇点链路列表的/test1流控按钮：</p><p><img src="img/QQ20200319-161608@2x.png" alt="QQ20200319-161608@2x"></p><p>上述配置的含义是，访问/test1请求每秒钟最多只能1次，超过的请求排队等待，等待超过1000毫秒则超时。新增该规则后，多次快速访问<a href="localhost:8081/test1" target="_blank" rel="noopener">localhost:8081/test1</a>，sentinel客户端控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-03-18 16:17:23.247  INFO 44688 --- [nio-8081-exec-2] c.m.sentinel.controller.TestController   : test1</span><br><span class="line">2020-03-18 16:17:24.250  INFO 44688 --- [nio-8081-exec-6] c.m.sentinel.controller.TestController   : test1</span><br><span class="line">2020-03-18 16:17:25.251  INFO 44688 --- [nio-8081-exec-5] c.m.sentinel.controller.TestController   : test1</span><br><span class="line">2020-03-18 16:17:26.251  INFO 44688 --- [nio-8081-exec-7] c.m.sentinel.controller.TestController   : test1</span><br><span class="line">2020-03-18 16:17:27.251  INFO 44688 --- [nio-8081-exec-8] c.m.sentinel.controller.TestController   : test1</span><br></pre></td></tr></table></figure><p></p><p>每笔请求时间间隔1秒。</p><h2 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h2><p>降级配置页面：</p><p><img src="img/QQ20200319-164303@2x.png" alt="QQ20200319-164303@2x"></p><p>降级策略分为3种：</p><ul><li>RT，平均响应时间 (DEGRADE_GRADE_RT)：当 1s 内持续进入 5 个请求，对应时刻的平均响应时间（秒级）均超过阈值（count，以 ms 为单位），那么在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地熔断（抛出 DegradeException）。注意 Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项 <code>-Dcsp.sentinel.statistic.max.rt=xxx</code> 来配置。</li><li>异常比例 (DEGRADE_GRADE_EXCEPTION_RATIO)：当资源的每秒请求量 &gt;= 5，并且每秒异常总数占通过量的比值超过阈值（DegradeRule 中的 count）之后，资源进入降级状态，即在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</li><li>异常数 (DEGRADE_GRADE_EXCEPTION_COUNT)：当资源近 1 分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若 timeWindow 小于 60s，则结束熔断状态后仍可能再进入熔断状态。</li></ul><h3 id="RT"><a href="#RT" class="headerlink" title="RT"></a>RT</h3><p>修改<code>TestController</code>的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    	<span class="comment">// 休眠1秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，浏览器访问<a href="localhost:8081/test1" target="_blank" rel="noopener">localhost:8081/test1</a>，然后点击sentinel控制台簇点链路列表的/test1降级按钮：</p><p><img src="img/QQ20200319-171421@2x.png" alt="QQ20200319-171421@2x"></p><p>上面配置的含义是：如果/test1的QPS大于5，并且平均响应时间（以秒级统计）大于500（RT）毫秒，那么在未来的1秒钟（时间窗口）内，sentinel断路器打开，该api接口不可用。</p><p>我们使用JMeter模拟并发访问情形：</p><p><img src="img/QQ20200319-171907@2x.png" alt="QQ20200319-171907@2x"></p><p><img src="img/QQ20200319-171941@2x.png" alt="QQ20200319-171941@2x"></p><p>上面的QPS为10，而且我们的/test1接口响应时间在1秒左右，根据我们上面配置的降级规则，肯定会触发降级，使用JMeter测试结果如下：</p><p><img src="img/QQ20200319-172138@2x.png" alt="QQ20200319-172138@2x"></p><p>可以看到，程序很快就触发了降级，断路器打开，后续的请求都返回了Blocked by Sentinel (flow limiting)。停掉JMeter，浏览器访问<a href="localhost:8081/test1" target="_blank" rel="noopener">localhost:8081/test1</a></p><p><img src="img/QQ20200319-172646@2x.png" alt="QQ20200319-172646@2x"></p><p>降级规则不再符合，所以断路器合上，请求正常响应。</p><h3 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a>异常比例</h3><p>修改<code>TestController</code>的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 每次请求都抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"服务异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，浏览器访问<a href="localhost:8081/test1" target="_blank" rel="noopener">localhost:8081/test1</a>，然后点击sentinel控制台簇点链路列表的/test1降级按钮：</p><p><img src="img/QQ20200319-173124@2x.png" alt="QQ20200319-173124@2x"></p><p>上面的配置含义是：如果/test1的QPS大于5，并且每秒钟的请求异常比例大于0.5的话，那么在未来的1秒钟（时间窗口）内，sentinel断路器打开，该api接口不可用。</p><p>也就是说，如果一秒内有10个请求进来，超过5个以上都出错，那么会触发熔断，1秒钟内这个接口不可用。</p><p>还是使用上面的JMeter测试，开启JMeter后，使用浏览器访问：<a href="http://localhost:8081/test1" target="_blank" rel="noopener">http://localhost:8081/test1</a></p><p><img src="img/QQ20200319-173524@2x.png" alt="QQ20200319-173524@2x"></p><p>关掉JMeter后，再次访问<a href="http://localhost:8081/test1" target="_blank" rel="noopener">http://localhost:8081/test1</a>：</p><p><img src="img/QQ20200319-173631@2x.png" alt="QQ20200319-173631@2x"></p><h3 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a>异常数</h3><p>奖及策略为异常数时表示：当指定时间窗口内，请求异常数大于等于某个值时，触发降级。比如有如下规则：</p><p><img src="img/QQ20200319-182819@2x.png" alt="QQ20200319-182819@2x"></p><p>上面的规则表示：在70秒内，访问/test1请求异常的次数大于等于5，则触发降级。测试一波：</p><p><img src="img/2020-03-19 18.28.50.gif" alt="2020-03-19 18.28.50.gif"></p><p>可以看到，当第5次访问的时候成功触发了降级。</p><h2 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h2><p>热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的数据，并对其访问进行限制。</p><p>比如在<code>TestController</code>中有如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"buy"</span>)</span><br><span class="line"><span class="meta">@SentinelResource</span>(value = <span class="string">"buy"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy</span><span class="params">(String goodName, Integer count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"买"</span> + count + <span class="string">"份"</span> + goodName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>对这个资源添加热点规则：</p><p><img src="img/QQ20200319-185115@2x.png" alt="QQ20200319-185115@2x"></p><p>上面的配置含义是：对buy资源添加热点规则，当第0个参数的值为miband的时候QPS阈值为10，否则为1。此外，如果第0个参数不传，那么这笔请求不受该热点规则限制。效果如下：</p><p><img src="img/2020-03-19 18.58.12.gif" alt="2020-03-19 18.58.12.gif"></p><h2 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h2><p>系统规则则是针对整个系统设置限流规则，并不针对某个资源，设置页面如下：</p><p><img src="img/QQ20200319-190751@2x.png" alt="QQ20200319-190751@2x"></p><p>阈值类型包含以下五种：</p><ul><li>Load 自适应（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps <em>minRt 估算得出。设定参考值一般是 CPU cores </em>2.5。</li><li>CPU usage（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li>平均 RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li>并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li>入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul><p>比较直观就不演示了。</p><h2 id="授权规则"><a href="#授权规则" class="headerlink" title="授权规则"></a>授权规则</h2><p>授权规则用于配置资源的黑白名单：</p><p><img src="img/QQ20200319-191154@2x.png" alt="QQ20200319-191154@2x"></p><p>上述配置表示：只有appA和appB才能访问hello资源。</p><div class="note danger">sentinel控制台规则会在客户端重启后丢失，可以配合nacos等进行配置持久化，具体可以参考云大佬的博客：<a href="https://www.sonake.com/2019/12/16/Sentinel-Nacos%E5%AE%9E%E7%8E%B0%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96/" target="_blank" rel="noopener">https://www.sonake.com/2019/12/16/Sentinel-Nacos%E5%AE%9E%E7%8E%B0%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96/</a>。</div><blockquote><p>参考链接 <a href="https://github.com/alibaba/Sentinel/wiki" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki</a></p></blockquote><blockquote><p>本节源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/77.spring-cloud-alibaba-sentinel-dashboard-guide" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/77.spring-cloud-alibaba-sentinel-dashboard-guide</a>。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/Sentinel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sentinel&lt;/a&gt;提供一个轻量级的开源控制台，它提供机器发现以及健康情况管理、监控（单机和集群），规则管理和推送的功能。本节将详细记录何如通过Sentinel控制台控制Sentinel客户端的各种行为。Sentinel控制台的功能主要包括：流量控制、降级控制、热点配置、系统规则和授权规则等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Spring Cloud Alibaba" scheme="http://mrbird.cc/tags/Spring-Cloud-Alibaba/"/>
    
      <category term="Sentinel" scheme="http://mrbird.cc/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba Nacos配置中心</title>
    <link href="http://mrbird.cc/Spring-Cloud-Alibaba-Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Alibaba-Nacos配置中心.html</id>
    <published>2020-03-13T07:53:34.000Z</published>
    <updated>2020-03-19T01:19:50.166Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>上一节<a href="Spring-Cloud-Alibaba-Nacos注册中心.html">Spring Cloud Alibaba Nacos注册中心</a>记录了Nacos作为注册中心的使用方式，这节继续记录下Nacos作为配置中心的使用方式。本节使用的Spring Cloud版本为Hoxton.SR3，Spring Cloud Alibaba版本为2.2.0.RELEASE，Spring Boot版本为2.2.3.RELEASE。</p><a id="more"></a><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>新建一个Spring Boot项目，artifactId为spring-cloud-alibaba-nacos-config，项目结构如下图所示：</p><p><img src="img/QQ20200313-161613@2x.png" alt="QQ20200313-161613@2x"></p><p>项目的pom内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-alibaba-nacos-config<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com-alibaba-cloud.version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">com-alibaba-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com-alibaba-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>因为这节记录的是Nacos作为配置中心的功能，所以引入的是<code>spring-cloud-alibaba-nacos-config</code>依赖。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>在项目配置文件application.yml中添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">my-project</span></span><br></pre></td></tr></table></figure><p></p><p>上面配置指定应用端口为8080，应用名称为my-project。</p><p>接着在resources目录下新建配置文件bootstrap.yml，在里面添加如下Nacos config配置（必须在bootstrap.yml中配置，bootstrap.yml优先级比application.yml高）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="attr">localhost:8848</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure><p></p><ul><li><p><code>spring.cloud.nacos.config.server-addr</code>配置了Nacos配置中心的地址，也可以通过<code>spring.cloud.nacos.server-addr</code>指定，它们两个是等价的；</p></li><li><p><code>spring.cloud.nacos.config.file-extension</code>指定待会在Nacos配置中心读取的配置的格式为yaml格式。</p></li></ul><p>我们回到Nacos控制台<a href="http://localhost:8848/nacos" target="_blank" rel="noopener">http://localhost:8848/nacos</a>，在配置列表中新建一个配置：</p><p><img src="img/QQ20200316-091128@2x.png" alt="QQ20200316-091128@2x"></p><p><img src="img/QQ20200316-091434@2x.png" alt="QQ20200316-091434@2x"></p><p>我们新建了一个my-project.yaml配置（dataId为my-project.yaml，group为DEFAULT_GROUP，它们的具体含义下面会介绍到），配置了<code>message: &#39;hello nacos config&#39;</code>，创建好后，点击发布即可。</p><p>接着回到我们的项目，在cc.mrbird.nacos目录下新建controller包，然后在该包下新建<code>TestController</code>用于测试配置获取规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;message:null&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"message"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码我们从刚刚在Nacos控制台配置的配置文件中获取<code>message</code>配置的值，<code>@RefreshScope</code>用于刷新配置，即我们在Nacos控制台修改了相关配置点击发布后，我们的应用能够在不重启的情况下获取到最新的配置。</p><p>启动项目，在浏览器中访问：<a href="http://localhost:8080/message" target="_blank" rel="noopener">http://localhost:8080/message</a>：</p><p><img src="img/QQ20200316-092401@2x.png" alt="QQ20200316-092401@2x"></p><p>配置获取成功，在Nacos控制台中将<code>message</code>值修改为<code>hello world</code>后发布，再次访问<a href="http://localhost:8080/message" target="_blank" rel="noopener">http://localhost:8080/message</a>：</p><p><img src="img/QQ20200316-092754@2x.png" alt="QQ20200316-092754@2x"></p><h2 id="获取配置规则"><a href="#获取配置规则" class="headerlink" title="获取配置规则"></a>获取配置规则</h2><p>Nacos配置中心通过namespace、dataId和group来唯一确定一条配置。</p><ol><li>namespace，即命名空间。默认的命名空间为public，我们可以在Nacos控制台中新建命名空间；</li><li><p>dataId，即配置文件名称，dataId的拼接格式如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$&#123;prefix&#125;</span> <span class="bullet">-</span> <span class="string">$&#123;spring.profiles.active&#125;</span> <span class="string">.</span> <span class="string">$&#123;file-extension&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>prefix</code>默认为<code>pring.application.name</code>的值，也可以通过配置项<code>spring.cloud.nacos.config.prefix</code>来配置；</p></li><li><p><code>spring.profiles.active</code>即为当前环境对应的<code>profile</code>。<strong>注意，当<code>spring.profiles.active</code>为空时，对应的连接符<code>-</code>也将不存在，dataId的拼接格式变成<code>${prefix}.${file-extension}</code></strong>；</p></li><li><p><code>file-extension</code>为配置内容的数据格式，可以通过配置项<code>spring.cloud.nacos.config.file-extension</code>来配置。</p></li></ul></li><li><p>group，即配置分组，默认为DEFAULT_GROUP，可以通过<code>spring.cloud.nacos.config.group</code>配置。</p></li></ol><p>所以根据这些规则，上面示例中我们的应用名称<code>spring.application.name</code>为my-project，<code>spring.cloud.nacos.config.file-extension</code>的值为yaml，没有指定<code>spring.profiles.active</code>，于是dataId为my-project.yaml，分组为默认的DEFAULT_GROUP，命名空间为默认的public。这就是我们在Nacos控制台中新建配置时的根据。</p><h2 id="配置划分实战"><a href="#配置划分实战" class="headerlink" title="配置划分实战"></a>配置划分实战</h2><p>Nacos配置中心的namespace、dataId和group可以方便灵活地划分配置。比如，我们现在有一个项目需要开发，项目名称为febs，项目开发人员分为两个组：GROUP_A和GROUP_B，项目分为三个环境：开发环境dev、测试环境test和生产环境prod。</p><p>假如现在GROUP_A组的组长需要在Nacos中新建一个开发环境的febs项目配置，那么他可以这样做：</p><ol><li>在Nacos控制台中新建一个名称为febs的命名空间：</li></ol><p><img src="img/QQ20200316-094921@2x.png" alt="QQ20200316-094921@2x"></p><p><img src="img/QQ20200316-094952@2x.png" alt="QQ20200316-094952@2x"></p><p><img src="img/QQ20200316-095015@2x.png" alt="QQ20200316-095015@2x"></p><p>新建febs命名空间后，会生成一个唯一标识该命名空间的命名空间id<code>2ef2186e-078c-4904-8643-ff5e90555456</code>。</p><ol start="2"><li>在Nacos控制台中新建一个配置：</li></ol><p><img src="img/QQ20200316-100032@2x.png" alt="QQ20200316-100032@2x"></p><p><img src="img/QQ20200316-095417@2x.png" alt="QQ20200316-095417@2x"></p><ol start="3"><li>最后在febs项目的bootstrap.yml配置文件中添加如下配置即可：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="attr">localhost:8848</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yaml</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">febs</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="string">'2ef2186e-078c-4904-8643-ff5e90555456'</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">GROUP_A</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="img/QQ20200316-100224@2x.png" alt="QQ20200316-100224@2x"></p><h2 id="配置回滚"><a href="#配置回滚" class="headerlink" title="配置回滚"></a>配置回滚</h2><p>Nacos中，修改配置点击发布后会创建一个对应的历史版本快照，我们可以在Nacos控制台的历史版本列表中找到这些快照：</p><p><img src="img/QQ20200316-100425@2x.png" alt="QQ20200316-100425@2x"></p><p>点击回滚按钮即可将配置恢复到指定的版本。</p><h2 id="获取多个配置"><a href="#获取多个配置" class="headerlink" title="获取多个配置"></a>获取多个配置</h2><p>除了通过上面的方式指定一个唯一配置外，我们还可以同时获取多个配置文件的内容，比如，将项目的bootstrap.yml内容修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="attr">localhost:8848</span></span><br><span class="line"><span class="attr">        extension-configs:</span></span><br><span class="line"><span class="attr">          - dataId:</span> <span class="string">ext-config-one.yaml</span></span><br><span class="line"><span class="attr">            group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="attr">            refresh:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          - dataId:</span> <span class="string">ext-config-two.yaml</span></span><br><span class="line"><span class="attr">            group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="attr">            refresh:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p></p><ul><li><p><code>spring.cloud.nacos.config.extension-configs[n].dataId</code>，指定多个配置的dataId，必须包含文件格式，支持properties、yaml或yml；</p></li><li><p><code>spring.cloud.nacos.config.extension-configs[n].group</code>，指定分组；</p></li><li><p><code>spring.cloud.nacos.config.extension-configs[n].refresh</code>，是否支持刷新。</p></li></ul><p>上面的配置中，我们分别从DEFAULT_GROUP中获取了<code>ext-config-one.yaml</code>和<code>ext-config-two.yaml</code>配置内容，并且<code>ext-config-one.yaml</code>支持刷新，<code>ext-config-two.yaml</code>不支持刷新。</p><div class="note danger">没有namespace的配置，言外之意就是Nacos目前还不支持多个配置指定不同的命名空间。</div><p>我们在Nacos控制台中新建这两个配置：</p><p><img src="img/QQ20200316-105741@2x.png" alt="QQ20200316-105741@2x"></p><p><code>ext-config-one.yaml</code>配置内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ext1:</span> <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><p></p><p><code>ext-config-two.yaml</code>配置内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ext2:</span> <span class="string">'world'</span></span><br></pre></td></tr></table></figure><p></p><p>在项目的<code>TestController</code>中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;ext1:null&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String ext1;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;ext2:null&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String ext2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"multi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">multiConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"ext1: %s ext2: %s"</span>, ext1, ext2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动项目，浏览器访问：<a href="http://localhost:8080/multi" target="_blank" rel="noopener">http://localhost:8080/multi</a>：</p><p><img src="img/QQ20200316-112930@2x.png" alt="QQ20200316-112930@2x"></p><p>将<code>ext1</code>的值修改为<code>nice</code>，<code>ext2</code>的值修改为<code>job</code>：</p><p><img src="img/QQ20200316-113120@2x.png" alt="QQ20200316-113120@2x"></p><p>可以看到<code>ext1</code>的值更新了，<code>ext2</code>没有更新。</p><h2 id="多配置共享"><a href="#多配置共享" class="headerlink" title="多配置共享"></a>多配置共享</h2><p>多配置共享其实和获取多个文件配置作用差不多，下面演示下多配置共享。</p><p>将bootstrap.yml配置修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="attr">localhost:8848</span></span><br><span class="line"><span class="attr">        shared-configs:</span> <span class="string">ext-config-one.yaml,ext-config-two.yaml</span></span><br></pre></td></tr></table></figure><p></p><p><code>spring.cloud.nacos.config.shared-configs</code>指定了共享<code>ext-config-one.yaml</code>和<code>ext-config-two.yaml</code>的配置。</p><p>重启项目，访问<a href="http://localhost:8080/multi" target="_blank" rel="noopener">http://localhost:8080/multi</a>：</p><p><img src="img/QQ20200316-134742@2x.png" alt="QQ20200316-134742@2x"></p><p>也可以正常获取。</p><p>可以看到，无论是多配置共享还是获取多个配置，要完成的事情是一样的，不过它们都有各自的局限性。多配置共享无法指定分组、无法指定命名空间、无法配置是否刷新；获取多个配置相对较为灵活，不过也不能配置命名空间。具体相关的讨论可以参考：<a href="https://github.com/alibaba/spring-cloud-alibaba/issues/141" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/issues/141</a></p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><table><thead><tr><th>配置项</th><th>key</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>服务端地址</td><td>spring.cloud.nacos.config.server-addr</td><td></td><td></td></tr><tr><td>DataId前缀</td><td>spring.cloud.nacos.config.prefix</td><td></td><td>spring.application.name</td></tr><tr><td>Group</td><td>spring.cloud.nacos.config.group</td><td>DEFAULT_GROUP</td><td></td></tr><tr><td>dataID后缀及内容文件格式</td><td>spring.cloud.nacos.config.file-extension</td><td>properties</td><td>dataId的后缀，同时也是配置内容的文件格式，目前只支持 properties</td></tr><tr><td>配置内容的编码方式</td><td>spring.cloud.nacos.config.encode</td><td>UTF-8</td><td>配置的编码</td></tr><tr><td>获取配置的超时时间</td><td>spring.cloud.nacos.config.timeout</td><td>3000</td><td>单位为 ms</td></tr><tr><td>配置的命名空间</td><td>spring.cloud.nacos.config.namespace</td><td></td><td>常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源隔离等。</td></tr><tr><td>AccessKey</td><td>spring.cloud.nacos.config.access-key</td><td></td><td></td></tr><tr><td>SecretKey</td><td>spring.cloud.nacos.config.secret-key</td><td></td><td></td></tr><tr><td>相对路径</td><td>spring.cloud.nacos.config.context-path</td><td></td><td>服务端 API 的相对路径</td></tr><tr><td>接入点</td><td>spring.cloud.nacos.config.endpoint</td><td></td><td>地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址</td></tr><tr><td>是否开启监听和自动刷新</td><td>spring.cloud.nacos.config.refresh.enabled</td><td>true</td><td></td></tr></tbody></table><p>参考链接：</p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md</a></p><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_config" target="_blank" rel="noopener">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_config</a></p><blockquote><p>本节源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/75.spring-cloud-alibaba-nacos-config" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/75.spring-cloud-alibaba-nacos-config</a>。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;上一节&lt;a href=&quot;Spring-Cloud-Alibaba-Nacos注册中心.html&quot;&gt;Spring Cloud Alibaba Nacos注册中心&lt;/a&gt;记录了Nacos作为注册中心的使用方式，这节继续记录下Nacos作为配置中心的使用方式。本节使用的Spring Cloud版本为Hoxton.SR3，Spring Cloud Alibaba版本为2.2.0.RELEASE，Spring Boot版本为2.2.3.RELEASE。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Spring Cloud Alibaba" scheme="http://mrbird.cc/tags/Spring-Cloud-Alibaba/"/>
    
      <category term="Nacos" scheme="http://mrbird.cc/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba Nacos注册中心</title>
    <link href="http://mrbird.cc/Spring-Cloud-Alibaba-Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Alibaba-Nacos注册中心.html</id>
    <published>2020-03-13T07:53:20.000Z</published>
    <updated>2020-03-19T01:20:00.196Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p><a href="https://nacos.io/zh-cn/index.html" target="_blank" rel="noopener">Nacos</a>是一款集服务注册发现、服务配置和管理于一身的开源软件，这节主要记录Nacos的服务注册发现功能的使用。借助Spring Cloud Alibaba Nacos Discovery，我们可以轻松地使用Spring Cloud编程模型体验Nacos的服务注册发现功能。本节使用的Spring Cloud版本为Hoxton.SR3，Spring Cloud Alibaba版本为2.2.0.RELEASE，Spring Boot版本为2.2.3.RELEASE。</p><a id="more"></a><h2 id="Nacos安装"><a href="#Nacos安装" class="headerlink" title="Nacos安装"></a>Nacos安装</h2><p>因为Spring Cloud Alibaba 2.2.0.RELEASE内置的Nacos client版本为1.1.4，所以我们使用这个版本的Nacos。Nacos下载地址：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a>，选择nacos-server-1.1.4.zip 下载并解压：</p><p><img src="img/QQ20200313-095737@2x.png" alt="QQ20200313-095737@2x"></p><p>解压后，打开conf目录下的配置文件，在末尾添加数据源配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line">db.num=<span class="number">1</span></span><br><span class="line">db.url<span class="number">.0</span>=jdbc:mysql:<span class="comment">//localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line">db.user=root</span><br><span class="line">db.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p></p><p>然后在MySQL数据库中新建nacos数据库，并导入Nacos解压包conf目录下的nacos-mysql.sql脚本，导入后，库表如下图所示：</p><p><img src="img/QQ20200313-100402@2x.png" alt="QQ20200313-100402@2x"></p><p>数据层准备好后，我们就可以启动Nacos了。笔者的电脑为Mac，所以这里以Unix环境为例。终端切换到Nacos解压目录下的bin目录，然后执行<code>sh startup.sh -m standalone</code>启动单机版Nacos。</p><p>为了方便，我们也可以创建一个run.sh脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">sh shutdown.sh</span><br><span class="line">sh startup.sh -m standalone</span><br><span class="line">tail -10f /Users/mrbird/Desktop/nacos/logs/start.out</span><br></pre></td></tr></table></figure><p></p><p>其中<code>/Users/mrbird/Desktop/nacos</code>为我的Nacos解压目录。启动后，浏览器访问：<a href="http://localhost:8848/nacos/#/login" target="_blank" rel="noopener">http://localhost:8848/nacos/#/login</a>：</p><p><img src="img/QQ20200313-101410@2x.png" alt="QQ20200313-101410@2x"></p><p>说明Nacos启动成功，账号密码都为nacos。</p><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>使用IDEA创建一个maven项目，artifactId为spring-cloud-alibaba-nacos-register，然后在其下面创建两个Module（Spring Boot项目），artifactId分别为consumer和provider，充当服务消费端和服务提供端，项目结构如下图所示：</p><p><img src="img/QQ20200313-103900@2x.png" alt="QQ20200313-103900@2x"></p><p>spring-cloud-alibaba-nacos-register的pom内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-register<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com-alibaba-cloud.version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">com-alibaba-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com-alibaba-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>因为本节演示的是Nacos的服务注册发现功能，所以引入的是<code>spring-cloud-alibaba-nacos-discovery</code>依赖。</p><p>provider的pom的内容如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-register<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>服务提供端<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>consumer的pom内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-register<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>服务消费端<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="Nacos作为注册中心"><a href="#Nacos作为注册中心" class="headerlink" title="Nacos作为注册中心"></a>Nacos作为注册中心</h2><p>在provider的cc.mrbird.provider目录下新建controller包，然后在该包下新建<code>HelloController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"provide"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;message&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"hello %s"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>提供了一个REST接口，供consumer调用。</p><p>然后在provider的项目配置文件application.yml里添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">provider</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      server-addr:</span> <span class="attr">localhost:8848</span></span><br></pre></td></tr></table></figure><p></p><ul><li><code>server.port</code>，provider服务端口为8001；</li><li><code>spring.application.name</code>，服务名称为provider</li><li><code>spring.cloud.nacos.server-addr</code>，指定Nacos注册中心的地址。</li></ul><p>provider代码准备好后，接着在consumer项目的cc.mrbird.consumer目录下新建controller包，然后在该包下新建<code>ConsumeController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consume"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello/&#123;message&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable String message)</span> </span>&#123;</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancerClient.choose(<span class="string">"provider"</span>);</span><br><span class="line">        String path = String.format(<span class="string">"http://%s:%s/provide/%s"</span>, serviceInstance.getHost(), serviceInstance.getPort(), message);</span><br><span class="line">        String result = restTemplate.getForObject(path, String.class);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s from %s %s"</span>, result, serviceInstance.getHost(), serviceInstance.getPort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>spring-cloud-alibaba-nacos-discovery</code>内置了Ribbon，所以我们可以直接注入<code>LoadBalancerClient</code>，<code>RestTemplate</code>我们稍后再配置。<code>hello()</code>方法中我们通过服务提供者的名称provider（即provider项目配置的<code>spring.application.name</code>）从Nacos注册中心中获取对应的服务实例，然后访问其提供的<code>/provide/{message} GET</code>服务。这些在<a href="Spring-Cloud-Ribbon-LoadBalance.html">Spring Cloud Ribbon客户端负载均衡</a>一节中都介绍过了，有不懂的可以参阅下。</p><p>接着在consumer项目的cc.mrbird.consumer目录下新建configure包，然后在该包下新建<code>ConsumerConfigure</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码配置了<code>RestTemplate</code> Bean。</p><p>最后在consumer项目的配置文件application.yml中添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">consumer</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      server-addr:</span> <span class="attr">localhost:8848</span></span><br></pre></td></tr></table></figure><p></p><p>配置和provider项目类似，不再赘述。</p><p>分别启动provider和consumer项目：</p><p><img src="img/QQ20200313-122632@2x.png" alt="QQ20200313-122632@2x"></p><p>观察Nacos控制台服务列表：</p><p><img src="img/QQ20200313-122748@2x.png" alt="QQ20200313-122748@2x"></p><p>可以看到，两个服务都注册进来了。接着浏览器访问：<a href="http://localhost:9001/consume/hello/nacos" target="_blank" rel="noopener">http://localhost:9001/consume/hello/nacos</a>：</p><p><img src="img/QQ20200313-122916@2x.png" alt="QQ20200313-122916@2x"></p><p>调用成功，说明服务发现成功。</p><h2 id="测试负载均衡"><a href="#测试负载均衡" class="headerlink" title="测试负载均衡"></a>测试负载均衡</h2><p>如下图所示，在ProviderApplication上右键选择Copy Configuration…：</p><p><img src="img/QQ20200313-123539@2x.png" alt="QQ20200313-123539@2x"></p><p>然后按照下图所示填写相关内容：</p><p><img src="img/QQ20200313-123806@2x.png" alt="QQ20200313-123806@2x"></p><p>点击ok保存后，启动它：</p><p><img src="img/QQ20200313-123912@2x.png" alt="QQ20200313-123912@2x"></p><p>观察Nacos控制台，可以看到provider已经有两个实例了：</p><p><img src="img/QQ20200313-124004@2x.png" alt="QQ20200313-124004@2x"></p><p>然后多次访问：<a href="http://localhost:9001/consume/hello/nacos" target="_blank" rel="noopener">http://localhost:9001/consume/hello/nacos</a>，可以看到请求是均衡的（默认为轮询算法）：</p><p><img src="img/2020-03-13 12.54.05.gif" alt="2020-03-13 12.54.05.gif"></p><h2 id="Nacos注册中心配置"><a href="#Nacos注册中心配置" class="headerlink" title="Nacos注册中心配置"></a>Nacos注册中心配置</h2><p>更多可用Nacos Descovery配置：</p><table><thead><tr><th>配置项</th><th>Key</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>服务端地址</td><td>spring.cloud.nacos.discovery.server-addr</td><td>无</td><td>Nacos Server 启动监听的ip地址和端口</td></tr><tr><td>服务名</td><td>spring.cloud.nacos.discovery.service</td><td>${spring.application.name}</td><td>给当前的服务命名</td></tr><tr><td>服务分组</td><td>spring.cloud.nacos.discovery.group</td><td>DEFAULT_GROUP</td><td>设置服务所处的分组</td></tr><tr><td>权重</td><td>spring.cloud.nacos.discovery.weight</td><td>1</td><td>取值范围 1 到 100，数值越大，权重越大</td></tr><tr><td>网卡名</td><td>spring.cloud.nacos.discovery.network-interface</td><td>无</td><td>当IP未配置时，注册的IP为此网卡所对应的IP地址，如果此项也未配置，则默认取第一块网卡的地址</td></tr><tr><td>注册的IP地址</td><td>spring.cloud.nacos.discovery.ip</td><td>无</td><td>优先级最高</td></tr><tr><td>注册的端口</td><td>spring.cloud.nacos.discovery.port</td><td>-1</td><td>默认情况下不用配置，会自动探测</td></tr><tr><td>命名空间</td><td>spring.cloud.nacos.discovery.namespace</td><td>无</td><td>常用场景之一是不同环境的注册的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</td></tr><tr><td>AccessKey</td><td>spring.cloud.nacos.discovery.access-key</td><td>无</td><td>当要上阿里云时，阿里云上面的一个云账号名</td></tr><tr><td>SecretKey</td><td>spring.cloud.nacos.discovery.secret-key</td><td>无</td><td>当要上阿里云时，阿里云上面的一个云账号密码</td></tr><tr><td>Metadata</td><td>spring.cloud.nacos.discovery.metadata</td><td>无</td><td>使用Map格式配置，用户可以根据自己的需要自定义一些和服务相关的元数据信息</td></tr><tr><td>日志文件名</td><td>spring.cloud.nacos.discovery.log-name</td><td>无</td><td></td></tr><tr><td>集群</td><td>spring.cloud.nacos.discovery.cluster-name</td><td>DEFAULT</td><td>配置成Nacos集群名称</td></tr><tr><td>接入点</td><td>spring.cloud.nacos.discovery.enpoint</td><td>UTF-8</td><td>地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址</td></tr><tr><td>是否集成Ribbon</td><td>ribbon.nacos.enabled</td><td>true</td><td>一般都设置成true即可</td></tr><tr><td>是否开启Nacos Watch</td><td>spring.cloud.nacos.discovery.watch.enabled</td><td>true</td><td>可以设置成false来关闭 watch</td></tr></tbody></table><blockquote><p>本节源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/74.spring-cloud-alibaba-nacos-register" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/74.spring-cloud-alibaba-nacos-register</a>。</p></blockquote><blockquote><p>参考自官方文档：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery" target="_blank" rel="noopener">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;a href=&quot;https://nacos.io/zh-cn/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nacos&lt;/a&gt;是一款集服务注册发现、服务配置和管理于一身的开源软件，这节主要记录Nacos的服务注册发现功能的使用。借助Spring Cloud Alibaba Nacos Discovery，我们可以轻松地使用Spring Cloud编程模型体验Nacos的服务注册发现功能。本节使用的Spring Cloud版本为Hoxton.SR3，Spring Cloud Alibaba版本为2.2.0.RELEASE，Spring Boot版本为2.2.3.RELEASE。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Spring Cloud Alibaba" scheme="http://mrbird.cc/tags/Spring-Cloud-Alibaba/"/>
    
      <category term="Nacos" scheme="http://mrbird.cc/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch异常处理</title>
    <link href="http://mrbird.cc/Spring-Batch%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html"/>
    <id>http://mrbird.cc/Spring-Batch异常处理.html</id>
    <published>2020-03-12T03:55:03.000Z</published>
    <updated>2020-03-12T03:35:05.139Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>Spring Batch处理任务过程中如果发生了异常，默认机制是马上停止任务执行，抛出相应异常，如果任务还包含未执行的步骤也不会被执行。要改变这个默认规则，我们可以配置异常重试和异常跳过机制。<strong>异常跳过</strong>：遇到异常的时候不希望结束任务，而是跳过这个异常，继续执行；<strong>异常重试</strong>：遇到异常的时候经过指定次数的重试，如果还是失败的话，才会停止任务。除了这两个特性外，本文也会记录一些别的特性。</p><a id="more"></a><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>新建一个Spring Boot项目，版本为2.2.4.RELEASE，artifactId为spring-batch-exception，项目结构如下图所示：</p><p><img src="img/QQ20200311-170619@2x.png" alt="QQ20200311-170619@2x"></p><p>剩下的数据库层的准备，项目配置，依赖引入和<a href="/Spring-Batch入门.html">Spring Batch入门</a>文章中的框架搭建步骤一致，这里就不再赘述。</p><p>下面我们演示下，默认情况下Spring Batch处理任务遇到异常是怎么处理的。</p><p>在cc.mrbird.batch目录下新建job包，然后在该包下新建<code>DefaultExceptionJobDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultExceptionJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">defaultExceptionJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"defaultExceptionJob"</span>)</span><br><span class="line">                .start(</span><br><span class="line">                    stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                        .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                            <span class="comment">// 获取执行上下文</span></span><br><span class="line">                            ExecutionContext executionContext = chunkContext.getStepContext().getStepExecution().getExecutionContext();</span><br><span class="line">                            <span class="keyword">if</span> (executionContext.containsKey(<span class="string">"success"</span>)) &#123;</span><br><span class="line">                                System.out.println(<span class="string">"任务执行成功"</span>);</span><br><span class="line">                                <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                String errorMessage = <span class="string">"处理任务过程发生异常"</span>;</span><br><span class="line">                                System.out.println(errorMessage);</span><br><span class="line">                                executionContext.put(<span class="string">"success"</span>, <span class="keyword">true</span>);</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(errorMessage);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;).build()</span><br><span class="line">                ).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们在Step的<code>tasklet()</code>方法中获取了执行上下文，并且判断执行上下文中是否包含key<code>success</code>，如果包含，则任务执行成功；如果不包含，则抛出异常（抛出异常前，在执行上下文中添加<code>success</code>key）。</p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-03-11 17:12:50.253  INFO 38673 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=defaultExceptionJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-11 17:12:50.323  INFO 38673 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">处理任务过程发生异常</span><br><span class="line">2020-03-11 17:12:50.352 ERROR 38673 --- [           main] o.s.batch.core.step.AbstractStep         : Encountered an error executing step step in job defaultExceptionJob</span><br><span class="line"></span><br><span class="line">java.lang.RuntimeException: 处理任务过程发生异常</span><br><span class="line">	at cc.mrbird.batch.job.DefaultExceptionJobDemo.lambda$defaultExceptionJob$0(DefaultExceptionJobDemo.java:38) ~[classes/:na]</span><br><span class="line">	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>可以看到，默认情况下，Spring Batch处理任务过程中如果发生了异常会马上停止任务的执行。</p><p>再次启动项目，控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-03-11 17:14:03.184  INFO 38691 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=defaultExceptionJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-11 17:14:03.264  INFO 38691 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">任务执行成功</span><br><span class="line">2020-03-11 17:14:03.302  INFO 38691 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 37ms</span><br><span class="line">2020-03-11 17:14:03.326  INFO 38691 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=defaultExceptionJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 120ms</span><br></pre></td></tr></table></figure><p></p><p>因为在上次任务抛出异常前，我们在执行上下文中添加<code>success</code>key（配合MySQL持久化，不会因项目启动而丢失）。</p><h2 id="异常重试"><a href="#异常重试" class="headerlink" title="异常重试"></a>异常重试</h2><p>Spring Batch允许我们配置任务在遇到指定异常时进行指定次数的重试。在此之前，我们先定义一个自定义异常。在cc.mrbird.batch包下新建exception包，然后在该包下新建<code>MyJobExecutionException</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJobExecutionException</span> <span class="keyword">extends</span>  <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7168487913507656106L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyJobExecutionException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后在job包下新建<code>RetryExceptionJobDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">retryExceptionJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"retryExceptionJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;String, String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(listItemReader())</span><br><span class="line">                .processor(myProcessor())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .faultTolerant() <span class="comment">// 配置错误容忍</span></span><br><span class="line">                .retry(MyJobExecutionException.class) <span class="comment">// 配置重试的异常类型</span></span><br><span class="line">                .retryLimit(<span class="number">3</span>) <span class="comment">// 重试3次，三次过后还是异常的话，则任务会结束，</span></span><br><span class="line">                <span class="comment">// 异常的次数为reader，processor和writer中的总数，这里仅在processor里演示异常重试</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListItemReader&lt;String&gt; <span class="title">listItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">5</span>).forEach(i -&gt; datas.add(String.valueOf(i)));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItemReader&lt;&gt;(datas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemProcessor&lt;String, String&gt; <span class="title">myProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ItemProcessor&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(String item)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"当前处理的数据："</span> + item);</span><br><span class="line">                <span class="keyword">if</span> (count &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> item;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> MyJobExecutionException(<span class="string">"任务处理出错"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>在<code>step()</code>方法中，<code>faultTolerant()</code>表示开启容错功能，<code>retry(MyJobExecutionException.class)</code>表示遇到<code>MyJobExecutionException</code>异常时进行重试，<code>retryLimit(3)</code>表示如果第三次重试还是失败的话，则抛出异常，结束任务。</p><p>通过前面的学习我们知道，步骤Step包括<code>ItemReader</code>、<code>ItemWriter</code>和<code>ItemProcessor</code>，上面配置的错误容忍是针对整个Step的，所以容忍的异常次数应该是reader，processor和writer中的总数，上面的例子仅在processor里演示异常重试。</p><p><code>myProcessor()</code>的代码逻辑很简单，就是在前两次的时候抛出<code>MyJobExecutionException(&quot;任务处理出错&quot;)</code>异常（<code>count &lt; 2</code>），第三次的时候正常返回item（<code>count = 2 &gt;= 2</code>），所以理论上上面的任务在重试两次之后正常运行。</p><p>启动项目，控制台打印日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2020-03-12 09:04:53.359  INFO 40522 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=retryExceptionJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-12 09:04:53.415  INFO 40522 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">当前处理的数据：0</span><br><span class="line">当前处理的数据：0</span><br><span class="line">当前处理的数据：0</span><br><span class="line">当前处理的数据：1</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">当前处理的数据：2</span><br><span class="line">当前处理的数据：3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">当前处理的数据：4</span><br><span class="line">4</span><br><span class="line">2020-03-12 09:04:53.498  INFO 40522 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 83ms</span><br><span class="line">2020-03-12 09:04:53.522  INFO 40522 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=retryExceptionJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 152ms</span><br></pre></td></tr></table></figure><p></p><p>结果符合我们的预期。</p><p>假如通过<code>retryLimit(2)</code>将重试次数设置为2，并修改任务的名称为<code>retryExceptionJob1</code>，启动项目看看运行结果如何：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">v2020-03-12 09:06:48.855  INFO 40610 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=retryExceptionJob1]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-12 09:06:48.933  INFO 40610 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">当前处理的数据：0</span><br><span class="line">当前处理的数据：0</span><br><span class="line">2020-03-12 09:06:48.979 ERROR 40610 --- [           main] o.s.batch.core.step.AbstractStep         : Encountered an error executing step step in job retryExceptionJob1</span><br><span class="line"></span><br><span class="line">org.springframework.retry.RetryException: Non-skippable exception in recoverer while processing; nested exception is cc.mrbird.batch.exception.MyJobExecutionException: 任务处理出错</span><br><span class="line">    at org.springframework.batch.core.step.item.FaultTolerantChunkProcessor$2.recover(FaultTolerantChunkProcessor.java:289) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:512) ~[spring-retry-1.2.5.RELEASE.jar:na]</span><br><span class="line">    at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:351) ~[spring-retry-1.2.5.RELEASE.jar:na]</span><br><span class="line">    at org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:211) ~[spring-retry-1.2.5.RELEASE.jar:na]</span><br><span class="line">    at org.springframework.batch.core.step.item.BatchRetryTemplate.execute(BatchRetryTemplate.java:217) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.step.item.FaultTolerantChunkProcessor.transform(FaultTolerantChunkProcessor.java:298) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:210) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:77) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375) ~[spring-batch-infrastructure-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215) ~[spring-batch-infrastructure-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145) ~[spring-batch-infrastructure-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:258) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50) [spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_231]</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_231]</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_231]</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_231]</span><br><span class="line">    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">    at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">    at com.sun.proxy.$Proxy46.run(Unknown Source) [na:na]</span><br><span class="line">    at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.execute(JobLauncherCommandLineRunner.java:192) [spring-boot-autoconfigure-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">    at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.executeLocalJobs(JobLauncherCommandLineRunner.java:166) [spring-boot-autoconfigure-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">    at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.launchJobFromProperties(JobLauncherCommandLineRunner.java:153) [spring-boot-autoconfigure-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">    at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.run(JobLauncherCommandLineRunner.java:148) [spring-boot-autoconfigure-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">    at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:784) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">    at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:768) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">    at org.springframework.boot.SpringApplication.run(SpringApplication.java:322) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">    at cc.mrbird.batch.SpringBatchExceptionApplication.main(SpringBatchExceptionApplication.java:12) [classes/:na]</span><br><span class="line">Caused by: cc.mrbird.batch.exception.MyJobExecutionException: 任务处理出错</span><br><span class="line">    at cc.mrbird.batch.job.RetryExceptionJobDemo$1.process(RetryExceptionJobDemo.java:64) ~[classes/:na]</span><br><span class="line">    at cc.mrbird.batch.job.RetryExceptionJobDemo$1.process(RetryExceptionJobDemo.java:55) ~[classes/:na]</span><br><span class="line">    at org.springframework.batch.core.step.item.SimpleChunkProcessor.doProcess(SimpleChunkProcessor.java:134) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.batch.core.step.item.FaultTolerantChunkProcessor$1.doWithRetry(FaultTolerantChunkProcessor.java:233) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">    at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:287) ~[spring-retry-1.2.5.RELEASE.jar:na]</span><br><span class="line">    ... 43 common frames omitted</span><br><span class="line"></span><br><span class="line">2020-03-12 09:06:48.989  INFO 40610 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 56ms</span><br><span class="line">2020-03-12 09:06:49.019  INFO 40610 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=retryExceptionJob1]] completed with the following parameters: [&#123;&#125;] and the following status: [FAILED] in 152ms</span><br></pre></td></tr></table></figure><p></p><p>异常次数超过了重试次数，所以抛出了异常。</p><h2 id="异常跳过"><a href="#异常跳过" class="headerlink" title="异常跳过"></a>异常跳过</h2><p>我们也可以在Step中配置异常跳过，即遇到指定类型异常时忽略跳过它，在job包下新建<code>SkipExceptionJobDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkipExceptionJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">skipExceptionJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"skipExceptionJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;String, String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(listItemReader())</span><br><span class="line">                .processor(myProcessor())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .faultTolerant() <span class="comment">// 配置错误容忍</span></span><br><span class="line">                .skip(MyJobExecutionException.class) <span class="comment">// 配置跳过的异常类型</span></span><br><span class="line">                .skipLimit(<span class="number">1</span>) <span class="comment">// 最多跳过1次，1次过后还是异常的话，则任务会结束，</span></span><br><span class="line">                <span class="comment">// 异常的次数为reader，processor和writer中的总数，这里仅在processor里演示异常跳过</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListItemReader&lt;String&gt; <span class="title">listItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">5</span>).forEach(i -&gt; datas.add(String.valueOf(i)));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItemReader&lt;&gt;(datas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemProcessor&lt;String, String&gt; <span class="title">myProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"当前处理的数据："</span> + item);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"2"</span>.equals(item)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> MyJobExecutionException(<span class="string">"任务处理出错"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在<code>step()</code>方法中，<code>faultTolerant()</code>表示开启容错功能，<code>skip(MyJobExecutionException.class)</code>表示遇到<code>MyJobExecutionException</code>异常时跳过，<code>skipLimit(1)</code>表示只跳过一次。</p><p><code>myProcessor()</code>的逻辑是，当处理的item值为”2“的时候，抛出<code>MyJobExecutionException(&quot;任务处理出错&quot;)</code>异常。</p><p>此外我们还可以配置<code>SkipListener</code>类型监听器，在cc.mrbird.batch包下新建listener包，然后在该包下新建<code>MySkipListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySkipListener</span> <span class="keyword">implements</span> <span class="title">SkipListener</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSkipInRead</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在读取数据的时候遇到异常并跳过，异常："</span> + t.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSkipInWrite</span><span class="params">(String item, Throwable t)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在输出数据的时候遇到异常并跳过，待输出数据："</span> + item + <span class="string">"，异常："</span> + t.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSkipInProcess</span><span class="params">(String item, Throwable t)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在处理数据的时候遇到异常并跳过，待输出数据："</span> + item + <span class="string">"，异常："</span> + t.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后将它注入到<code>SkipExceptionJobDemo</code>，并配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkipExceptionJobDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MySkipListener mySkipListener;</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;String, String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(listItemReader())</span><br><span class="line">                .processor(myProcessor())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .faultTolerant() <span class="comment">// 配置错误容忍</span></span><br><span class="line">                .skip(MyJobExecutionException.class) <span class="comment">// 配置跳过的异常类型</span></span><br><span class="line">                .skipLimit(<span class="number">1</span>) <span class="comment">// 最多跳过1次，1次过后还是异常的话，则任务会结束，</span></span><br><span class="line">                <span class="comment">// 异常的次数为reader，processor和writer中的总数，这里仅在processor里演示异常跳过</span></span><br><span class="line">                .listener(mySkipListener)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2020-03-12 09:23:33.528  INFO 40759 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=skipExceptionJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-12 09:23:33.664  INFO 40759 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">当前处理的数据：0</span><br><span class="line">当前处理的数据：1</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">当前处理的数据：2</span><br><span class="line">当前处理的数据：3</span><br><span class="line">3</span><br><span class="line">在处理数据的时候遇到异常并跳过，待输出数据：2，异常：任务处理出错</span><br><span class="line">当前处理的数据：4</span><br><span class="line">4</span><br><span class="line">2020-03-12 09:23:33.854  INFO 40759 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 190ms</span><br><span class="line">2020-03-12 09:23:33.885  INFO 40759 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=skipExceptionJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 324ms</span><br></pre></td></tr></table></figure><p></p><h2 id="事务问题"><a href="#事务问题" class="headerlink" title="事务问题"></a>事务问题</h2><p>一次Setp分为Reader、Processor和Writer三个阶段，这些阶段统称为Item。默认情况下如果错误不是发生在Reader阶段，那么没必要再去重新读取一次数据。但是某些场景下需要Reader部分也需要重新执行，比如Reader是从一个JMS队列中消费消息，当发生回滚的时候消息也会在队列上重放，因此也要将Reader纳入到回滚的事物中，根据这个场景可以使用<code>readerIsTransactionalQueue()</code>来配置数据重读：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">            .reader(listItemReader())</span><br><span class="line">            .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">            .readerIsTransactionalQueue() <span class="comment">// 消息队列数据重读</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们还可以在Step中手动配置事务属性，事物的属性包括隔离等级（isolation）、传播方式（propagation）以及过期时间（timeout）等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultTransactionAttribute attribute = <span class="keyword">new</span> DefaultTransactionAttribute();</span><br><span class="line">    attribute.setPropagationBehavior(Propagation.REQUIRED.value());</span><br><span class="line">    attribute.setIsolationLevel(Isolation.DEFAULT.value());</span><br><span class="line">    attribute.setTimeout(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">            .reader(listItemReader())</span><br><span class="line">            .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">            .transactionAttribute(attribute)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="重启机制"><a href="#重启机制" class="headerlink" title="重启机制"></a>重启机制</h2><p>默认情况下，任务执行完毕的状态为<code>COMPLETED</code>，再次启动项目，该任务的Step不会再执行，我们可以通过配置<code>allowStartIfComplete(true)</code>来实现每次项目重新启动都将执行这个Step：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">            .reader(listItemReader())</span><br><span class="line">            .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">            .allowStartIfComplete(<span class="keyword">true</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>某些Step可能用于处理一些先决的任务，所以当Job再次重启时这Step就没必要再执行，可以通过设置<code>startLimit()</code>来限定某个Step重启的次数。当设置为1时候表示仅仅运行一次，而出现重启时将不再执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">            .reader(listItemReader())</span><br><span class="line">            .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">            .startLimit(<span class="number">1</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>部分内容参考自：<a href="https://blog.csdn.net/sswltt/article/details/103817645" target="_blank" rel="noopener">https://blog.csdn.net/sswltt/article/details/103817645</a></p><blockquote><p>本章源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/72.spring-batch-exception" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/72.spring-batch-exception</a>。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Spring Batch处理任务过程中如果发生了异常，默认机制是马上停止任务执行，抛出相应异常，如果任务还包含未执行的步骤也不会被执行。要改变这个默认规则，我们可以配置异常重试和异常跳过机制。&lt;strong&gt;异常跳过&lt;/strong&gt;：遇到异常的时候不希望结束任务，而是跳过这个异常，继续执行；&lt;strong&gt;异常重试&lt;/strong&gt;：遇到异常的时候经过指定次数的重试，如果还是失败的话，才会停止任务。除了这两个特性外，本文也会记录一些别的特性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Spring Batch" scheme="http://mrbird.cc/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch任务调度</title>
    <link href="http://mrbird.cc/Spring-Batch%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6.html"/>
    <id>http://mrbird.cc/Spring-Batch作业调度.html</id>
    <published>2020-03-12T03:49:46.000Z</published>
    <updated>2020-03-12T07:56:44.252Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>在前面的例子中，我们配置的任务都是在项目启动的时候自动运行，我们也可以通过<code>JobLauncher</code>或者<code>JobOperator</code>手动控制任务的运行时机，这节记录下它们的用法。</p><a id="more"></a><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>新建一个Spring Boot项目，版本为2.2.4.RELEASE，artifactId为spring-batch-launcher，项目结构如下图所示：</p><p><img src="img/QQ20200312-095759@2x.png" alt="QQ20200312-095759@2x"></p><p>剩下的数据库层的准备，项目配置，依赖引入和<a href="/Spring-Batch入门.html">Spring Batch入门</a>文章中的框架搭建步骤一致，这里就不再赘述。</p><p>此外，本节我们需要演示在Controller里通过<code>JobLauncher</code>或者<code>JobOperator</code>调度任务，所以我们还需在pom里引入web依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后准备个任务，用于后续测试。在cc.mrbird.batch包下新建job包，然后在该包下新建<code>MyJob</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">job</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"job"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    StepExecution stepExecution = chunkContext.getStepContext().getStepExecution();</span><br><span class="line">                    Map&lt;String, JobParameter&gt; parameters = stepExecution.getJobParameters().getParameters();</span><br><span class="line">                    System.out.println(parameters.get(<span class="string">"message"</span>).getValue());</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;)</span><br><span class="line">                .listener(<span class="keyword">this</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在<code>step()</code>方法中，我们通过执行上下文获取了key为<code>message</code>的参数值。</p><h2 id="JobLauncher"><a href="#JobLauncher" class="headerlink" title="JobLauncher"></a>JobLauncher</h2><p>在cc.mrbird.batch包下新建controller包，然后在该包下新建<code>JobController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"job"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Job job;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobLauncher jobLauncher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"launcher/&#123;message&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">launcher</span><span class="params">(@PathVariable String message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        JobParameters parameters = <span class="keyword">new</span> JobParametersBuilder()</span><br><span class="line">                .addString(<span class="string">"message"</span>, message)</span><br><span class="line">                .toJobParameters();</span><br><span class="line">        <span class="comment">// 将参数传递给任务</span></span><br><span class="line">        jobLauncher.run(job, parameters);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们注入了<code>JobLauncher</code>和上面配置的<code>Job</code>，然后通过<code>JobLauncher</code>的<code>run(Job job, JobParameters jobParameters)</code>方法运行指定的任务Job，并且传递了参数。</p><p>要关闭Spring Batch启动项目自动运行任务的机制，需要在项目配置文件application.yml中添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  batch:</span></span><br><span class="line"><span class="attr">    job:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p></p><p>启动项目，在浏览器地址栏访问：<a href="http://localhost:8080/job/launcher/hello" target="_blank" rel="noopener">http://localhost:8080/job/launcher/hello</a>：</p><p><img src="img/QQ20200312-102457@2x.png" alt="QQ20200312-102457@2x"></p><p>项目控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-03-12 10:24:31.547  INFO 41266 --- [nio-8080-exec-4] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=job]] launched with the following parameters: [&#123;message=hello&#125;]</span><br><span class="line">2020-03-12 10:24:31.583  INFO 41266 --- [nio-8080-exec-4] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">hello</span><br><span class="line">2020-03-12 10:24:31.610  INFO 41266 --- [nio-8080-exec-4] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 27ms</span><br><span class="line">2020-03-12 10:24:31.632  INFO 41266 --- [nio-8080-exec-4] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=job]] completed with the following parameters: [&#123;message=hello&#125;] and the following status: [COMPLETED] in 76ms</span><br></pre></td></tr></table></figure><p></p><p>此外，需要注意的是：同样的参数，同样的任务再次运行的时候将抛出<code>JobInstanceAlreadyCompleteException</code>异常，比如在浏览器中再次访问<a href="http://localhost:8080/job/launcher/hello" target="_blank" rel="noopener">http://localhost:8080/job/launcher/hello</a>，项目控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException: A job instance already exists and is complete for parameters=&#123;message=hello&#125;.  If you want to run this job again, change the parameters.</span><br><span class="line">	at org.springframework.batch.core.repository.support.SimpleJobRepository.createJobExecution(SimpleJobRepository.java:131) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_231]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_231]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_231]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_231]</span><br><span class="line">	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure><p></p><p>所以我们在任务调度的时候，应避免参数重复。</p><h2 id="JobOperator"><a href="#JobOperator" class="headerlink" title="JobOperator"></a>JobOperator</h2><p>在<code>JobController</code>里添加一个新的端点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"job"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobOperator jobOperator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"operator/&#123;message&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">operator</span><span class="params">(@PathVariable String message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 传递任务名称，参数使用 kv方式</span></span><br><span class="line">        jobOperator.start(<span class="string">"job"</span>, <span class="string">"message="</span> + message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们注入了<code>JobOperator</code>，<code>JobOperator</code>的<code>start(String jobName, String parameters)</code>方法传入的是任务的名称（任务在Spring IOC容器中的名称）,并且参数使用key-value的方式传递。</p><p>要通过任务名称获取到相应的Bean，还需要添加一个额外的配置。在cc.mrbird.batch包下新建configure包，然后在该包下新建<code>JobConfigure</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册JobRegistryBeanPostProcessor bean</span></span><br><span class="line"><span class="comment">     * 用于将任务名称和实际的任务关联起来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobRegistryBeanPostProcessor <span class="title">processor</span><span class="params">(JobRegistry jobRegistry, ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        JobRegistryBeanPostProcessor postProcessor = <span class="keyword">new</span> JobRegistryBeanPostProcessor();</span><br><span class="line">        postProcessor.setJobRegistry(jobRegistry);</span><br><span class="line">        postProcessor.setBeanFactory(applicationContext.getAutowireCapableBeanFactory());</span><br><span class="line">        <span class="keyword">return</span> postProcessor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果没有这段配置，在任务调度的时候将报<span style="color:red">org.springframework.batch.core.launch.NoSuchJobException: No job configuration with the name [job] was registered</span>。</p><p>启动任务，浏览器访问：<a href="http://localhost:8080/job/operator/mrbird" target="_blank" rel="noopener">http://localhost:8080/job/operator/mrbird</a>：</p><p><img src="img/QQ20200312-105134@2x.png" alt="QQ20200312-105134@2x"></p><p>项目控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2020-03-12 10:51:20.174  INFO 41405 --- [nio-8080-exec-2] o.s.b.c.l.support.SimpleJobOperator      : Checking status of job with name=job</span><br><span class="line">2020-03-12 10:51:20.183  INFO 41405 --- [nio-8080-exec-2] o.s.b.c.l.support.SimpleJobOperator      : Attempting to launch job with name=job and parameters=message=mrbird</span><br><span class="line">2020-03-12 10:51:20.239  INFO 41405 --- [nio-8080-exec-2] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=job]] launched with the following parameters: [&#123;message=mrbird&#125;]</span><br><span class="line">2020-03-12 10:51:20.293  INFO 41405 --- [nio-8080-exec-2] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">mrbird</span><br><span class="line">2020-03-12 10:51:20.324  INFO 41405 --- [nio-8080-exec-2] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 31ms</span><br><span class="line">2020-03-12 10:51:20.344  INFO 41405 --- [nio-8080-exec-2] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=job]] completed with the following parameters: [&#123;message=mrbird&#125;] and the following status: [COMPLETED] in 83ms</span><br></pre></td></tr></table></figure><p></p><p><code>JobOperator</code>包含了许多实用的方法：</p><p><img src="img/QQ20200312-105318@2x.png" alt="QQ20200312-105318@2x"></p><p>具体可以自己尝试玩一玩。</p><blockquote><p>本节源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/73.spring-batch-launcher" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/73.spring-batch-launcher</a>。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在前面的例子中，我们配置的任务都是在项目启动的时候自动运行，我们也可以通过&lt;code&gt;JobLauncher&lt;/code&gt;或者&lt;code&gt;JobOperator&lt;/code&gt;手动控制任务的运行时机，这节记录下它们的用法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Spring Batch" scheme="http://mrbird.cc/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch监听器</title>
    <link href="http://mrbird.cc/Spring-Batch%E7%9B%91%E5%90%AC%E5%99%A8.html"/>
    <id>http://mrbird.cc/Spring-Batch监听器.html</id>
    <published>2020-03-09T03:55:27.000Z</published>
    <updated>2020-03-12T03:34:45.802Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>Spring Batch提供了多种监听器Listener，用于在任务处理过程中触发我们的逻辑代码。常用的监听器根据粒度从粗到细分别有：Job级别的监听器<code>JobExecutionListener</code>、Step级别的监听器<code>StepExecutionListener</code>、Chunk监听器<code>ChunkListener</code>、ItemReader监听器<code>ItemReadListener</code>、ItemWriter监听器<code>ItemWriteListener</code>和ItemProcessor监听器<code>ItemProcessListener</code>等。具体可以参考下表：</p><a id="more"></a><table><tr><th>监听器</th><th>具体说明</th></tr><tr><td>JobExecutionListener</td><td>在Job开始之前(beforeJob)和之后(aflerJob)触发</td></tr><tr><td>StepExecutionListener</td><td>在Step开始之前(beforeStep)和之后(afterStep)触发</td></tr><tr><td>ChunkListener</td><td>在 Chunk 开始之前(beforeChunk),之后(afterChunk)和错误后(afterChunkError)触发</td></tr><tr><td>ItemReadListener</td><td>在 Read 开始之前(beforeRead&gt;,之后(afterRead)和错误后(onReadError)触发</td></tr><tr><td>ItemProcessListener</td><td>在 Processor 开始之前(beforeProcess),之后(afterProcess)和错误后(onProcessError)触发</td></tr><tr><td>ItemWriterListener</td><td>在 Writer 开始之前(beforeWrite),之后(afterWrite)和错误后(onWriteError)触发</td></tr></table><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>新建一个Spring Boot项目，版本为2.2.4.RELEASE，artifactId为spring-batch-listener，项目结构如下图所示：</p><p><img src="img/QQ20200309-160923@2x.png" alt="QQ20200309-160923@2x"></p><p>剩下的数据库层的准备，项目配置，依赖引入和<a href="/Spring-Batch入门.html">Spring Batch入门</a>文章中的框架搭建步骤一致，这里就不再赘述。</p><h2 id="监听器演示"><a href="#监听器演示" class="headerlink" title="监听器演示"></a>监听器演示</h2><p>每种监听器都可以通过两种方式使用：</p><ol><li>接口实现；</li><li>注解驱动。</li></ol><p>先来看看通过实现接口的方式使用监听器。在cc.mrbird.batch包下新建listener包，然后在该包下新建<code>MyJobExecutionListener</code>，实现<code>JobExecutionListener</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJobExecutionListener</span> <span class="keyword">implements</span> <span class="title">JobExecutionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before job execute: "</span> + jobExecution.getJobInstance().getJobName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after job execute: "</span> + jobExecution.getJobInstance().getJobName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面实现的两个方法很直观了，触发时机分别为任务执行前和任务执行后。</p><p>接着看看如何使用注解驱动使用监听器。在listener包下新建<code>MyStepExecutionListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStepExecutionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeStep</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breforeStep</span><span class="params">(StepExecution stepExecution)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before step execute: "</span> + stepExecution.getStepName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterStep</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterStep</span><span class="params">(StepExecution stepExecution)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after step execute: "</span> + stepExecution.getStepName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过注解的方式不需要实现接口，而是在对应的方法上通过诸如<code>@BeforeStep</code>、<code>@AfterStep</code>等注解标注即可，不过方法的签名必须符合注解的要求，否则会反射失败。比如，查看<code>@BeforeStep</code>的源码：</p><p><img src="img/QQ20200309-162830@2x.png" alt="QQ20200309-162830@2x"></p><p>监听器的创建大致就这两种姿势了，下面的例子不在详细说明，直接贴代码。</p><p>在listener包下继续创建<code>MyChunkListener</code>、<code>MyItemReaderListener</code>、<code>MyItemProcessListener</code>和<code>MyItemWriterListener</code>。</p><p><code>MyChunkListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyChunkListener</span> <span class="keyword">implements</span> <span class="title">ChunkListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeChunk</span><span class="params">(ChunkContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before chunk: "</span> + context.getStepContext().getStepName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterChunk</span><span class="params">(ChunkContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after chunk: "</span> + context.getStepContext().getStepName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterChunkError</span><span class="params">(ChunkContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before chunk error: "</span> + context.getStepContext().getStepName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>MyItemReaderListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyItemReaderListener</span> <span class="keyword">implements</span> <span class="title">ItemReadListener</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before read"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRead</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after read: "</span> + item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReadError</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"on read error: "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>MyItemProcessListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyItemProcessListener</span> <span class="keyword">implements</span> <span class="title">ItemProcessListener</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeProcess</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before process: "</span> + item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterProcess</span><span class="params">(String item, String result)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after process: "</span> + item + <span class="string">" result: "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessError</span><span class="params">(String item, Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"on process error: "</span> + item + <span class="string">" , error message: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>MyItemWriterListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyItemWriterListener</span> <span class="keyword">implements</span> <span class="title">ItemWriteListener</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeWrite</span><span class="params">(List&lt;? extends String&gt; items)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before write: "</span> + items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterWrite</span><span class="params">(List&lt;? extends String&gt; items)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after write: "</span> + items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWriteError</span><span class="params">(Exception exception, List&lt;? extends String&gt; items)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"on write error: "</span> + items + <span class="string">" , error message: "</span> + exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>准备好这些监听器后，我们在cc.mrbird.batch包下新建job包，然后在该包下新建<code>ListenerTestJobDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerTestJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyJobExecutionListener myJobExecutionListener;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyStepExecutionListener myStepExecutionListener;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyChunkListener myChunkListener;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyItemReaderListener myItemReaderListener;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyItemProcessListener myItemProcessListener;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyItemWriterListener myItemWriterListener;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">listenerTestJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"listenerTestJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .listener(myJobExecutionListener)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .listener(myStepExecutionListener)</span><br><span class="line">                .&lt;String, String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .faultTolerant()</span><br><span class="line">                .listener(myChunkListener)</span><br><span class="line">                .reader(reader())</span><br><span class="line">                .listener(myItemReaderListener)</span><br><span class="line">                .processor(processor())</span><br><span class="line">                .listener(myItemProcessListener)</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .listener(myItemWriterListener)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemReader&lt;String&gt; <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; data = Arrays.asList(<span class="string">"java"</span>, <span class="string">"c++"</span>, <span class="string">"javascript"</span>, <span class="string">"python"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> simpleReader(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemProcessor&lt;String, String&gt; <span class="title">processor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item -&gt; item + <span class="string">" language"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">simpleReader</span> <span class="keyword">implements</span> <span class="title">ItemReader</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;String&gt; iterator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">simpleReader</span><span class="params">(List&lt;String&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iterator = data.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iterator.hasNext() ? iterator.next() : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码我们在相应的位置配置了监听器（配置chunk监听器的时候，必须配置<code>faultTolerant()</code>）。</p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">2020-03-09 17:08:34.439  INFO 20165 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=listenerTestJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">before job execute: listenerTestJob3</span><br><span class="line">2020-03-09 17:08:34.495  INFO 20165 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">before step execute: step</span><br><span class="line">before chunk: step</span><br><span class="line">before read</span><br><span class="line">after read: java</span><br><span class="line">before read</span><br><span class="line">after read: c++</span><br><span class="line">before process: java</span><br><span class="line">after process: java result: java language</span><br><span class="line">before process: c++</span><br><span class="line">after process: c++ result: c++ language</span><br><span class="line">before write: [java language, c++ language]</span><br><span class="line">java language</span><br><span class="line">c++ language</span><br><span class="line">after write: [java language, c++ language]</span><br><span class="line">after chunk: step</span><br><span class="line">before chunk: step</span><br><span class="line">before read</span><br><span class="line">after read: javascript</span><br><span class="line">before read</span><br><span class="line">after read: python</span><br><span class="line">before process: javascript</span><br><span class="line">after process: javascript result: javascript language</span><br><span class="line">before process: python</span><br><span class="line">after process: python result: python language</span><br><span class="line">before write: [javascript language, python language]</span><br><span class="line">javascript language</span><br><span class="line">python language</span><br><span class="line">after write: [javascript language, python language]</span><br><span class="line">after chunk: step</span><br><span class="line">before chunk: step</span><br><span class="line">before read</span><br><span class="line">after chunk: step</span><br><span class="line">after step execute: step</span><br><span class="line">2020-03-09 17:08:34.546  INFO 20165 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 51ms</span><br><span class="line">after job execute: listenerTestJob3</span><br><span class="line">2020-03-09 17:08:34.566  INFO 20165 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=listenerTestJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 105ms</span><br></pre></td></tr></table></figure><p></p><p>从上面的运行结果我们可以看出：</p><ol><li><p>证实了<code>chunk(2)</code>表示每一批处理2个数据块；</p></li><li><p>Step里的执行顺序是read -&gt; process -&gt; writer。</p></li></ol><h2 id="聚合监听器"><a href="#聚合监听器" class="headerlink" title="聚合监听器"></a>聚合监听器</h2><p>每种监听器可以通过对应的聚合类组合在一起，比如有多个<code>JobExecutionListener</code>，则可以使用<code>CompositeJobExecutionListener</code>聚合它们。上面介绍的这几种监听器都有与之对应的<code>CompositeXXXListener</code>聚合类，这里只演示<code>CompositeJobExecutionListener</code>，剩下的以此类推。</p><p>在job包下新建<code>CompositeJobExecutionListenerJobDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeJobExecutionListenerJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">compositeJobExecutionListenerJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"compositeJobExecutionListenerJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .listener(compositeJobExecutionListener())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .tasklet((contribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤...."</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CompositeJobExecutionListener <span class="title">compositeJobExecutionListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CompositeJobExecutionListener listener = <span class="keyword">new</span> CompositeJobExecutionListener();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 任务监听器1</span></span><br><span class="line">        JobExecutionListener jobExecutionListenerOne = <span class="keyword">new</span> JobExecutionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"任务监听器One，before job execute: "</span> + jobExecution.getJobInstance().getJobName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"任务监听器One，after job execute: "</span> + jobExecution.getJobInstance().getJobName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 任务监听器2</span></span><br><span class="line">        JobExecutionListener jobExecutionListenerTwo = <span class="keyword">new</span> JobExecutionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"任务监听器Two，before job execute: "</span> + jobExecution.getJobInstance().getJobName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"任务监听器Two，after job execute: "</span> + jobExecution.getJobInstance().getJobName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 聚合</span></span><br><span class="line">        listener.setListeners(Arrays.asList(jobExecutionListenerOne, jobExecutionListenerTwo));</span><br><span class="line">        <span class="keyword">return</span> listener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2020-03-09 17:26:47.533  INFO 20310 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=compositeJobExecutionListenerJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">任务监听器One，before job execute: compositeJobExecutionListenerJob</span><br><span class="line">任务监听器Two，before job execute: compositeJobExecutionListenerJob</span><br><span class="line">2020-03-09 17:26:47.603  INFO 20310 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">执行步骤....</span><br><span class="line">2020-03-09 17:26:47.660  INFO 20310 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 57ms</span><br><span class="line">任务监听器Two，after job execute: compositeJobExecutionListenerJob</span><br><span class="line">任务监听器One，after job execute: compositeJobExecutionListenerJob</span><br><span class="line">2020-03-09 17:26:47.693  INFO 20310 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=compositeJobExecutionListenerJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 129ms</span><br></pre></td></tr></table></figure><p></p><p>除了本文介绍的这几个监听器外，还有一些和异常处理相关的监听器，会在后续的文章中提到。</p><blockquote><p>本文源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/71.spring-batch-listener" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/71.spring-batch-listener</a>。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Spring Batch提供了多种监听器Listener，用于在任务处理过程中触发我们的逻辑代码。常用的监听器根据粒度从粗到细分别有：Job级别的监听器&lt;code&gt;JobExecutionListener&lt;/code&gt;、Step级别的监听器&lt;code&gt;StepExecutionListener&lt;/code&gt;、Chunk监听器&lt;code&gt;ChunkListener&lt;/code&gt;、ItemReader监听器&lt;code&gt;ItemReadListener&lt;/code&gt;、ItemWriter监听器&lt;code&gt;ItemWriteListener&lt;/code&gt;和ItemProcessor监听器&lt;code&gt;ItemProcessListener&lt;/code&gt;等。具体可以参考下表：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Spring Batch" scheme="http://mrbird.cc/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch处理数据</title>
    <link href="http://mrbird.cc/Spring-Batch%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE.html"/>
    <id>http://mrbird.cc/Spring-Batch处理数据.html</id>
    <published>2020-03-09T03:54:47.000Z</published>
    <updated>2020-03-12T03:34:22.630Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>在Spring Batch中，<code>ItemReader</code>接口用于读取数据，<code>ItemWriter</code>接口用于输出数据。除此之外，我们可以通过<code>ItemProcessor</code>接口实现数据的处理，包括：数据校验，数据过滤和数据转换等。数据处理的时机发生于<code>ItemReader</code>读取数据之后，<code>ItemWriter</code>输出数据之前。本节记录下Spring Batch中<code>ItemProcessor</code>的使用。</p><a id="more"></a><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>新建一个Spring Boot项目，版本为2.2.4.RELEASE，artifactId为spring-batch-itemprocessor，项目结构如下图所示：</p><p><img src="img/QQ20200309-135557@2x.png" alt="QQ20200309-135557@2x"></p><p>剩下的数据库层的准备，项目配置，依赖引入和<a href="/Spring-Batch入门.html">Spring Batch入门</a>文章中的框架搭建步骤一致，这里就不再赘述。</p><p>在介绍Spring Batch ItemProcessor之前，我们先准备个简单的数据读取源。在cc.mrbird.batch包下新建entity包，然后在该包下新建<code>TestData</code>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String field1;</span><br><span class="line">    <span class="keyword">private</span> String field2;</span><br><span class="line">    <span class="keyword">private</span> String field3;</span><br><span class="line">    <span class="comment">// get,set,toString略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着在cc.mrbird.batch包下新建reader包，然后在该包下创建<code>ItemReaderConfigure</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemReaderConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListItemReader&lt;TestData&gt; <span class="title">simpleReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;TestData&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        TestData testData1 = <span class="keyword">new</span> TestData();</span><br><span class="line">        testData1.setId(<span class="number">1</span>);</span><br><span class="line">        testData1.setField1(<span class="string">"11"</span>);</span><br><span class="line">        testData1.setField2(<span class="string">"12"</span>);</span><br><span class="line">        testData1.setField3(<span class="string">"13"</span>);</span><br><span class="line">        data.add(testData1);</span><br><span class="line">        TestData testData2 = <span class="keyword">new</span> TestData();</span><br><span class="line">        testData2.setId(<span class="number">2</span>);</span><br><span class="line">        testData2.setField1(<span class="string">"21"</span>);</span><br><span class="line">        testData2.setField2(<span class="string">"22"</span>);</span><br><span class="line">        testData2.setField3(<span class="string">"23"</span>);</span><br><span class="line">        data.add(testData2);</span><br><span class="line">        TestData testData3 = <span class="keyword">new</span> TestData();</span><br><span class="line">        testData3.setId(<span class="number">3</span>);</span><br><span class="line">        testData3.setField1(<span class="string">"31"</span>);</span><br><span class="line">        testData3.setField2(<span class="string">"32"</span>);</span><br><span class="line">        <span class="comment">// 设置为空字符串，用于后面格式校验演示</span></span><br><span class="line">        testData3.setField3(<span class="string">""</span>);</span><br><span class="line">        data.add(testData3);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItemReader&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面注册了一个<code>ItemReader</code>类型的Bean，后续都用它作为读取数据的来源。</p><h2 id="格式校验"><a href="#格式校验" class="headerlink" title="格式校验"></a>格式校验</h2><p><code>ItemProcessor</code>的实现类<code>ValidatingItemProcessor</code>可以用于数据格式校验。举个例子，在cc.mrbird.batch包下新建job包，然后在该包下新建<code>ValidatingItemProcessorDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatingItemProcessorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">validatingItemProcessorJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"validatingItemProcessorJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .processor(validatingItemProcessor())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ValidatingItemProcessor&lt;TestData&gt; <span class="title">validatingItemProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValidatingItemProcessor&lt;TestData&gt; processor = <span class="keyword">new</span> ValidatingItemProcessor&lt;&gt;();</span><br><span class="line">        processor.setValidator(value -&gt; &#123;</span><br><span class="line">            <span class="comment">// 对每一条数据进行校验</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">""</span>.equals(value.getField3())) &#123;</span><br><span class="line">                <span class="comment">// 如果field3的值为空串，则抛异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ValidationException(<span class="string">"field3的值不合法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> processor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过<code>ValidatingItemProcessor</code>我们对<code>ItemReader</code>读取的每一条数据进行校验，如果field3的值为空串的话，则抛出<code>ValidationException(&quot;field3的值不合法&quot;)</code>异常。<code>ItemProcessor</code>通过步骤创建工厂的<code>processor()</code>设置。</p><p>启动项目，控制台日志的打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">2020-03-09 14:18:47.186  INFO 17967 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=validatingItemProcessorJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-09 14:18:47.252  INFO 17967 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">TestData&#123;id=1, field1=&apos;11&apos;, field2=&apos;12&apos;, field3=&apos;13&apos;&#125;</span><br><span class="line">TestData&#123;id=2, field1=&apos;21&apos;, field2=&apos;22&apos;, field3=&apos;23&apos;&#125;</span><br><span class="line">2020-03-09 14:18:47.300 ERROR 17967 --- [           main] o.s.batch.core.step.AbstractStep         : Encountered an error executing step step in job validatingItemProcessorJob</span><br><span class="line"></span><br><span class="line">org.springframework.batch.item.validator.ValidationException: field3的值不合法</span><br><span class="line">	at cc.mrbird.batch.entity.job.ValidatingItemProcessorDemo.lambda$validatingItemProcessor$1(ValidatingItemProcessorDemo.java:50) ~[classes/:na]</span><br><span class="line">	at org.springframework.batch.item.validator.ValidatingItemProcessor.process(ValidatingItemProcessor.java:84) ~[spring-batch-infrastructure-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doProcess(SimpleChunkProcessor.java:134) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.item.SimpleChunkProcessor.transform(SimpleChunkProcessor.java:319) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:210) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:77) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375) ~[spring-batch-infrastructure-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215) ~[spring-batch-infrastructure-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145) ~[spring-batch-infrastructure-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:258) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50) [spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_231]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_231]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_231]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_231]</span><br><span class="line">	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127) [spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]</span><br><span class="line">	at com.sun.proxy.$Proxy46.run(Unknown Source) [na:na]</span><br><span class="line">	at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.execute(JobLauncherCommandLineRunner.java:192) [spring-boot-autoconfigure-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.executeLocalJobs(JobLauncherCommandLineRunner.java:166) [spring-boot-autoconfigure-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.launchJobFromProperties(JobLauncherCommandLineRunner.java:153) [spring-boot-autoconfigure-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.run(JobLauncherCommandLineRunner.java:148) [spring-boot-autoconfigure-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:784) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:768) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]</span><br><span class="line">	at cc.mrbird.batch.SpringBatchItemprocessorApplication.main(SpringBatchItemprocessorApplication.java:12) [classes/:na]</span><br><span class="line"></span><br><span class="line">2020-03-09 14:18:47.307  INFO 17967 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 55ms</span><br><span class="line">2020-03-09 14:18:47.335  INFO 17967 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=validatingItemProcessorJob]] completed with the following parameters: [&#123;&#125;] and the following status: [FAILED] in 127ms</span><br></pre></td></tr></table></figure><p></p><p>可以看到任务处理过程中抛出了预期异常，关于任务处理中如何处理异常，可以参考后续的文章。</p><p>除了使用这种方式外，我们还可以使用<code>BeanValidatingItemProcessor</code>校验使用JSR-303注解标注的实体类。比如，在TestData类的field3属性上添加<code>@NotBlank</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String field1;</span><br><span class="line">    <span class="keyword">private</span> String field2;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String field3;</span><br><span class="line">    <span class="comment">// get,set,toString略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用该注解需要在pom中添加<code>spring-boot-starter-validation</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在job包下新建<code>BeanValidatingItemProcessorDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanValidatingItemProcessorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">beanValidatingItemProcessorJob</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"beanValidatingItemProcessorJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .processor(beanValidatingItemProcessor())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BeanValidatingItemProcessor&lt;TestData&gt; <span class="title">beanValidatingItemProcessor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BeanValidatingItemProcessor&lt;TestData&gt; beanValidatingItemProcessor = <span class="keyword">new</span> BeanValidatingItemProcessor&lt;&gt;();</span><br><span class="line">        <span class="comment">// 开启过滤，不符合规则的数据被过滤掉；</span></span><br><span class="line">        beanValidatingItemProcessor.setFilter(<span class="keyword">true</span>);</span><br><span class="line">        beanValidatingItemProcessor.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> beanValidatingItemProcessor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动项目后，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2020-03-09 14:31:14.813  INFO 18100 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=beanValidatingItemProcessorJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-09 14:31:14.873  INFO 18100 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">TestData&#123;id=1, field1=&apos;11&apos;, field2=&apos;12&apos;, field3=&apos;13&apos;&#125;</span><br><span class="line">TestData&#123;id=2, field1=&apos;21&apos;, field2=&apos;22&apos;, field3=&apos;23&apos;&#125;</span><br><span class="line">2020-03-09 14:31:14.959  INFO 18100 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 85ms</span><br><span class="line">2020-03-09 14:31:14.980  INFO 18100 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=beanValidatingItemProcessorJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 145ms</span><br><span class="line">2020-03-09 14:31:15.069  INFO 18100 --- [           main]</span><br></pre></td></tr></table></figure><p></p><p>可以看到，不符合规则的数据已经被排除了。如果不开启过滤<code>beanValidatingItemProcessor.setFilter(false)</code>，那么在遇到不符合注解校验规则的数据，将抛出如下异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.batch.item.validator.ValidationException: Validation failed for TestData&#123;id=3, field1=&apos;31&apos;, field2=&apos;32&apos;, field3=&apos;&apos;&#125;: </span><br><span class="line">Field error in object &apos;item&apos; on field &apos;field3&apos;: rejected value []; codes [NotBlank.item.field3,NotBlank.field3,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [item.field3,field3]; arguments []; default message [field3]]; default message [不能为空]</span><br><span class="line">	at org.springframework.batch.item.validator.SpringValidator.validate(SpringValidator.java:54) ~[spring-batch-infrastructure-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.item.validator.ValidatingItemProcessor.process(ValidatingItemProcessor.java:84) ~[spring-batch-infrastructure-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doProcess(SimpleChunkProcessor.java:134) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	at org.springframework.batch.core.step.item.SimpleChunkProcessor.transform(SimpleChunkProcessor.java:319) ~[spring-batch-core-4.2.1.RELEASE.jar:4.2.1.RELEASE]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure><p></p><h2 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h2><p>通过自定义<code>ItemProcessor</code>的实现类，我们也可以简单地实现数据过滤。在cc.mrbird.batch包下新建processor包，然后在该包下新建<code>TestDataFilterItemProcessor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataFilterItemProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">TestData</span>, <span class="title">TestData</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestData <span class="title">process</span><span class="params">(TestData item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回null，会过滤掉这条数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.equals(item.getField3()) ? <span class="keyword">null</span> : item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>TestDataFilterItemProcessor</code>实现了<code>ItemProcessor</code>的<code>process()</code>方法，在该方法内编写具体的校验逻辑，上面代码判断TestData的field3是否为空串，是的话返回null（返回null会过滤掉这条数据）。</p><p>接着在job包下新建<code>TestDataFilterItemProcessorDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataFilterItemProcessorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestDataFilterItemProcessor testDataFilterItemProcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">testDataFilterItemProcessorJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testDataFilterItemProcessorJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .processor(testDataFilterItemProcessor)</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-03-09 15:03:30.932  INFO 18690 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=testDataFilterItemProcessorJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-09 15:03:30.973  INFO 18690 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">TestData&#123;id=1, field1=&apos;11&apos;, field2=&apos;12&apos;, field3=&apos;13&apos;&#125;</span><br><span class="line">TestData&#123;id=2, field1=&apos;21&apos;, field2=&apos;22&apos;, field3=&apos;23&apos;&#125;</span><br><span class="line">2020-03-09 15:03:31.012  INFO 18690 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 39ms</span><br><span class="line">2020-03-09 15:03:31.037  INFO 18690 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=testDataFilterItemProcessorJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 95ms</span><br></pre></td></tr></table></figure><p></p><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><p>在processor包下新建一个<code>ItemProcessor</code>实现类<code>TestDataTransformItemPorcessor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataTransformItemPorcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">TestData</span>, <span class="title">TestData</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestData <span class="title">process</span><span class="params">(TestData item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// field1值拼接 hello</span></span><br><span class="line">        item.setField1(item.getField1() + <span class="string">" hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在job包下新建<code>TestDataTransformItemPorcessorDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataTransformItemPorcessorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestDataTransformItemPorcessor testDataTransformItemPorcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">testDataTransformItemPorcessorJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testDataTransformItemPorcessorJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .processor(testDataTransformItemPorcessor)</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2020-03-09 15:08:55.628  INFO 18775 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=testDataTransformItemPorcessorJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-09 15:08:55.694  INFO 18775 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">TestData&#123;id=1, field1=&apos;11 hello&apos;, field2=&apos;12&apos;, field3=&apos;13&apos;&#125;</span><br><span class="line">TestData&#123;id=2, field1=&apos;21 hello&apos;, field2=&apos;22&apos;, field3=&apos;23&apos;&#125;</span><br><span class="line">TestData&#123;id=3, field1=&apos;31 hello&apos;, field2=&apos;32&apos;, field3=&apos;&apos;&#125;</span><br><span class="line">2020-03-09 15:08:55.757  INFO 18775 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 63ms</span><br><span class="line">2020-03-09 15:08:55.781  INFO 18775 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=testDataTransformItemPorcessorJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 144ms</span><br></pre></td></tr></table></figure><p></p><h2 id="聚合处理"><a href="#聚合处理" class="headerlink" title="聚合处理"></a>聚合处理</h2><p>在创建Step的时候，除了制定一个<code>ItemProcess</code>外，我们可以通过<code>CompositeItemProcessor</code>聚合多个processor处理过程。</p><p>在job包下新建<code>CompositeItemProcessorDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeItemProcessorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestDataFilterItemProcessor testDataFilterItemProcessor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestDataTransformItemPorcessor testDataTransformItemPorcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">compositeItemProcessorJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"compositeItemProcessorJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .processor(compositeItemProcessor())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CompositeItemProcessor组合多种中间处理器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CompositeItemProcessor&lt;TestData, TestData&gt; <span class="title">compositeItemProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CompositeItemProcessor&lt;TestData, TestData&gt; processor = <span class="keyword">new</span> CompositeItemProcessor&lt;&gt;();</span><br><span class="line">        List&lt;ItemProcessor&lt;TestData, TestData&gt;&gt; processors = Arrays.asList(testDataFilterItemProcessor, testDataTransformItemPorcessor);</span><br><span class="line">        <span class="comment">// 代理两个processor</span></span><br><span class="line">        processor.setDelegates(processors);</span><br><span class="line">        <span class="keyword">return</span> processor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们通过<code>CompositeItemProcessor</code>聚合了前面定义的连个processor：<code>TestDataFilterItemProcessor</code>和<code>TestDataTransformItemPorcessor</code>。</p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-03-09 15:21:24.960  INFO 18882 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=compositeItemProcessorJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-09 15:21:25.005  INFO 18882 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">TestData&#123;id=1, field1=&apos;11 hello&apos;, field2=&apos;12&apos;, field3=&apos;13&apos;&#125;</span><br><span class="line">TestData&#123;id=2, field1=&apos;21 hello&apos;, field2=&apos;22&apos;, field3=&apos;23&apos;&#125;</span><br><span class="line">2020-03-09 15:21:25.065  INFO 18882 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 60ms</span><br><span class="line">2020-03-09 15:21:25.104  INFO 18882 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=compositeItemProcessorJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 128ms</span><br></pre></td></tr></table></figure><p></p><p>从结果可以看到，数据不但进行了过滤，还进行了转换（拼接hello）。</p><blockquote><p>本节源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/70.spring-batch-itemprocessor" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/70.spring-batch-itemprocessor</a>。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在Spring Batch中，&lt;code&gt;ItemReader&lt;/code&gt;接口用于读取数据，&lt;code&gt;ItemWriter&lt;/code&gt;接口用于输出数据。除此之外，我们可以通过&lt;code&gt;ItemProcessor&lt;/code&gt;接口实现数据的处理，包括：数据校验，数据过滤和数据转换等。数据处理的时机发生于&lt;code&gt;ItemReader&lt;/code&gt;读取数据之后，&lt;code&gt;ItemWriter&lt;/code&gt;输出数据之前。本节记录下Spring Batch中&lt;code&gt;ItemProcessor&lt;/code&gt;的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Spring Batch" scheme="http://mrbird.cc/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch输出数据</title>
    <link href="http://mrbird.cc/Spring-Batch%E8%BE%93%E5%87%BA%E6%95%B0%E6%8D%AE.html"/>
    <id>http://mrbird.cc/Spring-Batch输出数据.html</id>
    <published>2020-03-07T03:54:32.000Z</published>
    <updated>2020-03-12T03:33:54.800Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>Spring Batch输出数据通过ItemWriter接口的实现类来完成，包括FlatFileItemWriter文本数据输出、StaxEventItemWriter XML文件数据输出、JsonItemWriter JSON文件数据输出、JdbcBatchItemWriter数据库数据插入等实现，更多可用的实现可以参考：<a href="https://docs.spring.io/spring-batch/docs/4.2.x/reference/html/appendix.html#itemWritersAppendix" target="_blank" rel="noopener">https://docs.spring.io/spring-batch/docs/4.2.x/reference/html/appendix.html#itemWritersAppendix</a>，本文只介绍这四种比较常用的输出数据方式。</p><a id="more"></a><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>新建一个Spring Boot项目，版本为2.2.4.RELEASE，artifactId为spring-batch-itemwriter，项目结构如下图所示：</p><p><img src="img/QQ20200309-092102@2x.png" alt="QQ20200309-092102@2x"></p><p>剩下的数据库层的准备，项目配置，依赖引入和<a href="/Spring-Batch入门.html">Spring Batch入门</a>文章中的框架搭建步骤一致，这里就不再赘述。</p><p>在介绍Spring Batch数据输出之前，我们先准备个简单的数据读取源。在cc.mrbird.batch包下新建entity包，然后在该包下新建<code>TestData</code>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String field1;</span><br><span class="line">    <span class="keyword">private</span> String field2;</span><br><span class="line">    <span class="keyword">private</span> String field3;</span><br><span class="line">    <span class="comment">// get,set,toString略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着在cc.mrbird.batch包下新建reader包，然后在该包下创建<code>ItemReaderConfigure</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemReaderConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListItemReader&lt;TestData&gt; <span class="title">simpleReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;TestData&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        TestData testData1 = <span class="keyword">new</span> TestData();</span><br><span class="line">        testData1.setId(<span class="number">1</span>);</span><br><span class="line">        testData1.setField1(<span class="string">"11"</span>);</span><br><span class="line">        testData1.setField2(<span class="string">"12"</span>);</span><br><span class="line">        testData1.setField3(<span class="string">"13"</span>);</span><br><span class="line">        data.add(testData1);</span><br><span class="line">        TestData testData2 = <span class="keyword">new</span> TestData();</span><br><span class="line">        testData2.setId(<span class="number">2</span>);</span><br><span class="line">        testData2.setField1(<span class="string">"21"</span>);</span><br><span class="line">        testData2.setField2(<span class="string">"22"</span>);</span><br><span class="line">        testData2.setField3(<span class="string">"23"</span>);</span><br><span class="line">        data.add(testData2);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItemReader&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面注册了一个ItemReader类型的Bean，后续都用它作为读取数据的来源。</p><h2 id="输出文本数据"><a href="#输出文本数据" class="headerlink" title="输出文本数据"></a>输出文本数据</h2><p>在cc.mrbird.batch包下新建job包，然后在该包下新建<code>FileItemWriterDemo</code>，用于测试Spring Batch输出数据到文本文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileItemWriterDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">fileItemWriterJob</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"fileItemWriterJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .writer(fileItemWriter())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> FlatFileItemWriter&lt;TestData&gt; <span class="title">fileItemWriter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FlatFileItemWriter&lt;TestData&gt; writer = <span class="keyword">new</span> FlatFileItemWriter&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="string">"/Users/mrbird/Desktop/file"</span>);</span><br><span class="line">        Path path = Paths.get(file.getPath());</span><br><span class="line">        <span class="keyword">if</span> (!Files.exists(path)) &#123;</span><br><span class="line">            Files.createFile(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置输出文件路径</span></span><br><span class="line">        writer.setResource(file); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把读到的每个TestData对象转换为JSON字符串</span></span><br><span class="line">        LineAggregator&lt;TestData&gt; aggregator = item -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                <span class="keyword">return</span> mapper.writeValueAsString(item);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        writer.setLineAggregator(aggregator);</span><br><span class="line">        writer.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，Step中的Reader使用的是我们上面创建的<code>simpleReader</code>，文本数据输出使用的是<code>FlatFileItemWriter</code>。<code>fileItemWriter()</code>方法的代码较为简单，这里就不赘述了。</p><p>启动项目后，在<code>/Users/mrbird/Desktop</code>目录下（也就是我的电脑桌面上）会多出个file文件：</p><p><img src="img/QQ20200309-094315@2x.png" alt="QQ20200309-094315@2x"></p><h2 id="输出xml数据"><a href="#输出xml数据" class="headerlink" title="输出xml数据"></a>输出xml数据</h2><p>同样的，xml格式数据输出需要借助spring-oxm框架，在pom中引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在job包下新建<code>XmlFileItemWriterDemo</code>，用于测试Spring Batch输出数据到xml文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlFileItemWriterDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">xmlFileItemWriterJob</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"xmlFileItemWriterJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .writer(xmlFileItemWriter())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> StaxEventItemWriter&lt;TestData&gt; <span class="title">xmlFileItemWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StaxEventItemWriter&lt;TestData&gt; writer = <span class="keyword">new</span> StaxEventItemWriter&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过XStreamMarshaller将TestData转换为xml</span></span><br><span class="line">        XStreamMarshaller marshaller = <span class="keyword">new</span> XStreamMarshaller();</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Class&lt;TestData&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"test"</span>, TestData.class);</span><br><span class="line"></span><br><span class="line">        marshaller.setAliases(map); <span class="comment">// 设置xml标签</span></span><br><span class="line"></span><br><span class="line">        writer.setRootTagName(<span class="string">"tests"</span>); <span class="comment">// 设置根标签</span></span><br><span class="line">        writer.setMarshaller(marshaller);</span><br><span class="line"></span><br><span class="line">        FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="string">"/Users/mrbird/Desktop/file.xml"</span>);</span><br><span class="line">        Path path = Paths.get(file.getPath());</span><br><span class="line">        <span class="keyword">if</span> (!Files.exists(path)) &#123;</span><br><span class="line">            Files.createFile(path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writer.setResource(file); <span class="comment">// 设置目标文件路径</span></span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>xml类型文件输出使用的是<code>StaxEventItemWriter</code>。</p><p>启动项目后，在<code>/Users/mrbird/Desktop</code>目录下会多出个file.xml文件：</p><p><img src="img/QQ20200309-095332@2x.png" alt="QQ20200309-095332@2x"></p><h2 id="输出JSON数据"><a href="#输出JSON数据" class="headerlink" title="输出JSON数据"></a>输出JSON数据</h2><p>在job包下新建<code>JsonFileItemWriterDemo</code>，用于测试Spring Batch输出数据到json文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonFileItemWriterDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">jsonFileItemWriterJob</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"jsonFileItemWriterJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .writer(jsonFileItemWriter())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JsonFileItemWriter&lt;TestData&gt; <span class="title">jsonFileItemWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 文件输出目标地址</span></span><br><span class="line">        FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="string">"/Users/mrbird/Desktop/file.json"</span>);</span><br><span class="line">        Path path = Paths.get(file.getPath());</span><br><span class="line">        <span class="keyword">if</span> (!Files.exists(path)) &#123;</span><br><span class="line">            Files.createFile(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将对象转换为json</span></span><br><span class="line">        JacksonJsonObjectMarshaller&lt;TestData&gt; marshaller = <span class="keyword">new</span> JacksonJsonObjectMarshaller&lt;&gt;();</span><br><span class="line">        JsonFileItemWriter&lt;TestData&gt; writer = <span class="keyword">new</span> JsonFileItemWriter&lt;&gt;(file, marshaller);</span><br><span class="line">        <span class="comment">// 设置别名</span></span><br><span class="line">        writer.setName(<span class="string">"testDatasonFileItemWriter"</span>);</span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json类型文件输出使用的是<code>JsonFileItemWriter</code>。</p><p>启动项目后，在<code>/Users/mrbird/Desktop</code>目录下会多出个file.json文件：</p><p><img src="img/QQ20200309-100359@2x.png" alt="QQ20200309-100359@2x"></p><h2 id="输出数据到数据库"><a href="#输出数据到数据库" class="headerlink" title="输出数据到数据库"></a>输出数据到数据库</h2><p>在job包下新建<code>DatabaseItemWriterDemo</code>，用于测试Spring Batch输出数据到数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseItemWriterDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">datasourceItemWriterJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"datasourceItemWriterJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .writer(dataSourceItemWriter())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemWriter&lt;TestData&gt; <span class="title">dataSourceItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ItemWriter的实现类之一，mysql数据库数据写入使用JdbcBatchItemWriter，</span></span><br><span class="line">        <span class="comment">// 其他实现：MongoItemWriter,Neo4jItemWriter等</span></span><br><span class="line">        JdbcBatchItemWriter&lt;TestData&gt; writer = <span class="keyword">new</span> JdbcBatchItemWriter&lt;&gt;();</span><br><span class="line">        writer.setDataSource(dataSource); <span class="comment">// 设置数据源</span></span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"insert into TEST(id,field1,field2,field3) values (:id,:field1,:field2,:field3)"</span>;</span><br><span class="line">        writer.setSql(sql); <span class="comment">// 设置插入sql脚本</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 映射TestData对象属性到占位符中的属性</span></span><br><span class="line">        BeanPropertyItemSqlParameterSourceProvider&lt;TestData&gt; provider = <span class="keyword">new</span> BeanPropertyItemSqlParameterSourceProvider&lt;&gt;();</span><br><span class="line">        writer.setItemSqlParameterSourceProvider(provider);</span><br><span class="line"></span><br><span class="line">        writer.afterPropertiesSet(); <span class="comment">// 设置一些额外属性</span></span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>MySQL关系型数据数据写入使用的是<code>JdbcBatchItemWriter</code>。在测试之前，先清空springbatch数据库TEST表数据，然后启动项目，启动后，TEST表记录如下所示：</p><p><img src="img/QQ20200309-102006@2x.png" alt="QQ20200309-102006@2x"></p><h2 id="多文本输出"><a href="#多文本输出" class="headerlink" title="多文本输出"></a>多文本输出</h2><p>多文本输出和上一节介绍的多文本数据读取类似，都是需要通过代理来完成。我们模拟个同时输出xml格式和普通文本格式的例子。</p><p>在cc.mrbird.batch包下新建writer包，然后在该包下新建<code>ItemWriterConfigure</code>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemWriterConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FlatFileItemWriter&lt;TestData&gt; <span class="title">fileItemWriter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FlatFileItemWriter&lt;TestData&gt; writer = <span class="keyword">new</span> FlatFileItemWriter&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="string">"/Users/mrbird/Desktop/file"</span>);</span><br><span class="line">        Path path = Paths.get(file.getPath());</span><br><span class="line">        <span class="keyword">if</span> (!Files.exists(path)) &#123;</span><br><span class="line">            Files.createFile(path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writer.setResource(file); <span class="comment">// 设置目标文件路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把读到的每个TestData对象转换为字符串</span></span><br><span class="line">        LineAggregator&lt;TestData&gt; aggregator = item -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                <span class="keyword">return</span> mapper.writeValueAsString(item);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        writer.setLineAggregator(aggregator);</span><br><span class="line">        writer.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StaxEventItemWriter&lt;TestData&gt; <span class="title">xmlFileItemWriter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StaxEventItemWriter&lt;TestData&gt; writer = <span class="keyword">new</span> StaxEventItemWriter&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过XStreamMarshaller将TestData转换为xml</span></span><br><span class="line">        XStreamMarshaller marshaller = <span class="keyword">new</span> XStreamMarshaller();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;TestData&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"test"</span>, TestData.class);</span><br><span class="line"></span><br><span class="line">        marshaller.setAliases(map); <span class="comment">// 设置xml标签</span></span><br><span class="line"></span><br><span class="line">        writer.setRootTagName(<span class="string">"tests"</span>); <span class="comment">// 设置根标签</span></span><br><span class="line">        writer.setMarshaller(marshaller);</span><br><span class="line"></span><br><span class="line">        FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="string">"/Users/mrbird/Desktop/file.xml"</span>);</span><br><span class="line">        Path path = Paths.get(file.getPath());</span><br><span class="line">        <span class="keyword">if</span> (!Files.exists(path)) &#123;</span><br><span class="line">            Files.createFile(path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writer.setResource(file); <span class="comment">// 设置目标文件路径</span></span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的配置类中，配置了<code>FlatFileItemWriter</code>和<code>StaxEventItemWriter</code>类型的ItemWriter Bean，代码步骤和前面介绍的一致。</p><p>然后在job包下新建<code>MultiFileItemWriteDemo</code>，用于测试多文本输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiFileItemWriteDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemStreamWriter&lt;TestData&gt; fileItemWriter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemStreamWriter&lt;TestData&gt; xmlFileItemWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">multiFileItemWriterJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"multiFileItemWriterJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .writer(classifierMultiFileItemWriter())</span><br><span class="line">                .stream(fileItemWriter)</span><br><span class="line">                .stream(xmlFileItemWriter)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据分类，然后分别输出到对应的文件(此时需要将writer注册到ioc容器，否则报</span></span><br><span class="line">    <span class="comment">// WriterNotOpenException: Writer must be open before it can be written to)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ClassifierCompositeItemWriter&lt;TestData&gt; <span class="title">classifierMultiFileItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassifierCompositeItemWriter&lt;TestData&gt; writer = <span class="keyword">new</span> ClassifierCompositeItemWriter&lt;&gt;();</span><br><span class="line">        writer.setClassifier((Classifier&lt;TestData, ItemWriter&lt;? <span class="keyword">super</span> TestData&gt;&gt;) testData -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// id能被2整除则输出到普通文本，否则输出到xml文本</span></span><br><span class="line">                <span class="keyword">return</span> testData.getId() % <span class="number">2</span> == <span class="number">0</span> ? fileItemWriter : xmlFileItemWriter;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>ClassifierCompositeItemWriter</code>可以设置不同条件下使用不同的ItemWriter输出数据，此外在Step中，还需通过<code>StepBuilderFactory</code>的<code>stream()</code>方法传入使用到的ItemWriter（这里需要注意的是，注入的时候，类型应选择ItemStreamWriter）。</p><p>在启动项目前，先删掉<code>/Users/mrbird/Desktop</code>目录下的文件。删掉后，启动项目，结果如下：</p><p><img src="img/QQ20200309-110058@2x.png" alt="QQ20200309-110058@2x"></p><p><img src="img/QQ20200309-110519@2x.png" alt="QQ20200309-110519@2x"></p><p>如果不想用分类，希望所有数据都输出到对应格式的文本中，则可以使用<code>CompositeItemWriter</code>作为代理输出，修改<code>MultiFileItemWriteDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiFileItemWriteDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListItemReader&lt;TestData&gt; simpleReader;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemStreamWriter&lt;TestData&gt; fileItemWriter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemStreamWriter&lt;TestData&gt; xmlFileItemWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">multiFileItemWriterJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"multiFileItemWriterJob2"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(simpleReader)</span><br><span class="line">                .writer(multiFileItemWriter())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出数据到多个文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CompositeItemWriter&lt;TestData&gt; <span class="title">multiFileItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用CompositeItemWriter代理</span></span><br><span class="line">        CompositeItemWriter&lt;TestData&gt; writer = <span class="keyword">new</span> CompositeItemWriter&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置具体写代理</span></span><br><span class="line">        writer.setDelegates(Arrays.asList(fileItemWriter, xmlFileItemWriter));</span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在启动项目前，先删掉<code>/Users/mrbird/Desktop</code>目录下的文件。删掉后，启动项目，结果如下：</p><p><img src="img/QQ20200309-111155@2x.png" alt="QQ20200309-111155@2x"></p><blockquote><p>本节源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/69.spring-batch-itemwriter" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/69.spring-batch-itemwriter</a>。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Spring Batch输出数据通过ItemWriter接口的实现类来完成，包括FlatFileItemWriter文本数据输出、StaxEventItemWriter XML文件数据输出、JsonItemWriter JSON文件数据输出、JdbcBatchItemWriter数据库数据插入等实现，更多可用的实现可以参考：&lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.2.x/reference/html/appendix.html#itemWritersAppendix&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.spring.io/spring-batch/docs/4.2.x/reference/html/appendix.html#itemWritersAppendix&lt;/a&gt;，本文只介绍这四种比较常用的输出数据方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Spring Batch" scheme="http://mrbird.cc/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch读取数据</title>
    <link href="http://mrbird.cc/Spring-Batch%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE.html"/>
    <id>http://mrbird.cc/Spring-Batch读取数据.html</id>
    <published>2020-03-07T03:54:13.000Z</published>
    <updated>2020-03-12T03:33:33.735Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>Spring Batch读取数据通过ItemReader接口的实现类来完成，包括FlatFileItemReader文本数据读取、StaxEventItemReader XML文件数据读取、JsonItemReader JSON文件数据读取、JdbcPagingItemReader数据库分页数据读取等实现，更多可用的实现可以参考：<a href="https://docs.spring.io/spring-batch/docs/4.2.x/reference/html/appendix.html#itemReadersAppendix" target="_blank" rel="noopener">https://docs.spring.io/spring-batch/docs/4.2.x/reference/html/appendix.html#itemReadersAppendix</a>，本文只介绍这四种比较常用的读取数据方式。</p><a id="more"></a><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>新建一个Spring Boot项目，版本为2.2.4.RELEASE，artifactId为spring-batch-itemreader，项目结构如下图所示：</p><p><img src="img/QQ20200307-104004@2x.png" alt="QQ20200307-104004@2x"></p><p>剩下的数据库层的准备，项目配置，依赖引入和<a href="/Spring-Batch入门.html">Spring Batch入门</a>文章中的框架搭建步骤一致，这里就不再赘述。</p><h2 id="简单数据读取"><a href="#简单数据读取" class="headerlink" title="简单数据读取"></a>简单数据读取</h2><p>前面提到，Spring Batch读取数据是通过ItemReader接口的实现类来完成的，所以我们可以自定义一个ItemReader的实现类，实现简单数据的读取。</p><p>在cc.mrbird.batch包下新建reader包，然后在该包下新建ItemReader接口的实现类<code>MySimpleIteamReader</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySimpleIteamReader</span> <span class="keyword">implements</span> <span class="title">ItemReader</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;String&gt; iterator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySimpleIteamReader</span><span class="params">(List&lt;String&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iterator = data.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据一个接着一个读取</span></span><br><span class="line">        <span class="keyword">return</span> iterator.hasNext() ? iterator.next() : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>泛型指定读取数据的格式，这里读取的是String类型的List，<code>read()</code>方法的实现也很简单，就是遍历集合数据。</p><p>接着在cc.mrbird.batch包下新建job包，然后在该包下新建<code>MySimpleItemReaderDemo</code>类，用于测试我们定义的<code>MySimpleIteamReader</code>，<code>MySimpleItemReaderDemo</code>类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySimpleItemReaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">mySimpleItemReaderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"mySimpleItemReaderJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;String, String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(mySimpleItemReader())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))  <span class="comment">// 简单输出，后面再详细介绍writer</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemReader&lt;String&gt; <span class="title">mySimpleItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; data = Arrays.asList(<span class="string">"java"</span>, <span class="string">"c++"</span>, <span class="string">"javascript"</span>, <span class="string">"python"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySimpleIteamReader(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们通过<code>mySimpleItemReader()</code>方法创建了一个<code>MySimpleIteamReader</code>，并且传入了List数据。上面代码大体和上一节中介绍的差不多，最主要的区别就是Step的创建过程稍有不同。</p><p>在<code>MySimpleItemReaderDemo</code>类中，我们通过<code>StepBuilderFactory</code>创建步骤Step，不过不再是使用<code>tasklet()</code>方法创建，而是使用<code>chunk()</code>方法。chunk字面上的意思是“块”的意思，可以简单理解为数据块，泛型<code>&lt;String, String&gt;</code>用于指定读取的数据和输出的数据类型，构造器入参指定了数据块的大小，比如指定为2时表示每当读取2组数据后做一次数据输出处理。接着<code>reader()</code>方法指定读取数据的方式，该方法接收<code>ItemReader</code>的实现类，这里使用的是我们自定义的<code>MySimpleIteamReader</code>。<code>writer()</code>方法指定数据输出方式，因为这块不是本文的重点，所以先简单遍历输出即可。</p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-03-07 11:17:32.303  INFO 28381 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=mySimpleItemReaderJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-07 11:17:32.369  INFO 28381 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">java</span><br><span class="line">c++</span><br><span class="line">javascript</span><br><span class="line">python</span><br><span class="line">2020-03-07 11:17:32.428  INFO 28381 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 59ms</span><br><span class="line">2020-03-07 11:17:32.451  INFO 28381 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=mySimpleItemReaderJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 125ms</span><br></pre></td></tr></table></figure><p></p><h2 id="文本数据读取"><a href="#文本数据读取" class="headerlink" title="文本数据读取"></a>文本数据读取</h2><p>Spring Batch读取文本类型数据可以通过<code>FlatFileItemReader</code>实现，在演示怎么使用之前，我们先准备好数据文件。</p><p>在resources目录下新建file文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 演示文件数据读取</span><br><span class="line">1,11,12,13</span><br><span class="line">2,21,22,23</span><br><span class="line">3,31,32,33</span><br><span class="line">4,41,42,43</span><br><span class="line">5,51,52,53</span><br><span class="line">6,61,62,63</span><br></pre></td></tr></table></figure><p></p><p>file的数据是一行一行以逗号分隔的数据（在批处理业务中，文本类型的数据文件一般都是有一定规律的）。在文本数据读取的过程中，我们需要将读取的数据转换为POJO对象存储，所以我们需要创建一个与之对应的POJO对象。在cc.mrbird.batch包下新建entity包，然后在该包下新建<code>TestData</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String field1;</span><br><span class="line">    <span class="keyword">private</span> String field2;</span><br><span class="line">    <span class="keyword">private</span> String field3;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get,set,toString略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>因为file文本中的一行数据经过逗号分隔后为1、11、12、13，所以我们创建的与之对应的POJO TestData包含4个属性id、field1、field2和field3。</p><p>接着在job包下新建<code>FileItemReaderDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileItemReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 任务创建工厂</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="comment">// 步骤创建工厂</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">fileItemReaderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"fileItemReaderJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(fileItemReader())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemReader&lt;TestData&gt; <span class="title">fileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FlatFileItemReader&lt;TestData&gt; reader = <span class="keyword">new</span> FlatFileItemReader&lt;&gt;();</span><br><span class="line">        reader.setResource(<span class="keyword">new</span> ClassPathResource(<span class="string">"file"</span>)); <span class="comment">// 设置文件资源地址</span></span><br><span class="line">        reader.setLinesToSkip(<span class="number">1</span>); <span class="comment">// 忽略第一行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// AbstractLineTokenizer的三个实现类之一，以固定分隔符处理行数据读取,</span></span><br><span class="line">        <span class="comment">// 使用默认构造器的时候，使用逗号作为分隔符，也可以通过有参构造器来指定分隔符</span></span><br><span class="line">        DelimitedLineTokenizer tokenizer = <span class="keyword">new</span> DelimitedLineTokenizer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置属性名，类似于表头</span></span><br><span class="line">        tokenizer.setNames(<span class="string">"id"</span>, <span class="string">"field1"</span>, <span class="string">"field2"</span>, <span class="string">"field3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将每行数据转换为TestData对象</span></span><br><span class="line">        DefaultLineMapper&lt;TestData&gt; mapper = <span class="keyword">new</span> DefaultLineMapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置LineTokenizer</span></span><br><span class="line">        mapper.setLineTokenizer(tokenizer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置映射方式，即读取到的文本怎么转换为对应的POJO</span></span><br><span class="line">        mapper.setFieldSetMapper(fieldSet -&gt; &#123;</span><br><span class="line">            TestData data = <span class="keyword">new</span> TestData();</span><br><span class="line">            data.setId(fieldSet.readInt(<span class="string">"id"</span>));</span><br><span class="line">            data.setField1(fieldSet.readString(<span class="string">"field1"</span>));</span><br><span class="line">            data.setField2(fieldSet.readString(<span class="string">"field2"</span>));</span><br><span class="line">            data.setField3(fieldSet.readString(<span class="string">"field3"</span>));</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;);</span><br><span class="line">        reader.setLineMapper(mapper);</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们在<code>fileItemReader()</code>方法里编写了具体的文本数据读取代码，过程参考注释即可。<code>DelimitedLineTokenizer</code>分隔符行处理器的默认构造器源码如下所示：</p><p><img src="img/QQ20200307-115347@2x.png" alt="QQ20200307-115347@2x"></p><p>常量<code>DELIMITER_COMMA</code>的值为<code>public static final String DELIMITER_COMMA = &quot;,&quot;;</code>，假如我们的数据并不是用逗号分隔，而是用<code>|</code>等字符分隔的话，可以使用它的有参构造器指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DelimitedLineTokenizer tokenizer = <span class="keyword">new</span> DelimitedLineTokenizer(<span class="string">"|"</span>);</span><br></pre></td></tr></table></figure><p><code>DelimitedLineTokenizer</code>是<code>AbstractLineTokenizer</code>三个实现类之一：</p><p><img src="img/QQ20200307-115730@2x.png" alt="QQ20200307-115730@2x"></p><p>顾名思义，<code>FixedLengthTokenizer</code>通过指定的固定长度来截取数据，<code>RegexLineTokenizer</code>通过正则表达式来匹配数据，这里就不演示了，有兴趣的可以自己玩玩。</p><p>编写好<code>FileItemReaderDemo</code>后，启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-03-07 12:06:11.876  INFO 29042 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=fileItemReaderJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-07 12:06:11.937  INFO 29042 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">TestData&#123;id=1, field1=&apos;11&apos;, field2=&apos;12&apos;, field3=&apos;13&apos;&#125;</span><br><span class="line">TestData&#123;id=2, field1=&apos;21&apos;, field2=&apos;22&apos;, field3=&apos;23&apos;&#125;</span><br><span class="line">TestData&#123;id=3, field1=&apos;31&apos;, field2=&apos;32&apos;, field3=&apos;33&apos;&#125;</span><br><span class="line">TestData&#123;id=4, field1=&apos;41&apos;, field2=&apos;42&apos;, field3=&apos;43&apos;&#125;</span><br><span class="line">TestData&#123;id=5, field1=&apos;51&apos;, field2=&apos;52&apos;, field3=&apos;53&apos;&#125;</span><br><span class="line">TestData&#123;id=6, field1=&apos;61&apos;, field2=&apos;62&apos;, field3=&apos;63&apos;&#125;</span><br><span class="line">2020-03-07 12:06:12.020  INFO 29042 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 83ms</span><br><span class="line">2020-03-07 12:06:12.044  INFO 29042 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=fileItemReaderJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 146ms</span><br></pre></td></tr></table></figure><p></p><h2 id="数据库数据读取"><a href="#数据库数据读取" class="headerlink" title="数据库数据读取"></a>数据库数据读取</h2><p>在演示从数据库中读取数据之前，我们先准备好测试数据。在springbatch数据库中新建一张TEST表，SQL语句如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for TEST</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`TEST`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`TEST`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'ID'</span>,</span><br><span class="line">  <span class="string">`field1`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'字段一'</span>,</span><br><span class="line">  <span class="string">`field2`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'字段二'</span>,</span><br><span class="line">  <span class="string">`field3`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'字段三'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of TEST</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`TEST`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'11'</span>, <span class="string">'12'</span>, <span class="string">'13'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`TEST`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'21'</span>, <span class="string">'22'</span>, <span class="string">'23'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`TEST`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'31'</span>, <span class="string">'32'</span>, <span class="string">'33'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`TEST`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'41'</span>, <span class="string">'42'</span>, <span class="string">'43'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`TEST`</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'51'</span>, <span class="string">'52'</span>, <span class="string">'53'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`TEST`</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">'61'</span>, <span class="string">'62'</span>, <span class="string">'63'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p></p><p>TEST表的字段和上面创建的<code>TestData</code>实体类一致。</p><p>然后在job包下新建<code>DataSourceItemReaderDemo</code>类，测试从数据库中读取数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceItemReaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="comment">// 注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">dataSourceItemReaderJob</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"dataSourceItemReaderJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(dataSourceItemReader())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemReader&lt;TestData&gt; <span class="title">dataSourceItemReader</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        JdbcPagingItemReader&lt;TestData&gt; reader = <span class="keyword">new</span> JdbcPagingItemReader&lt;&gt;();</span><br><span class="line">        reader.setDataSource(dataSource); <span class="comment">// 设置数据源</span></span><br><span class="line">        reader.setFetchSize(<span class="number">5</span>); <span class="comment">// 每次取多少条记录</span></span><br><span class="line">        reader.setPageSize(<span class="number">5</span>); <span class="comment">// 设置每页数据量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定sql查询语句 select id,field1,field2,field3 from TEST</span></span><br><span class="line">        MySqlPagingQueryProvider provider = <span class="keyword">new</span> MySqlPagingQueryProvider();</span><br><span class="line">        provider.setSelectClause(<span class="string">"id,field1,field2,field3"</span>); <span class="comment">//设置查询字段</span></span><br><span class="line">        provider.setFromClause(<span class="string">"from TEST"</span>); <span class="comment">// 设置从哪张表查询</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将读取到的数据转换为TestData对象</span></span><br><span class="line">        reader.setRowMapper((resultSet, rowNum) -&gt; &#123;</span><br><span class="line">            TestData data = <span class="keyword">new</span> TestData();</span><br><span class="line">            data.setId(resultSet.getInt(<span class="number">1</span>));</span><br><span class="line">            data.setField1(resultSet.getString(<span class="number">2</span>)); <span class="comment">// 读取第一个字段，类型为String</span></span><br><span class="line">            data.setField2(resultSet.getString(<span class="number">3</span>));</span><br><span class="line">            data.setField3(resultSet.getString(<span class="number">4</span>));</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Order&gt; sort = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        sort.put(<span class="string">"id"</span>, Order.ASCENDING);</span><br><span class="line">        provider.setSortKeys(sort); <span class="comment">// 设置排序,通过id 升序</span></span><br><span class="line"></span><br><span class="line">        reader.setQueryProvider(provider);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置namedParameterJdbcTemplate等属性</span></span><br><span class="line">        reader.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dataSourceItemReader()</code>方法中的主要步骤就是：通过<code>JdbcPagingItemReader</code>设置对应的数据源，然后设置数据量、获取数据的sql语句、排序规则和查询结果与POJO的映射规则等。方法末尾之所以需要调用<code>JdbcPagingItemReader</code>的<code>afterPropertiesSet()</code>方法是因为需要设置JDBC模板（<code>afterPropertiesSet()</code>方法源码）：</p><p><img src="img/QQ20200307-155834@2x.png" alt="QQ20200307-155834@2x"></p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-03-07 16:01:05.366  INFO 30264 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=dataSourceItemReaderJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-07 16:01:05.420  INFO 30264 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">TestData&#123;id=1, field1=&apos;11&apos;, field2=&apos;12&apos;, field3=&apos;13&apos;&#125;</span><br><span class="line">TestData&#123;id=2, field1=&apos;21&apos;, field2=&apos;22&apos;, field3=&apos;23&apos;&#125;</span><br><span class="line">TestData&#123;id=3, field1=&apos;31&apos;, field2=&apos;32&apos;, field3=&apos;33&apos;&#125;</span><br><span class="line">TestData&#123;id=4, field1=&apos;41&apos;, field2=&apos;42&apos;, field3=&apos;43&apos;&#125;</span><br><span class="line">TestData&#123;id=5, field1=&apos;51&apos;, field2=&apos;52&apos;, field3=&apos;53&apos;&#125;</span><br><span class="line">TestData&#123;id=6, field1=&apos;61&apos;, field2=&apos;62&apos;, field3=&apos;63&apos;&#125;</span><br><span class="line">2020-03-07 16:01:05.512  INFO 30264 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 92ms</span><br><span class="line">2020-03-07 16:01:05.534  INFO 30264 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=dataSourceItemReaderJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 147ms</span><br></pre></td></tr></table></figure><p></p><h2 id="XML数据读取"><a href="#XML数据读取" class="headerlink" title="XML数据读取"></a>XML数据读取</h2><p>Spring Batch借助Spring OXM可以轻松地实现xml格式数据文件读取。在resources目录下新建file.xml，内容如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field1</span>&gt;</span>11<span class="tag">&lt;/<span class="name">field1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field2</span>&gt;</span>12<span class="tag">&lt;/<span class="name">field2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field3</span>&gt;</span>13<span class="tag">&lt;/<span class="name">field3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field1</span>&gt;</span>21<span class="tag">&lt;/<span class="name">field1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field2</span>&gt;</span>22<span class="tag">&lt;/<span class="name">field2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field3</span>&gt;</span>23<span class="tag">&lt;/<span class="name">field3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field1</span>&gt;</span>31<span class="tag">&lt;/<span class="name">field1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field2</span>&gt;</span>32<span class="tag">&lt;/<span class="name">field2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field3</span>&gt;</span>33<span class="tag">&lt;/<span class="name">field3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field1</span>&gt;</span>41<span class="tag">&lt;/<span class="name">field1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field2</span>&gt;</span>42<span class="tag">&lt;/<span class="name">field2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field3</span>&gt;</span>43<span class="tag">&lt;/<span class="name">field3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>5<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field1</span>&gt;</span>51<span class="tag">&lt;/<span class="name">field1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field2</span>&gt;</span>52<span class="tag">&lt;/<span class="name">field2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field3</span>&gt;</span>53<span class="tag">&lt;/<span class="name">field3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>6<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field1</span>&gt;</span>61<span class="tag">&lt;/<span class="name">field1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field2</span>&gt;</span>62<span class="tag">&lt;/<span class="name">field2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field3</span>&gt;</span>63<span class="tag">&lt;/<span class="name">field3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tests</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>xml文件内容由一组一组的<code>&lt;test&gt;&lt;/test&gt;</code>标签组成，<code>&lt;test&gt;</code>标签又包含四组子标签，标签名称和<code>TestData</code>实体类属性一一对应。</p><p>准备好xml文件后，我们在pom中引入spring-oxm依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>接着在job包下新建<code>XmlFileItemReaderDemo</code>，演示xml文件数据获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlFileItemReaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">xmlFileItemReaderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"xmlFileItemReaderJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(xmlFileItemReader())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemReader&lt;TestData&gt; <span class="title">xmlFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StaxEventItemReader&lt;TestData&gt; reader = <span class="keyword">new</span> StaxEventItemReader&lt;&gt;();</span><br><span class="line">        reader.setResource(<span class="keyword">new</span> ClassPathResource(<span class="string">"file.xml"</span>)); <span class="comment">// 设置xml文件源</span></span><br><span class="line">        reader.setFragmentRootElementName(<span class="string">"test"</span>); <span class="comment">// 指定xml文件的根标签</span></span><br><span class="line">        <span class="comment">// 将xml数据转换为TestData对象</span></span><br><span class="line">        XStreamMarshaller marshaller = <span class="keyword">new</span> XStreamMarshaller();</span><br><span class="line">        <span class="comment">// 指定需要转换的目标数据类型</span></span><br><span class="line">        Map&lt;String, Class&lt;TestData&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"test"</span>, TestData.class);</span><br><span class="line">        marshaller.setAliases(map);</span><br><span class="line"></span><br><span class="line">        reader.setUnmarshaller(marshaller);</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在<code>xmlFileItemReader()</code>方法中，我们通过<code>StaxEventItemReader</code>读取xml文件，代码较简单，看注释即可。</p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">020-03-07 16:23:47.775  INFO 30450 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=xmlFileItemReaderJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-07 16:23:47.820  INFO 30450 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">TestData&#123;id=1, field1=&apos;11&apos;, field2=&apos;12&apos;, field3=&apos;13&apos;&#125;</span><br><span class="line">TestData&#123;id=2, field1=&apos;21&apos;, field2=&apos;22&apos;, field3=&apos;23&apos;&#125;</span><br><span class="line">TestData&#123;id=3, field1=&apos;31&apos;, field2=&apos;32&apos;, field3=&apos;33&apos;&#125;</span><br><span class="line">TestData&#123;id=4, field1=&apos;41&apos;, field2=&apos;42&apos;, field3=&apos;43&apos;&#125;</span><br><span class="line">TestData&#123;id=5, field1=&apos;51&apos;, field2=&apos;52&apos;, field3=&apos;53&apos;&#125;</span><br><span class="line">TestData&#123;id=6, field1=&apos;61&apos;, field2=&apos;62&apos;, field3=&apos;63&apos;&#125;</span><br><span class="line">2020-03-07 16:23:47.961  INFO 30450 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 140ms</span><br><span class="line">2020-03-07 16:23:47.984  INFO 30450 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=xmlFileItemReaderJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 200ms</span><br></pre></td></tr></table></figure><p></p><h2 id="JSON数据读取"><a href="#JSON数据读取" class="headerlink" title="JSON数据读取"></a>JSON数据读取</h2><p>在resources目录下新建file.json文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"field1"</span>: <span class="string">"11"</span>,</span><br><span class="line">    <span class="attr">"field2"</span>: <span class="string">"12"</span>,</span><br><span class="line">    <span class="attr">"field3"</span>: <span class="string">"13"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"field1"</span>: <span class="string">"21"</span>,</span><br><span class="line">    <span class="attr">"field2"</span>: <span class="string">"22"</span>,</span><br><span class="line">    <span class="attr">"field3"</span>: <span class="string">"23"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"field1"</span>: <span class="string">"31"</span>,</span><br><span class="line">    <span class="attr">"field2"</span>: <span class="string">"32"</span>,</span><br><span class="line">    <span class="attr">"field3"</span>: <span class="string">"33"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p></p><p>JSON对象属性和TestData对象属性一一对应。在job包下新建<code>JSONFileItemReaderDemo</code>，用于测试JSON文件数据读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONFileItemReaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">jsonFileItemReaderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"jsonFileItemReaderJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(jsonItemReader())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemReader&lt;TestData&gt; <span class="title">jsonItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置json文件地址</span></span><br><span class="line">        ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"file.json"</span>);</span><br><span class="line">        <span class="comment">// 设置json文件转换的目标对象类型</span></span><br><span class="line">        JacksonJsonObjectReader&lt;TestData&gt; jacksonJsonObjectReader = <span class="keyword">new</span> JacksonJsonObjectReader&lt;&gt;(TestData.class);</span><br><span class="line">        JsonItemReader&lt;TestData&gt; reader = <span class="keyword">new</span> JsonItemReader&lt;&gt;(resource, jacksonJsonObjectReader);</span><br><span class="line">        <span class="comment">// 给reader设置一个别名</span></span><br><span class="line">        reader.setName(<span class="string">"testDataJsonItemReader"</span>);</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动项目，控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2020-03-07 16:40:52.508  INFO 30599 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=jsonFileItemReaderJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-07 16:40:52.554  INFO 30599 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">TestData&#123;id=1, field1=&apos;11&apos;, field2=&apos;12&apos;, field3=&apos;13&apos;&#125;</span><br><span class="line">TestData&#123;id=2, field1=&apos;21&apos;, field2=&apos;22&apos;, field3=&apos;23&apos;&#125;</span><br><span class="line">TestData&#123;id=3, field1=&apos;31&apos;, field2=&apos;32&apos;, field3=&apos;33&apos;&#125;</span><br><span class="line">2020-03-07 16:40:52.622  INFO 30599 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 67ms</span><br><span class="line">2020-03-07 16:40:52.642  INFO 30599 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=jsonFileItemReaderJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 124ms</span><br></pre></td></tr></table></figure><p></p><h2 id="多文本数据读取"><a href="#多文本数据读取" class="headerlink" title="多文本数据读取"></a>多文本数据读取</h2><p>多文本的数据读取本质还是单文件数据读取，区别就是多文件读取需要在单文件读取的方式上设置一层代理。</p><p>在resources目录下新建两个文件file1和file2，file1内容如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 演示文件数据读取</span><br><span class="line">1,11,12,13</span><br><span class="line">2,21,22,23</span><br><span class="line">3,31,32,33</span><br><span class="line">4,41,42,43</span><br><span class="line">5,51,52,53</span><br><span class="line">6,61,62,63</span><br></pre></td></tr></table></figure><p></p><p>file2内容如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 演示文件数据读取</span><br><span class="line">7,71,72,73</span><br><span class="line">8,81,82,83</span><br></pre></td></tr></table></figure><p></p><p>然后在job包下新建<code>MultiFileIteamReaderDemo</code>，演示多文件数据读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiFileIteamReaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">multiFileItemReaderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"multiFileItemReaderJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .&lt;TestData, TestData&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(multiFileItemReader())</span><br><span class="line">                .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemReader&lt;TestData&gt; <span class="title">multiFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MultiResourceItemReader&lt;TestData&gt; reader = <span class="keyword">new</span> MultiResourceItemReader&lt;&gt;();</span><br><span class="line">        reader.setDelegate(fileItemReader()); <span class="comment">// 设置文件读取代理，方法可以使用前面文件读取中的例子</span></span><br><span class="line"></span><br><span class="line">        Resource[] resources = <span class="keyword">new</span> Resource[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ClassPathResource(<span class="string">"file1"</span>),</span><br><span class="line">                <span class="keyword">new</span> ClassPathResource(<span class="string">"file2"</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        reader.setResources(resources); <span class="comment">// 设置多文件源</span></span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> FlatFileItemReader&lt;TestData&gt; <span class="title">fileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FlatFileItemReader&lt;TestData&gt; reader = <span class="keyword">new</span> FlatFileItemReader&lt;&gt;();</span><br><span class="line">        reader.setLinesToSkip(<span class="number">1</span>); <span class="comment">// 忽略第一行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// AbstractLineTokenizer的三个实现类之一，以固定分隔符处理行数据读取,</span></span><br><span class="line">        <span class="comment">// 使用默认构造器的时候，使用逗号作为分隔符，也可以通过有参构造器来指定分隔符</span></span><br><span class="line">        DelimitedLineTokenizer tokenizer = <span class="keyword">new</span> DelimitedLineTokenizer();</span><br><span class="line">        <span class="comment">// 设置属姓名，类似于表头</span></span><br><span class="line">        tokenizer.setNames(<span class="string">"id"</span>, <span class="string">"field1"</span>, <span class="string">"field2"</span>, <span class="string">"field3"</span>);</span><br><span class="line">        <span class="comment">// 将每行数据转换为TestData对象</span></span><br><span class="line">        DefaultLineMapper&lt;TestData&gt; mapper = <span class="keyword">new</span> DefaultLineMapper&lt;&gt;();</span><br><span class="line">        mapper.setLineTokenizer(tokenizer);</span><br><span class="line">        <span class="comment">// 设置映射方式</span></span><br><span class="line">        mapper.setFieldSetMapper(fieldSet -&gt; &#123;</span><br><span class="line">            TestData data = <span class="keyword">new</span> TestData();</span><br><span class="line">            data.setId(fieldSet.readInt(<span class="string">"id"</span>));</span><br><span class="line">            data.setField1(fieldSet.readString(<span class="string">"field1"</span>));</span><br><span class="line">            data.setField2(fieldSet.readString(<span class="string">"field2"</span>));</span><br><span class="line">            data.setField3(fieldSet.readString(<span class="string">"field3"</span>));</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        reader.setLineMapper(mapper);</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中<code>fileItemReader()</code>方法在<strong>文本数据读取</strong>中介绍过了，多文件读取的关键在于<code>multiFileItemReader()</code>方法，该方法通过<code>MultiResourceItemReader</code>对象设置了多个文件的目标地址，并且将单文件的读取方式设置为代理。</p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-03-07 16:55:24.480  INFO 30749 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=multiFileItemReaderJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-07 16:55:24.536  INFO 30749 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">TestData&#123;id=1, field1=&apos;11&apos;, field2=&apos;12&apos;, field3=&apos;13&apos;&#125;</span><br><span class="line">TestData&#123;id=2, field1=&apos;21&apos;, field2=&apos;22&apos;, field3=&apos;23&apos;&#125;</span><br><span class="line">TestData&#123;id=3, field1=&apos;31&apos;, field2=&apos;32&apos;, field3=&apos;33&apos;&#125;</span><br><span class="line">TestData&#123;id=4, field1=&apos;41&apos;, field2=&apos;42&apos;, field3=&apos;43&apos;&#125;</span><br><span class="line">TestData&#123;id=5, field1=&apos;51&apos;, field2=&apos;52&apos;, field3=&apos;53&apos;&#125;</span><br><span class="line">TestData&#123;id=6, field1=&apos;61&apos;, field2=&apos;62&apos;, field3=&apos;63&apos;&#125;</span><br><span class="line">TestData&#123;id=7, field1=&apos;71&apos;, field2=&apos;72&apos;, field3=&apos;73&apos;&#125;</span><br><span class="line">TestData&#123;id=8, field1=&apos;81&apos;, field2=&apos;82&apos;, field3=&apos;83&apos;&#125;</span><br><span class="line">2020-03-07 16:55:24.617  INFO 30749 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 81ms</span><br><span class="line">2020-03-07 16:55:24.643  INFO 30749 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=multiFileItemReaderJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 153ms</span><br></pre></td></tr></table></figure><p></p><blockquote><p>本节源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/68.spring-batch-itemreader" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/68.spring-batch-itemreader</a>。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Spring Batch读取数据通过ItemReader接口的实现类来完成，包括FlatFileItemReader文本数据读取、StaxEventItemReader XML文件数据读取、JsonItemReader JSON文件数据读取、JdbcPagingItemReader数据库分页数据读取等实现，更多可用的实现可以参考：&lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.2.x/reference/html/appendix.html#itemReadersAppendix&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.spring.io/spring-batch/docs/4.2.x/reference/html/appendix.html#itemReadersAppendix&lt;/a&gt;，本文只介绍这四种比较常用的读取数据方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Spring Batch" scheme="http://mrbird.cc/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch入门</title>
    <link href="http://mrbird.cc/Spring-Batch%E5%85%A5%E9%97%A8.html"/>
    <id>http://mrbird.cc/Spring-Batch入门.html</id>
    <published>2020-03-06T03:53:53.000Z</published>
    <updated>2020-03-12T03:33:09.813Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>企业中经常会有需要批处理才能完成的业务操作，比如：自动化地处理大批量复杂的数据，如月结计算；重复性地处理大批量数据，如费率计算；充当内部系统和外部系统的数据纽带，中间需要对数据进行格式化，校验，转换处理等。</p><p>Spring Batch是一个轻量级但功能又十分全面的批处理框架，本节我们将通过一些简单的例子来入门Spring Batch。</p><a id="more"></a><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>新建一个Spring Boot项目，版本为2.2.4.RELEASE，artifactId为spring-batch-start，项目结构如下图所示：</p><p><img src="img/QQ20200306-095608@2x.png" alt="QQ20200306-095608@2x"></p><p>然后在pom中引入Spring Batch、MySQL和JDBC依赖，引入后pom内容如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-batch-start<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-batch-start<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-batch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在编写代码之前，我们先来简单了解下Spring Batch的组成：</p><p><img src="img/QQ20200306-095955@2x.png" alt="QQ20200306-095955@2x"></p><p>Spring Batch里最基本的单元就是任务Job，一个Job由若干个步骤Step组成。任务启动器Job Launcher负责运行Job，任务存储仓库Job Repository存储着Job的执行状态，参数和日志等信息。Job处理任务又可以分为三大类：数据读取Item Reader、数据中间处理Item Processor和数据输出Item Writer。</p><p>任务存储仓库可以是关系型数据库MySQL，非关系型数据库MongoDB或者直接存储在内存中，本篇使用的是MySQL作为任务存储仓库。</p><p>新建一个名称为springbatch的MySQL数据库，然后导入org.springframework.batch.core目录下的schema-mysql.sql文件：</p><p><img src="img/QQ20200306-102358@2x.png" alt="QQ20200306-102358@2x"> <img src="img/QQ20200306-102828@2x.png" alt="QQ20200306-102828@2x"></p><p>导入后，库表如下图所示：</p><p><img src="img/QQ20200306-102603@2x.png" alt="QQ20200306-102603@2x"></p><p>然后在项目的配置文件application.yml里添加MySQL相关配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/springbatch</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p></p><p>接着在Spring Boot的入口类上添加<code>@EnableBatchProcessing</code>注解，表示开启Spring Batch批处理功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBatchStartApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBatchStartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>至此，基本框架搭建好了，下面开始配置一个简单的任务。</p><h2 id="编写第一个任务"><a href="#编写第一个任务" class="headerlink" title="编写第一个任务"></a>编写第一个任务</h2><p>在cc.mrbird.batch目录下新建job包，然后在该包下新建一个FirstJobDemo类，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">firstJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"firstJob"</span>)</span><br><span class="line">                .start(step())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step"</span>)</span><br><span class="line">                .tasklet((contribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤...."</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们注入了<code>JobBuilderFactory</code>任务创建工厂和<code>StepBuilderFactory</code>步骤创建工厂，分别用于创建任务Job和步骤Step。<code>JobBuilderFactory</code>的<code>get</code>方法用于创建一个指定名称的任务，<code>start</code>方法指定任务的开始步骤，步骤通过<code>StepBuilderFactory</code>构建。</p><p>步骤Step由若干个小任务Tasklet组成，所以我们通过<code>tasklet</code>方法创建。<code>tasklet</code>方法接收一个<code>Tasklet</code>类型参数，<code>Tasklet</code>是一个函数是接口，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tasklet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>所以我们可以使用lambda表达式创建一个匿名实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(contribution, chunkContext) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"执行步骤...."</span>);</span><br><span class="line">    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>该匿名实现必须返回一个明确的执行状态，这里返回<code>RepeatStatus.FINISHED</code>表示该小任务执行成功，正常结束。</p><p>此外，需要注意的是，我们配置的任务Job必须注册到Spring IOC容器中，并且任务的名称和步骤的名称组成唯一。比如上面的例子，我们的任务名称为firstJob，步骤的名称为step，如果存在别的任务和步骤组合也叫这个名称的话，则会执行失败。</p><p>启动项目，控制台打印日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">2020-03-06 11:01:11.785  INFO 17324 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=firstJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-06 11:01:11.846  INFO 17324 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step]</span><br><span class="line">执行步骤....</span><br><span class="line">2020-03-06 11:01:11.886  INFO 17324 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step] executed in 40ms</span><br><span class="line">2020-03-06 11:01:11.909  INFO 17324 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=firstJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 101ms</span><br></pre></td></tr></table></figure><p></p><p>可以看到，任务成功执行了，数据库的库表也将记录相关运行日志。</p><div class="note danger">重新启动项目，控制台并不会再次打印出任务执行日志，因为Job名称和 Step名称组成唯一，执行完的不可重复的任务，不会再次执行。</div><h2 id="多步骤任务"><a href="#多步骤任务" class="headerlink" title="多步骤任务"></a>多步骤任务</h2><p>一个复杂的任务一般包含多个步骤，下面举个多步骤任务的例子。在job包下新建<code>MultiStepJobDemo</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiStepJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">multiStepJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"multiStepJob"</span>)</span><br><span class="line">                .start(step1())</span><br><span class="line">                .next(step2())</span><br><span class="line">                .next(step3())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step1"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤一操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step2"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤二操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step3"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤三操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们通过<code>step1()</code>、<code>step2()</code>和<code>step3()</code>三个方法创建了三个步骤。Job里要使用这些步骤，只需要通过<code>JobBuilderFactory</code>的<code>start</code>方法指定第一个步骤，然后通过<code>next</code>方法不断地指定下一个步骤即可。</p><p>启动项目，控制台打印日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2020-03-06 13:52:52.188  INFO 18472 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=multiStepJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-06 13:52:52.222  INFO 18472 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step1]</span><br><span class="line">执行步骤一操作。。。</span><br><span class="line">2020-03-06 13:52:52.251  INFO 18472 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step1] executed in 29ms</span><br><span class="line">2020-03-06 13:52:52.292  INFO 18472 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step2]</span><br><span class="line">执行步骤二操作。。。</span><br><span class="line">2020-03-06 13:52:52.323  INFO 18472 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step2] executed in 30ms</span><br><span class="line">2020-03-06 13:52:52.375  INFO 18472 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step3]</span><br><span class="line">执行步骤三操作。。。</span><br><span class="line">2020-03-06 13:52:52.405  INFO 18472 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step3] executed in 29ms</span><br><span class="line">2020-03-06 13:52:52.428  INFO 18472 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=multiStepJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 231ms</span><br></pre></td></tr></table></figure><p></p><p>三个步骤依次执行成功。</p><p>多个步骤在执行过程中也可以通过上一个步骤的执行状态来决定是否执行下一个步骤，修改上面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiStepJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">multiStepJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"multiStepJob2"</span>)</span><br><span class="line">                .start(step1())</span><br><span class="line">                .on(ExitStatus.COMPLETED.getExitCode()).to(step2())</span><br><span class="line">                .from(step2())</span><br><span class="line">                .on(ExitStatus.COMPLETED.getExitCode()).to(step3())</span><br><span class="line">                .from(step3()).end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step1"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤一操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step2"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤二操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step3"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤三操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>multiStepJob()</code>方法的含义是：multiStepJob2任务先执行step1，当step1状态为完成时，接着执行step2，当step2的状态为完成时，接着执行step3。<code>ExitStatus.COMPLETED</code>常量表示任务顺利执行完毕，正常退出，该类还包含以下几种退出状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExitStatus</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">ExitStatus</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convenient constant value representing unknown state - assumed not</span></span><br><span class="line"><span class="comment">     * continuable.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ExitStatus UNKNOWN = <span class="keyword">new</span> ExitStatus(<span class="string">"UNKNOWN"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convenient constant value representing continuable state where processing</span></span><br><span class="line"><span class="comment">     * is still taking place, so no further action is required. Used for</span></span><br><span class="line"><span class="comment">     * asynchronous execution scenarios where the processing is happening in</span></span><br><span class="line"><span class="comment">     * another thread or process and the caller is not required to wait for the</span></span><br><span class="line"><span class="comment">     * result.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ExitStatus EXECUTING = <span class="keyword">new</span> ExitStatus(<span class="string">"EXECUTING"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convenient constant value representing finished processing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ExitStatus COMPLETED = <span class="keyword">new</span> ExitStatus(<span class="string">"COMPLETED"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convenient constant value representing job that did no processing (e.g.</span></span><br><span class="line"><span class="comment">     * because it was already complete).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ExitStatus NOOP = <span class="keyword">new</span> ExitStatus(<span class="string">"NOOP"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convenient constant value representing finished processing with an error.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ExitStatus FAILED = <span class="keyword">new</span> ExitStatus(<span class="string">"FAILED"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convenient constant value representing finished processing with</span></span><br><span class="line"><span class="comment">     * interrupted status.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ExitStatus STOPPED = <span class="keyword">new</span> ExitStatus(<span class="string">"STOPPED"</span>);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2020-03-06 14:21:49.384  INFO 18745 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=multiStepJob2]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-06 14:21:49.427  INFO 18745 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step1]</span><br><span class="line">执行步骤一操作。。。</span><br><span class="line">2020-03-06 14:21:49.456  INFO 18745 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step1] executed in 29ms</span><br><span class="line">2020-03-06 14:21:49.501  INFO 18745 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step2]</span><br><span class="line">执行步骤二操作。。。</span><br><span class="line">2020-03-06 14:21:49.527  INFO 18745 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step2] executed in 26ms</span><br><span class="line">2020-03-06 14:21:49.576  INFO 18745 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step3]</span><br><span class="line">执行步骤三操作。。。</span><br><span class="line">2020-03-06 14:21:49.604  INFO 18745 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step3] executed in 28ms</span><br><span class="line">2020-03-06 14:21:49.629  INFO 18745 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=multiStepJob2]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 238ms</span><br></pre></td></tr></table></figure><p></p><h2 id="Flow的用法"><a href="#Flow的用法" class="headerlink" title="Flow的用法"></a>Flow的用法</h2><p>Flow的作用就是可以将多个步骤Step组合在一起然后再组装到任务Job中。举个Flow的例子，在job包下新建<code>FlowJobDemo</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">flowJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"flowJob"</span>)</span><br><span class="line">                .start(flow())</span><br><span class="line">                .next(step3())</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step1"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤一操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step2"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤二操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step3"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤三操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个flow对象，包含若干个step</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Flow <span class="title">flow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlowBuilder&lt;Flow&gt;(<span class="string">"flow"</span>)</span><br><span class="line">                .start(step1())</span><br><span class="line">                .next(step2())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们通过<code>FlowBuilder</code>将step1和step2组合在一起，创建了一个名为flow的Flow，然后再将其赋给任务Job。使用Flow和Step构建Job的区别是，Job流程中包含Flow类型的时候需要在<code>build()</code>方法前调用<code>end()</code>方法。</p><p>启动程序，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2020-03-06 14:36:42.621  INFO 18865 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=flowJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-06 14:36:42.667  INFO 18865 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step1]</span><br><span class="line">执行步骤一操作。。。</span><br><span class="line">2020-03-06 14:36:42.697  INFO 18865 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step1] executed in 30ms</span><br><span class="line">2020-03-06 14:36:42.744  INFO 18865 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step2]</span><br><span class="line">执行步骤二操作。。。</span><br><span class="line">2020-03-06 14:36:42.771  INFO 18865 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step2] executed in 27ms</span><br><span class="line">2020-03-06 14:36:42.824  INFO 18865 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step3]</span><br><span class="line">执行步骤三操作。。。</span><br><span class="line">2020-03-06 14:36:42.850  INFO 18865 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step3] executed in 25ms</span><br><span class="line">2020-03-06 14:36:42.874  INFO 18865 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=flowJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 245ms</span><br></pre></td></tr></table></figure><p></p><h2 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h2><p>任务中的步骤除了可以串行执行（一个接着一个执行）外，还可以并行执行，并行执行在特定的业务需求下可以提供任务执行效率。</p><p>将任务并行化只需两个简单步骤：</p><ol><li>将步骤Step转换为Flow；</li><li>任务Job中指定并行Flow。</li></ol><p>举个例子，在job包下新建<code>SplitJobDemo</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">splitJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"splitJob"</span>)</span><br><span class="line">                .start(flow1())</span><br><span class="line">                .split(<span class="keyword">new</span> SimpleAsyncTaskExecutor()).add(flow2())</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step1"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤一操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step2"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤二操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step3"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤三操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Flow <span class="title">flow1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlowBuilder&lt;Flow&gt;(<span class="string">"flow1"</span>)</span><br><span class="line">                .start(step1())</span><br><span class="line">                .next(step2())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Flow <span class="title">flow2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlowBuilder&lt;Flow&gt;(<span class="string">"flow2"</span>)</span><br><span class="line">                .start(step3())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子中，我们创建了两个Flow：flow1（包含step1和step2）和flow2（包含step3）。然后通过<code>JobBuilderFactory</code>的<code>split</code>方法，指定一个异步执行器，将flow1和flow2异步执行（也就是并行）。</p><p>启动项目，控制台日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2020-03-06 15:25:43.602  INFO 19449 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=splitJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-06 15:25:43.643  INFO 19449 --- [cTaskExecutor-1] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step3]</span><br><span class="line">2020-03-06 15:25:43.650  INFO 19449 --- [cTaskExecutor-2] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step1]</span><br><span class="line">执行步骤三操作。。。</span><br><span class="line">执行步骤一操作。。。</span><br><span class="line">2020-03-06 15:25:43.673  INFO 19449 --- [cTaskExecutor-2] o.s.batch.core.step.AbstractStep         : Step: [step1] executed in 23ms</span><br><span class="line">2020-03-06 15:25:43.674  INFO 19449 --- [cTaskExecutor-1] o.s.batch.core.step.AbstractStep         : Step: [step3] executed in 31ms</span><br><span class="line">2020-03-06 15:25:43.714  INFO 19449 --- [cTaskExecutor-2] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step2]</span><br><span class="line">执行步骤二操作。。。</span><br><span class="line">2020-03-06 15:25:43.738  INFO 19449 --- [cTaskExecutor-2] o.s.batch.core.step.AbstractStep         : Step: [step2] executed in 24ms</span><br><span class="line">2020-03-06 15:25:43.758  INFO 19449 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=splitJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 146ms</span><br></pre></td></tr></table></figure><p></p><p>可以看到step3并没有在step2后才执行，说明步骤已经是并行化的（开启并行化后，并行的步骤执行顺序并不能100%确定，因为线程调度具有不确定性）。</p><h2 id="任务决策器"><a href="#任务决策器" class="headerlink" title="任务决策器"></a>任务决策器</h2><p>决策器的作用就是可以指定程序在不同的情况下运行不同的任务流程，比如今天是周末，则让任务执行step1和step2，如果是工作日，则之心step1和step3。</p><p>使用决策器前，我们需要自定义一个决策器的实现。在cc.mrbird.batch包下新建decider包，然后创建<code>MyDecider</code>类，实现<code>JobExecutionDecider</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDecider</span> <span class="keyword">implements</span> <span class="title">JobExecutionDecider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FlowExecutionStatus <span class="title">decide</span><span class="params">(JobExecution jobExecution, StepExecution stepExecution)</span> </span>&#123;</span><br><span class="line">        LocalDate now = LocalDate.now();</span><br><span class="line">        DayOfWeek dayOfWeek = now.getDayOfWeek();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FlowExecutionStatus(<span class="string">"weekend"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FlowExecutionStatus(<span class="string">"workingDay"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>MyDecider</code>实现<code>JobExecutionDecider</code>接口的<code>decide</code>方法，该方法返回<code>FlowExecutionStatus</code>。上面的逻辑是：判断今天是否是周末，如果是，返回<code>FlowExecutionStatus(&quot;weekend&quot;)</code>状态，否则返回<code>FlowExecutionStatus(&quot;workingDay&quot;)</code>状态。</p><p>下面演示如何在任务Job里使用决策器。在job包下新建<code>DeciderJobDemo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeciderJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyDecider myDecider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">deciderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"deciderJob"</span>)</span><br><span class="line">                .start(step1())</span><br><span class="line">                .next(myDecider)</span><br><span class="line">                .from(myDecider).on(<span class="string">"weekend"</span>).to(step2())</span><br><span class="line">                .from(myDecider).on(<span class="string">"workingDay"</span>).to(step3())</span><br><span class="line">                .from(step3()).on(<span class="string">"*"</span>).to(step4())</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step1"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤一操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step2"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤二操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step3"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤三操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">step4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step4"</span>)</span><br><span class="line">                .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"执行步骤四操作。。。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;).build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们注入了自定义决策器<code>MyDecider</code>，然后在<code>jobDecider()</code>方法里使用了该决策器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">deciderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"deciderJob"</span>)</span><br><span class="line">            .start(step1())</span><br><span class="line">            .next(myDecider)</span><br><span class="line">            .from(myDecider).on(<span class="string">"weekend"</span>).to(step2())</span><br><span class="line">            .from(myDecider).on(<span class="string">"workingDay"</span>).to(step3())</span><br><span class="line">            .from(step3()).on(<span class="string">"*"</span>).to(step4())</span><br><span class="line">            .end()</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这段代码的含义是：任务deciderJob首先执行step1，然后指定自定义决策器，如果决策器返回weekend，那么执行step2，如果决策器返回workingDay，那么执行step3。如果执行了step3，那么无论step3的结果是什么，都将执行step4。</p><p>启动项目，控制台输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2020-03-06 16:09:10.541  INFO 19873 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=deciderJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-06 16:09:10.609  INFO 19873 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step1]</span><br><span class="line">执行步骤一操作。。。</span><br><span class="line">2020-03-06 16:09:10.641  INFO 19873 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step1] executed in 32ms</span><br><span class="line">2020-03-06 16:09:10.692  INFO 19873 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step3]</span><br><span class="line">执行步骤三操作。。。</span><br><span class="line">2020-03-06 16:09:10.723  INFO 19873 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step3] executed in 31ms</span><br><span class="line">2020-03-06 16:09:10.769  INFO 19873 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [step4]</span><br><span class="line">执行步骤四操作。。。</span><br><span class="line">2020-03-06 16:09:10.797  INFO 19873 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [step4] executed in 27ms</span><br><span class="line">2020-03-06 16:09:10.818  INFO 19873 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=deciderJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 256ms</span><br></pre></td></tr></table></figure><p></p><p>因为今天是2020年03月06日星期五，是工作日，所以任务执行了step1、step3和step4。</p><h2 id="任务嵌套"><a href="#任务嵌套" class="headerlink" title="任务嵌套"></a>任务嵌套</h2><p>任务Job除了可以由Step或者Flow构成外，我们还可以将多个任务Job转换为特殊的Step，然后再赋给另一个任务Job，这就是任务的嵌套。</p><p>举个例子，在job包下新建<code>NestedJobDemo</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedJobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobLauncher jobLauncher;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobRepository jobRepository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager platformTransactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父任务</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">parentJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"parentJob"</span>)</span><br><span class="line">                .start(childJobOneStep())</span><br><span class="line">                .next(childJobTwoStep())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将任务转换为特殊的步骤</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">childJobOneStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JobStepBuilder(<span class="keyword">new</span> StepBuilder(<span class="string">"childJobOneStep"</span>))</span><br><span class="line">                .job(childJobOne())</span><br><span class="line">                .launcher(jobLauncher)</span><br><span class="line">                .repository(jobRepository)</span><br><span class="line">                .transactionManager(platformTransactionManager)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将任务转换为特殊的步骤</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Step <span class="title">childJobTwoStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JobStepBuilder(<span class="keyword">new</span> StepBuilder(<span class="string">"childJobTwoStep"</span>))</span><br><span class="line">                .job(childJobTwo())</span><br><span class="line">                .launcher(jobLauncher)</span><br><span class="line">                .repository(jobRepository)</span><br><span class="line">                .transactionManager(platformTransactionManager)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子任务一</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Job <span class="title">childJobOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"childJobOne"</span>)</span><br><span class="line">                .start(</span><br><span class="line">                    stepBuilderFactory.get(<span class="string">"childJobOneStep"</span>)</span><br><span class="line">                            .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                                System.out.println(<span class="string">"子任务一执行步骤。。。"</span>);</span><br><span class="line">                                <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                            &#125;).build()</span><br><span class="line">                ).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子任务二</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Job <span class="title">childJobTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"childJobTwo"</span>)</span><br><span class="line">                .start(</span><br><span class="line">                    stepBuilderFactory.get(<span class="string">"childJobTwoStep"</span>)</span><br><span class="line">                            .tasklet((stepContribution, chunkContext) -&gt; &#123;</span><br><span class="line">                                System.out.println(<span class="string">"子任务二执行步骤。。。"</span>);</span><br><span class="line">                                <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                            &#125;).build()</span><br><span class="line">                ).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们通过<code>childJobOne()</code>和<code>childJobTwo()</code>方法创建了两个任务Job，这里没什么好说的，前面都介绍过。关键在于<code>childJobOneStep()</code>方法和<code>childJobTwoStep()</code>方法。在<code>childJobOneStep()</code>方法中，我们通过<code>JobStepBuilder</code>构建了一个名称为<code>childJobOneStep</code>的Step，顾名思义，它是一个任务型Step的构造工厂，可以将任务转换为“特殊”的步骤。在构建过程中，我们还需要传入任务执行器JobLauncher、任务仓库JobRepository和事务管理器PlatformTransactionManager。</p><p>将任务转换为特殊的步骤后，将其赋给父任务parentJob即可，流程和前面介绍的一致。</p><p>配置好后，启动项目，控制台输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2020-03-06 16:58:39.771  INFO 21588 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=parentJob]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-06 16:58:39.812  INFO 21588 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [childJobOneStep]</span><br><span class="line">2020-03-06 16:58:39.866  INFO 21588 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=childJobOne]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-06 16:58:39.908  INFO 21588 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [childJobOneStep]</span><br><span class="line">子任务一执行步骤。。。</span><br><span class="line">2020-03-06 16:58:39.940  INFO 21588 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [childJobOneStep] executed in 32ms</span><br><span class="line">2020-03-06 16:58:39.960  INFO 21588 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=childJobOne]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 86ms</span><br><span class="line">2020-03-06 16:58:39.983  INFO 21588 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [childJobOneStep] executed in 171ms</span><br><span class="line">2020-03-06 16:58:40.019  INFO 21588 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [childJobTwoStep]</span><br><span class="line">2020-03-06 16:58:40.067  INFO 21588 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=childJobTwo]] launched with the following parameters: [&#123;&#125;]</span><br><span class="line">2020-03-06 16:58:40.102  INFO 21588 --- [           main] o.s.batch.core.job.SimpleStepHandler     : Executing step: [childJobTwoStep]</span><br><span class="line">子任务二执行步骤。。。</span><br><span class="line">2020-03-06 16:58:40.130  INFO 21588 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [childJobTwoStep] executed in 28ms</span><br><span class="line">2020-03-06 16:58:40.152  INFO 21588 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=childJobTwo]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 75ms</span><br><span class="line">2020-03-06 16:58:40.157  INFO 21588 --- [           main] o.s.batch.core.step.AbstractStep         : Step: [childJobTwoStep] executed in 138ms</span><br><span class="line">2020-03-06 16:58:40.177  INFO 21588 --- [           main] o.s.b.c.l.support.SimpleJobLauncher      : Job: [SimpleJob: [name=parentJob]] completed with the following parameters: [&#123;&#125;] and the following status: [COMPLETED] in 398ms</span><br></pre></td></tr></table></figure><p></p><blockquote><p>本节源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/67.spring-batch-start" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/67.spring-batch-start</a>。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;企业中经常会有需要批处理才能完成的业务操作，比如：自动化地处理大批量复杂的数据，如月结计算；重复性地处理大批量数据，如费率计算；充当内部系统和外部系统的数据纽带，中间需要对数据进行格式化，校验，转换处理等。&lt;/p&gt;&lt;p&gt;Spring Batch是一个轻量级但功能又十分全面的批处理框架，本节我们将通过一些简单的例子来入门Spring Batch。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Spring Batch" scheme="http://mrbird.cc/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot整合WebSocket</title>
    <link href="http://mrbird.cc/Spring-Boot%E6%95%B4%E5%90%88WebSocket.html"/>
    <id>http://mrbird.cc/Spring-Boot整合WebSocket.html</id>
    <published>2020-02-16T09:49:34.000Z</published>
    <updated>2020-03-18T00:58:33.282Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --><p>本节简单介绍下如何在Spring Boot引入WebSocket，实现简单的客户端与服务端建立长连接并互发送文本消息。</p><a id="more"></a><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>新建一个Spring Boot项目，artifactId为spring-boot-websocket-socketjs，项目结构如下图所示：</p><p><img src="img/QQ20200316-183958@2x.png" alt="QQ20200316-183958@2x"></p><p>项目的pom内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-websocket-socketjs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-websocket-socketjs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>引入了spring-boot-starter-websocket和spring-boot-starter-web依赖。</p><h2 id="构建服务端"><a href="#构建服务端" class="headerlink" title="构建服务端"></a>构建服务端</h2><p>在cc.mrbird.socket目录下新建handler包，然后在该包下新建<code>MyStringWebSocketHandler</code>继承<code>TextWebSocketHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStringWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"和客户端建立连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        session.close(CloseStatus.SERVER_ERROR);</span><br><span class="line">        log.error(<span class="string">"连接异常"</span>, exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.afterConnectionClosed(session, status);</span><br><span class="line">        log.info(<span class="string">"和客户端断开连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到客户端发送过来的消息</span></span><br><span class="line">        String receiveMessage = message.getPayload();</span><br><span class="line">        log.info(receiveMessage);</span><br><span class="line">        <span class="comment">// 发送消息给客户端</span></span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(fakeAi(receiveMessage)));</span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        <span class="comment">// session.close(CloseStatus.NORMAL);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">fakeAi</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span> || <span class="string">""</span>.equals(input)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"你说什么？没听清︎"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input.replace(<span class="string">'你'</span>, <span class="string">'我'</span>)</span><br><span class="line">                .replace(<span class="string">"吗"</span>, <span class="string">""</span>)</span><br><span class="line">                .replace(<span class="string">'?'</span>, <span class="string">'!'</span>)</span><br><span class="line">                .replace(<span class="string">'？'</span>, <span class="string">'！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>该类重写了父类<code>AbstractWebSocketHandler</code>的四个方法：</p><p><img src="img/QQ20200316-185332@2x.png" alt="QQ20200316-185332@2x"></p><ul><li><p>afterConnectionEstablished，和客户端链接成功的时候触发该方法；</p></li><li><p>handleTransportError，和客户端连接失败的时候触发该方法；</p></li><li><p>afterConnectionClosed，和客户端断开连接的时候触发该方法；</p></li><li><p>handleTextMessage，和客户端建立连接后，处理客户端发送的请求。</p></li></ul><p><code>WebSocketSession</code>对象代表每个客户端会话，包含许多实用方法：</p><p><img src="img/QQ20200316-185851@2x.png" alt="QQ20200316-185851@2x"></p><p>方法见名知意，就不赘述了。</p><p>此外，因为我们的目的是实现和客户端的通信，并且内容为文本内容，所以我们继承的是<code>TextWebSocketHandler</code>；如果传输的是二进制内容，则可以继承<code>BinaryWebSocketHandler</code>，更多信息可以自行查看<code>WebSocketHandler</code>的子类。</p><p>接着在cc.mrbird.socket目录下新建configure包，然后在该包下新建<code>WebSocketServerConfigure</code>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServerConfigure</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyStringWebSocketHandler myStringWebSocketHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addHandler(myStringWebSocketHandler, <span class="string">"/connect"</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>@EnableWebSocket</code>用于开启WebSocket相关功能，我们注入了上面创建的MyStringWebSocketHandler，并将其注册到了<code>WebSocketHandlerRegistry</code>。</p><p>上面代码的含义是，当客户端通过<code>/connect</code>url和服务端连接通信时，使用<code>MyStringWebSocketHandler</code>处理会话。<code>withSockJS</code>的含义是，通信的客户端是通过SockJS实现的，下面会介绍到。</p><h2 id="构建客户端"><a href="#构建客户端" class="headerlink" title="构建客户端"></a>构建客户端</h2><p><a href="https://github.com/sockjs/sockjs-client" target="_blank" rel="noopener">SockJS</a>是一个JS插件，用于构建WebSocket，兼容性好。</p><p>在resources目录下新建static包，然后在该包下新建client.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket客户端<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/sockjs-client/0.3.4/sockjs.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/twitter-bootstrap/4.4.1/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.jumbotron</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#text</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 3rem;</span></span><br><span class="line"><span class="undefined">        font-size: 1rem;</span></span><br><span class="line"><span class="undefined">        line-height: 3rem;</span></span><br><span class="line"><span class="undefined">        margin: 1rem;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="undefined">        margin-right: 5px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#connect</span> &#123;</span></span><br><span class="line"><span class="undefined">        margin-left: 1rem;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#log</span> &#123;</span></span><br><span class="line"><span class="undefined">        margin: 1rem 0 0 1rem;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入你想传输的内容"</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"col-lg-12"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"连接"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span> <span class="attr">id</span>=<span class="string">"connect"</span> <span class="attr">onclick</span>=<span class="string">"connect()"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"发送"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> <span class="attr">id</span>=<span class="string">"sent"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span> <span class="attr">onclick</span>=<span class="string">"sent()"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"断开"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span> <span class="attr">id</span>=<span class="string">"disconnect"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">onclick</span>=<span class="string">"disconnect()"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"log"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>聊天记录:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'#text'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> connectBtn = <span class="built_in">document</span>.querySelector(<span class="string">"#connect"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> sentBtn = <span class="built_in">document</span>.querySelector(<span class="string">"#sent"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> disconnectBtn = <span class="built_in">document</span>.querySelector(<span class="string">"#disconnect"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> logDiv = <span class="built_in">document</span>.querySelector(<span class="string">"#log"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> ws = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> targetUri = <span class="string">"/connect"</span>;</span></span><br><span class="line"><span class="javascript">        ws = <span class="keyword">new</span> SockJS(targetUri);</span></span><br><span class="line"><span class="javascript">        ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            setConnected(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            log(<span class="string">'和服务端连接成功！'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            log(<span class="string">'服务端说：'</span> + event.data);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            setConnected(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">            log(<span class="string">'和服务端断开连接！'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sent</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (ws != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="undefined">            ws.send(text.value);</span></span><br><span class="line"><span class="javascript">            log(<span class="string">'客户端说：'</span> + text.value);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            log(<span class="string">'请先建立连接！'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">disconnect</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (ws != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="undefined">            ws.close();</span></span><br><span class="line"><span class="javascript">            ws = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        setConnected(<span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> content = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="undefined">        content.innerHTML = value;</span></span><br><span class="line"><span class="undefined">        logDiv.appendChild(content);</span></span><br><span class="line"><span class="javascript">        text.value = <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setConnected</span>(<span class="params">connected</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        connectBtn.disabled = connected;</span></span><br><span class="line"><span class="undefined">        disconnectBtn.disabled = !connected;</span></span><br><span class="line"><span class="undefined">        sentBtn.disabled = !connected;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>html，css那些都不重要，重要的是我们引入了<code>SockJS</code>库。在<code>connect()</code>方法中，我们通过<code>new SockJS(/connect)</code>和上面的服务端建立了Socket通信。<code>SockJS</code>对象包含几个常用的实用方法：</p><ul><li><p><code>onopen</code>，和服务端讲了连接后的回调方法；</p></li><li><p><code>onmessage</code>，服务端返回消息时的回调方法；</p></li><li><p><code>onclose</code>，和服务端断开连接的回调方法；</p></li><li><p><code>send</code>，发送消息给服务端；</p></li><li><p><code>close</code>，断开和服务端的连接。</p></li></ul><p>上面的JS较为简单，其他逻辑自己看看吧。</p><h2 id="通信测试"><a href="#通信测试" class="headerlink" title="通信测试"></a>通信测试</h2><p>启动项目，浏览器访问：<a href="http://localhost:8080/client.html" target="_blank" rel="noopener">http://localhost:8080/client.html</a>：</p><p><img src="img/QQ20200316-191957@2x.png" alt="QQ20200316-191957@2x"></p><blockquote><p>源码连接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/76.spring-boot-websocket-socketjs" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/76.spring-boot-websocket-socketjs</a>。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本节简单介绍下如何在Spring Boot引入WebSocket，实现简单的客户端与服务端建立长连接并互发送文本消息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="WebSocket" scheme="http://mrbird.cc/tags/WebSocket/"/>
    
      <category term="SockJS" scheme="http://mrbird.cc/tags/SockJS/"/>
    
  </entry>
  
  <entry>
    <title>自定义Spring Boot Starter</title>
    <link href="http://mrbird.cc/%E8%87%AA%E5%AE%9A%E4%B9%89Spring-Boot-Starter.html"/>
    <id>http://mrbird.cc/自定义Spring-Boot-Starter.html</id>
    <published>2020-02-10T04:05:00.000Z</published>
    <updated>2020-02-10T04:05:43.910Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 10 2020 14:41:41 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 10 2020 14:41:41 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
